;------------------------------------------------------------------------------
;
; Copyright (c) 2016 - 2017, Intel Corporation. All rights reserved.<BR>
; SPDX-License-Identifier: BSD-2-Clause-Patent
;
;
; Module Name:
;
;  SecEntry.nasm
;
; Abstract:
;
;  This is the code that goes from real-mode to protected mode.
;  It consumes the reset vector.
;
;------------------------------------------------------------------------------

SECTION .text

extern  _SecStartup
extern  __gPcd_FixedAtBuild_PcdStage1StackSize
extern  __gPcd_FixedAtBuild_PcdStage1DataSize
extern  __gPcd_FixedAtBuild_PcdStage1StackBaseOffset
extern  _EarlyBoardInit
extern  _FspTempRamInit

global  __ModuleEntryPoint
__ModuleEntryPoint:
        movd    mm0, eax

        ;
        ; Read time stamp
        ;
        rdtsc
        mov     esi, eax
        mov     edi, edx

        ;
        ; Early board hooks
        ;
        mov     esp, EarlyBoardInitRet
        jmp     _EarlyBoardInit

EarlyBoardInitRet:
        mov     esp, FspTempRamInitRet
        jmp     _FspTempRamInit

FspTempRamInitRet:
        cmp     eax, 8000000Eh      ;Check if ((RETURN_STATUS)(0x80000000 | (14))) returned. Error code for Microcode Update not found.
        je      FspApiSuccess       ;If microcode not found, don't hang, but continue.

        cmp     eax, 0              ;Check if 0 returned.
        jz      FspApiSuccess

        ; FSP API failed:
        jmp     $

FspApiSuccess:
        ;
        ; Setup stack
        ; ECX: Bootloader stack base
        ; EDX: Bootloader stack top
        ;
        mov     esp, ecx
        add     esp, dword [__gPcd_FixedAtBuild_PcdStage1StackBaseOffset]
        add     esp, dword [__gPcd_FixedAtBuild_PcdStage1StackSize]

        xor     ebx, ebx             ; Use EBX for Status
        ;
        ; Check stage1 stack base offset
        ;
        mov     eax, esp
        add     eax, dword [__gPcd_FixedAtBuild_PcdStage1DataSize]
        cmp     eax, edx
        jle     CheckStackRangeDone

        ;
        ; Error in stack range
        ;
        bts     ebx, 1               ; Set 0x00000002 in Status
        sub     esp, dword [__gPcd_FixedAtBuild_PcdStage1StackBaseOffset]

CheckStackRangeDone:
        ;
        ; CpuBist error check
        ;
        movd    eax, mm0
        emms                         ; Exit MMX Instruction
        cmp     eax, 0
        jz      CheckStatusDone

        ;
        ; Error in CpuBist
        ;
        bts     ebx, 0               ; Set 0x00000001 in Status

CheckStatusDone:
        ;
        ; Setup HOB
        ; This structure has to match the layout of STAGE1A_ASM_PARAM
        ;
        push    $0                   ; Status[63:32]
        push    ebx                  ; Status[31:0]
        push    edi                  ; TimeStamp[0] [63:32]
        push    esi                  ; TimeStamp[0] [31:0]
        push    edx                  ; CarTop
        push    ecx                  ; CarBase
        push    $0                   ; Keep the stack 16-byte aligned

        lea     ecx, [esp + 4]
        push    ecx
        call    _SecStartup  ; Jump to C code
        jmp     $

