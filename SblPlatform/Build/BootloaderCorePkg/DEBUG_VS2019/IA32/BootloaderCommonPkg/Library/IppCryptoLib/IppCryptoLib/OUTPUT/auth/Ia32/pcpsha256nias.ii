#line 1 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\BootloaderCommonPkg\\Library\\IppCryptoLib\\auth\\Ia32\\pcpsha256nias.nasm"
#line 1 "e:\\code\\adl_n100_code\\sblplatform\\Build\\BootloaderCorePkg\\DEBUG_VS2019\\IA32\\BootloaderCommonPkg\\Library\\IppCryptoLib\\IppCryptoLib\\DEBUG\\AutoGen.h"















#line 1 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"





















#line 1 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Ia32\\ProcessorBind.h"




















#pragma pack()
#line 23 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Ia32\\ProcessorBind.h"


























#line 50 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Ia32\\ProcessorBind.h"












#pragma warning ( disable : 4214 )




#pragma warning ( disable : 4100 )





#pragma warning ( disable : 4057 )




#pragma warning ( disable : 4127 )




#pragma warning ( disable : 4505 )




#pragma warning ( disable : 4206 )











#pragma warning ( disable : 4701 )





#pragma warning ( disable : 4703 )

#line 109 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Ia32\\ProcessorBind.h"

#line 111 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Ia32\\ProcessorBind.h"




  
  
  

  
  
  
  typedef unsigned __int64    UINT64;
  
  
  
  typedef __int64             INT64;
  
  
  
  typedef unsigned __int32    UINT32;
  
  
  
  typedef __int32             INT32;
  
  
  
  typedef unsigned short      UINT16;
  
  
  
  
  typedef unsigned short      CHAR16;
  
  
  
  typedef short               INT16;
  
  
  
  
  typedef unsigned char       BOOLEAN;
  
  
  
  typedef unsigned char       UINT8;
  
  
  
  typedef char                CHAR8;
  
  
  
  typedef signed char         INT8;















































#line 213 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Ia32\\ProcessorBind.h"





typedef UINT32  UINTN;




typedef INT32   INTN;
























































  
  
  
  











#line 296 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Ia32\\ProcessorBind.h"







#line 304 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Ia32\\ProcessorBind.h"















#line 320 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Ia32\\ProcessorBind.h"

#line 322 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Ia32\\ProcessorBind.h"

#line 23 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"





#pragma warning ( disable : 4200 )
#line 30 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"













#line 44 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"
  
  
  
  
  
  
#line 51 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"






  













#line 72 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"

  
    
    
    
    
    
  #line 80 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"
#line 81 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"







  






#line 96 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"
    
    
    
    
    
    
  






#line 110 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"
#line 111 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"






  









  
    
    
    
    
    
  #line 134 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"
#line 135 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"








  









  
    
    
    
    
    
  #line 160 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"
#line 161 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"






  





#line 174 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"
    
    
    
    
    
  #line 180 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"
#line 181 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"
























  
#line 207 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"








  
#line 217 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"





typedef struct {
  UINT32  Data1;
  UINT16  Data2;
  UINT16  Data3;
  UINT8   Data4[8];
} GUID;




typedef struct {
  UINT8 Addr[4];
} IPv4_ADDRESS;




typedef struct {
  UINT8 Addr[16];
} IPv6_ADDRESS;




typedef UINT64 PHYSICAL_ADDRESS;




typedef struct _LIST_ENTRY LIST_ENTRY;




struct _LIST_ENTRY {
  LIST_ENTRY  *ForwardLink;
  LIST_ENTRY  *BackLink;
};
































































































































































































































































































































































#line 613 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"











#line 625 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"












































#line 670 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"




typedef CHAR8 *VA_LIST;






























































#line 738 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"




typedef UINTN  *BASE_LIST;











































#line 787 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"



#line 791 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"












  


#line 807 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"






static_assert (sizeof (BOOLEAN) == 1, "sizeof (BOOLEAN) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT8)    == 1, "sizeof (INT8) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT8)   == 1, "sizeof (UINT8) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT16)   == 2, "sizeof (INT16) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT16)  == 2, "sizeof (UINT16) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT32)   == 4, "sizeof (INT32) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT32)  == 4, "sizeof (UINT32) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT64)   == 8, "sizeof (INT64) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT64)  == 8, "sizeof (UINT64) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (CHAR8)   == 1, "sizeof (CHAR8) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (CHAR16)  == 2, "sizeof (CHAR16) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (L'A')    == 2, "sizeof (L'A') does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (L"A")    == 4, "sizeof (L\"A\") does not meet UEFI Specification Data Type requirements");








typedef enum {
  __VerifyUint8EnumValue = 0xff
} __VERIFY_UINT8_ENUM_SIZE;

typedef enum {
  __VerifyUint16EnumValue = 0xffff
} __VERIFY_UINT16_ENUM_SIZE;

typedef enum {
  __VerifyUint32EnumValue = 0xffffffff
} __VERIFY_UINT32_ENUM_SIZE;

static_assert (sizeof (__VERIFY_UINT8_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (__VERIFY_UINT16_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (__VERIFY_UINT32_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");

















































































































typedef UINTN RETURN_STATUS;











































































































































































































































































































  void * _ReturnAddress(void);
  #pragma intrinsic(_ReturnAddress)
  











  























#line 1301 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"














#line 1316 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Base.h"

#line 17 "e:\\code\\adl_n100_code\\sblplatform\\Build\\BootloaderCorePkg\\DEBUG_VS2019\\IA32\\BootloaderCommonPkg\\Library\\IppCryptoLib\\IppCryptoLib\\DEBUG\\AutoGen.h"
#line 1 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Library/PcdLib.h"












































































































































































































































































































































































































































































































































































































































































































































































































































































UINTN
__cdecl
LibPcdSetSku (
   UINTN   SkuId
  );












UINT8
__cdecl
LibPcdGet8 (
   UINTN             TokenNumber
  );












UINT16
__cdecl
LibPcdGet16 (
   UINTN             TokenNumber
  );












UINT32
__cdecl
LibPcdGet32 (
   UINTN             TokenNumber
  );












UINT64
__cdecl
LibPcdGet64 (
   UINTN             TokenNumber
  );












void *
__cdecl
LibPcdGetPtr (
   UINTN             TokenNumber
  );












BOOLEAN
__cdecl
LibPcdGetBool (
   UINTN             TokenNumber
  );










UINTN
__cdecl
LibPcdGetSize (
   UINTN             TokenNumber
  );
















UINT8
__cdecl
LibPcdGetEx8 (
   const GUID        *Guid,
   UINTN             TokenNumber
  );
















UINT16
__cdecl
LibPcdGetEx16 (
   const GUID        *Guid,
   UINTN             TokenNumber
  );













UINT32
__cdecl
LibPcdGetEx32 (
   const GUID        *Guid,
   UINTN             TokenNumber
  );
















UINT64
__cdecl
LibPcdGetEx64 (
   const GUID        *Guid,
   UINTN             TokenNumber
  );
















void *
__cdecl
LibPcdGetExPtr (
   const GUID        *Guid,
   UINTN             TokenNumber
  );
















BOOLEAN
__cdecl
LibPcdGetExBool (
   const GUID        *Guid,
   UINTN             TokenNumber
  );
















UINTN
__cdecl
LibPcdGetExSize (
   const GUID        *Guid,
   UINTN             TokenNumber
  );














RETURN_STATUS
__cdecl
LibPcdSet8S (
   UINTN          TokenNumber,
   UINT8          Value
  );













RETURN_STATUS
__cdecl
LibPcdSet16S (
   UINTN          TokenNumber,
   UINT16         Value
  );













RETURN_STATUS
__cdecl
LibPcdSet32S (
   UINTN          TokenNumber,
   UINT32         Value
  );













RETURN_STATUS
__cdecl
LibPcdSet64S (
   UINTN          TokenNumber,
   UINT64         Value
  );























RETURN_STATUS
__cdecl
LibPcdSetPtrS (
         UINTN    TokenNumber,
      UINTN    *SizeOfBuffer,
   const void     *Buffer
  );













RETURN_STATUS
__cdecl
LibPcdSetBoolS (
   UINTN          TokenNumber,
   BOOLEAN        Value
  );

















RETURN_STATUS
__cdecl
LibPcdSetEx8S (
   const GUID     *Guid,
   UINTN          TokenNumber,
   UINT8          Value
  );

















RETURN_STATUS
__cdecl
LibPcdSetEx16S (
   const GUID     *Guid,
   UINTN          TokenNumber,
   UINT16         Value
  );

















RETURN_STATUS
__cdecl
LibPcdSetEx32S (
   const GUID     *Guid,
   UINTN          TokenNumber,
   UINT32         Value
  );

















RETURN_STATUS
__cdecl
LibPcdSetEx64S (
   const GUID     *Guid,
   UINTN          TokenNumber,
   UINT64         Value
  );























RETURN_STATUS
__cdecl
LibPcdSetExPtrS (
   const GUID     *Guid,
         UINTN    TokenNumber,
      UINTN    *SizeOfBuffer,
         void     *Buffer
  );

















RETURN_STATUS
__cdecl
LibPcdSetExBoolS (
   const GUID     *Guid,
   UINTN          TokenNumber,
   BOOLEAN        Value
  );

















typedef
void
(__cdecl *PCD_CALLBACK)(
          const GUID        *CallBackGuid, 
          UINTN             CallBackToken,
       void              *TokenData,
          UINTN             TokenDataSize
  );


















void
__cdecl
LibPcdCallbackOnSet (
   const GUID               *Guid,       
   UINTN                    TokenNumber,
   PCD_CALLBACK             NotificationFunction
  );















void
__cdecl
LibPcdCancelCallback (
   const GUID               *Guid,       
   UINTN                    TokenNumber,
   PCD_CALLBACK             NotificationFunction
  );





















UINTN
__cdecl
LibPcdGetNextToken (
   const GUID               *Guid,       
   UINTN                    TokenNumber
  );
















GUID *
__cdecl
LibPcdGetNextTokenSpace (
   const GUID  *TokenSpaceGuid
  );

























void *
__cdecl
LibPatchPcdSetPtr (
          void       *PatchVariable,
          UINTN       MaximumDatumSize,
       UINTN       *SizeOfBuffer,
   const  void        *Buffer
  );
























RETURN_STATUS
__cdecl
LibPatchPcdSetPtrS (
        void     *PatchVariable,
         UINTN    MaximumDatumSize,
      UINTN    *SizeOfBuffer,
   const void     *Buffer
  );


























void *
__cdecl
LibPatchPcdSetPtrAndSize (
         void        *PatchVariable,
         UINTN       *SizeOfPatchVariable,
          UINTN       MaximumDatumSize,
       UINTN       *SizeOfBuffer,
   const  void        *Buffer
  );


























RETURN_STATUS
__cdecl
LibPatchPcdSetPtrAndSizeS (
        void     *PatchVariable,
        UINTN    *SizeOfPatchVariable,
         UINTN    MaximumDatumSize,
      UINTN    *SizeOfBuffer,
   const void     *Buffer
  );

typedef enum {
  PCD_TYPE_8,
  PCD_TYPE_16,
  PCD_TYPE_32,
  PCD_TYPE_64,
  PCD_TYPE_BOOL,
  PCD_TYPE_PTR
} PCD_TYPE;

typedef struct {
  
  
  
  
  PCD_TYPE          PcdType;
  
  
  
  
  UINTN             PcdSize;
  
  
  
  
  
  
  CHAR8             *PcdName;
} PCD_INFO;














void
__cdecl
LibPcdGetInfo (
          UINTN           TokenNumber,
         PCD_INFO        *PcdInfo
  );














void
__cdecl
LibPcdGetInfoEx (
   const  GUID            *Guid,
          UINTN           TokenNumber,
         PCD_INFO        *PcdInfo
  );








UINTN
__cdecl
LibPcdGetSku (
  void
  );

#line 1735 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\MdePkg\\Include\\Library/PcdLib.h"
#line 18 "e:\\code\\adl_n100_code\\sblplatform\\Build\\BootloaderCorePkg\\DEBUG_VS2019\\IA32\\BootloaderCommonPkg\\Library\\IppCryptoLib\\IppCryptoLib\\DEBUG\\AutoGen.h"

extern GUID  gEfiCallerIdGuid;
extern GUID  gEdkiiDscPlatformGuid;
extern CHAR8 *gEfiCallerBaseName;



extern GUID gPlatformCommonLibTokenSpaceGuid;


extern UINT64 _gPcd_SkuId_Array[];



extern const UINT32 _gPcd_FixedAtBuild_PcdCryptoShaOptMask;






extern const UINT16 _gPcd_FixedAtBuild_PcdIppHashLibSupportedMask;






extern const UINT8 _gPcd_FixedAtBuild_PcdCompSignSchemeSupportedMask;











#line 59 "e:\\code\\adl_n100_code\\sblplatform\\Build\\BootloaderCorePkg\\DEBUG_VS2019\\IA32\\BootloaderCommonPkg\\Library\\IppCryptoLib\\IppCryptoLib\\DEBUG\\AutoGen.h"
#line 1 "e:\\code\\adl_n100_code\\sblplatform\\SblOpen\\BootloaderCommonPkg\\Library\\IppCryptoLib\\auth\\Ia32\\pcpsha256nias.nasm"
;------------------------------------------------------------------------------
;
; Copyright (c) 2017, Intel Corporation. All rights reserved.<BR>
; SPDX-License-Identifier: BSD-2-Clause-Patent
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Intel SHA Extensions optimized implementation of a SHA-256 update function
;
; The function takes a pointer to the current hash values, a pointer to the
; input data, and a number of 64 byte blocks to process.  Once all blocks have
; been processed, the digest pointer is  updated with the resulting hash value.
; The function only processes complete blocks, there is no functionality to
; store partial blocks.  All message padding and hash value initialization must
; be done outside the update function.
;
; The indented lines in the loop are instructions related to rounds processing.
; The non-indented lines are instructions related to the message schedule.
;
; Author: Sean Gulley <sean.m.gulley@intel.com>
; Date:   July 2013
;
; https:
;

    SECTION .text

%define MSG              xmm0
%define STATE0           xmm1
%define STATE1           xmm2
%define MSGTMP0          xmm3
%define MSGTMP1          xmm4
%define MSGTMP2          xmm5
%define MSGTMP3          xmm6
%define MSGTMP4          xmm7

%define SHUF_MASK_DW(x)  [eax+x]
%define SHUF_MASK        [eax+0x00]
%define ABEF_SAVE        [eax+0x10]
%define CDGH_SAVE        [eax+0x20]


%define SHA256CONSTANTS  ebx
%define DIGEST_PTR       edi
%define DATA_PTR         esi
%define DATA_SIZE        ecx

global _UpdateSHA256Ni

_UpdateSHA256Ni:
  push   ebp
  mov    ebp,esp

  push   ebx
  push   esi
  push   edi
  sub    esp,0x40

  ;; Check MSG length
  mov    DATA_SIZE, DWORD  [ebp+0x10]
  test   DATA_SIZE, DATA_SIZE
  je     .done_hash

  ;; Reserve space for local variables
  lea    eax, [esp+0x10]
  and    eax, 0xfffffff0

  ;; Prepare PSHUFFLE_BYTE_FLIP_MASK table
  mov    ebx, 0x00010203
  mov    SHUF_MASK_DW(0), ebx
  mov    ebx, 0x4050607
  mov    SHUF_MASK_DW(4), ebx
  mov    ebx, 0x8090a0b
  mov    SHUF_MASK_DW(8), ebx
  mov    ebx, 0xc0d0e0f
  mov    SHUF_MASK_DW(12), ebx

  ;; Load parameters
  mov    DIGEST_PTR,      [ebp+0x08]
  mov    DATA_PTR,        [ebp+0x0c]
  mov    SHA256CONSTANTS, [ebp+0x14]

  ;; load initial hash values
  ;; Need to reorder these appropriately
  ;; DCBA, HGFE -> ABEF, CDGH
  movdqu    STATE0, [DIGEST_PTR + 0*16]
  movdqu    STATE1, [DIGEST_PTR + 1*16]

  pshufd    STATE0,  STATE0,  0xB1  ; CDAB
  pshufd    STATE1,  STATE1,  0x1B  ; EFGH
  movdqa    MSGTMP4, STATE0
  palignr   STATE0,  STATE1,  8 ; ABEF
  pblendw   STATE1,  MSGTMP4, 0xF0  ; CDGH

.loop0:
  ;; Save hash values for addition after rounds
  movdqa    ABEF_SAVE, STATE0
  movdqa    CDGH_SAVE, STATE1

  ;; Rounds 0-3
  movdqu    MSG, [DATA_PTR + 0*16]
  pshufb    MSG, SHUF_MASK
  movdqa    MSGTMP0, MSG
  paddd     MSG, [SHA256CONSTANTS + 0*16]
  sha256rnds2 STATE1, STATE0, MSG
  pshufd    MSG, MSG, 0x0E
  sha256rnds2 STATE0, STATE1, MSG

  ;; Rounds 4-7
  movdqu    MSG, [DATA_PTR + 1*16]
  pshufb    MSG, SHUF_MASK
  movdqa    MSGTMP1, MSG
  paddd     MSG, [SHA256CONSTANTS + 1*16]
  sha256rnds2 STATE1, STATE0, MSG
  pshufd    MSG, MSG, 0x0E
  sha256rnds2 STATE0, STATE1, MSG
  sha256msg1  MSGTMP0, MSGTMP1

  ;; Rounds 8-11
  movdqu    MSG, [DATA_PTR + 2*16]
  pshufb    MSG, SHUF_MASK
  movdqa    MSGTMP2, MSG
  paddd     MSG, [SHA256CONSTANTS + 2*16]
  sha256rnds2 STATE1, STATE0, MSG
  pshufd    MSG, MSG, 0x0E
  sha256rnds2 STATE0, STATE1, MSG
  sha256msg1  MSGTMP1, MSGTMP2

  ;; Rounds 12-15
  movdqu    MSG, [DATA_PTR + 3*16]
  pshufb    MSG, SHUF_MASK
  movdqa    MSGTMP3, MSG
  paddd     MSG, [SHA256CONSTANTS + 3*16]
  sha256rnds2 STATE1, STATE0, MSG
  movdqa    MSGTMP4, MSGTMP3
  palignr   MSGTMP4, MSGTMP2, 4
  paddd     MSGTMP0, MSGTMP4
  sha256msg2  MSGTMP0, MSGTMP3
  pshufd      MSG, MSG, 0x0E
  sha256rnds2 STATE0, STATE1, MSG
  sha256msg1  MSGTMP2, MSGTMP3

  ;; Rounds 16-19
  movdqa    MSG, MSGTMP0
  paddd     MSG, [SHA256CONSTANTS + 4*16]
  sha256rnds2 STATE1, STATE0, MSG
  movdqa    MSGTMP4, MSGTMP0
  palignr   MSGTMP4, MSGTMP3, 4
  paddd     MSGTMP1, MSGTMP4
  sha256msg2  MSGTMP1, MSGTMP0
  pshufd    MSG, MSG, 0x0E
  sha256rnds2 STATE0, STATE1, MSG
  sha256msg1  MSGTMP3, MSGTMP0

  ;; Rounds 20-23
  movdqa    MSG, MSGTMP1
  paddd     MSG, [SHA256CONSTANTS + 5*16]
  sha256rnds2 STATE1, STATE0, MSG
  movdqa    MSGTMP4, MSGTMP1
  palignr   MSGTMP4, MSGTMP0, 4
  paddd     MSGTMP2, MSGTMP4
  sha256msg2  MSGTMP2, MSGTMP1
  pshufd    MSG, MSG, 0x0E
  sha256rnds2 STATE0, STATE1, MSG
  sha256msg1  MSGTMP0, MSGTMP1

  ;; Rounds 24-27
  movdqa    MSG, MSGTMP2
  paddd     MSG, [SHA256CONSTANTS + 6*16]
  sha256rnds2 STATE1, STATE0, MSG
  movdqa    MSGTMP4, MSGTMP2
  palignr   MSGTMP4, MSGTMP1, 4
  paddd     MSGTMP3, MSGTMP4
  sha256msg2  MSGTMP3, MSGTMP2
  pshufd    MSG, MSG, 0x0E
  sha256rnds2 STATE0, STATE1, MSG
  sha256msg1  MSGTMP1, MSGTMP2

  ;; Rounds 28-31
  movdqa    MSG, MSGTMP3
  paddd     MSG, [SHA256CONSTANTS + 7*16]
  sha256rnds2 STATE1, STATE0, MSG
  movdqa    MSGTMP4, MSGTMP3
  palignr   MSGTMP4, MSGTMP2, 4
  paddd     MSGTMP0, MSGTMP4
  sha256msg2  MSGTMP0, MSGTMP3
  pshufd    MSG, MSG, 0x0E
  sha256rnds2 STATE0, STATE1, MSG
  sha256msg1  MSGTMP2, MSGTMP3

  ;; Rounds 32-35
  movdqa    MSG, MSGTMP0
  paddd     MSG, [SHA256CONSTANTS + 8*16]
  sha256rnds2 STATE1, STATE0, MSG
  movdqa    MSGTMP4, MSGTMP0
  palignr   MSGTMP4, MSGTMP3, 4
  paddd     MSGTMP1, MSGTMP4
  sha256msg2  MSGTMP1, MSGTMP0
  pshufd    MSG, MSG, 0x0E
  sha256rnds2 STATE0, STATE1, MSG
  sha256msg1  MSGTMP3, MSGTMP0

  ;; Rounds 36-39
  movdqa    MSG, MSGTMP1
  paddd     MSG, [SHA256CONSTANTS + 9*16]
  sha256rnds2 STATE1, STATE0, MSG
  movdqa    MSGTMP4, MSGTMP1
  palignr   MSGTMP4, MSGTMP0, 4
  paddd     MSGTMP2, MSGTMP4
  sha256msg2  MSGTMP2, MSGTMP1
  pshufd    MSG, MSG, 0x0E
  sha256rnds2 STATE0, STATE1, MSG
  sha256msg1  MSGTMP0, MSGTMP1

  ;; Rounds 40-43
  movdqa    MSG, MSGTMP2
  paddd     MSG, [SHA256CONSTANTS + 10*16]
  sha256rnds2 STATE1, STATE0, MSG
  movdqa    MSGTMP4, MSGTMP2
  palignr   MSGTMP4, MSGTMP1, 4
  paddd     MSGTMP3, MSGTMP4
  sha256msg2  MSGTMP3, MSGTMP2
  pshufd    MSG, MSG, 0x0E
  sha256rnds2 STATE0, STATE1, MSG
  sha256msg1  MSGTMP1, MSGTMP2

  ;; Rounds 44-47
  movdqa    MSG, MSGTMP3
  paddd     MSG, [SHA256CONSTANTS + 11*16]
  sha256rnds2 STATE1, STATE0, MSG
  movdqa    MSGTMP4, MSGTMP3
  palignr   MSGTMP4, MSGTMP2, 4
  paddd     MSGTMP0, MSGTMP4
  sha256msg2  MSGTMP0, MSGTMP3
  pshufd    MSG, MSG, 0x0E
  sha256rnds2 STATE0, STATE1, MSG
  sha256msg1  MSGTMP2, MSGTMP3

  ;; Rounds 48-51
  movdqa    MSG, MSGTMP0
  paddd     MSG, [SHA256CONSTANTS + 12*16]
  sha256rnds2 STATE1, STATE0, MSG
  movdqa    MSGTMP4, MSGTMP0
  palignr   MSGTMP4, MSGTMP3, 4
  paddd     MSGTMP1, MSGTMP4
  sha256msg2  MSGTMP1, MSGTMP0
  pshufd    MSG, MSG, 0x0E
  sha256rnds2 STATE0, STATE1, MSG
  sha256msg1  MSGTMP3, MSGTMP0

  ;; Rounds 52-55
  movdqa    MSG, MSGTMP1
  paddd     MSG, [SHA256CONSTANTS + 13*16]
  sha256rnds2 STATE1, STATE0, MSG
  movdqa    MSGTMP4, MSGTMP1
  palignr   MSGTMP4, MSGTMP0, 4
  paddd     MSGTMP2, MSGTMP4
  sha256msg2  MSGTMP2, MSGTMP1
  pshufd    MSG, MSG, 0x0E
  sha256rnds2 STATE0, STATE1, MSG

  ;; Rounds 56-59
  movdqa    MSG, MSGTMP2
  paddd     MSG, [SHA256CONSTANTS + 14*16]
  sha256rnds2 STATE1, STATE0, MSG
  movdqa    MSGTMP4, MSGTMP2
  palignr   MSGTMP4, MSGTMP1, 4
  paddd     MSGTMP3, MSGTMP4
  sha256msg2  MSGTMP3, MSGTMP2
  pshufd    MSG, MSG, 0x0E
  sha256rnds2 STATE0, STATE1, MSG

  ;; Rounds 60-63
  movdqa    MSG, MSGTMP3
  paddd     MSG, [SHA256CONSTANTS + 15*16]
  sha256rnds2 STATE1, STATE0, MSG
  pshufd    MSG, MSG, 0x0E
  sha256rnds2 STATE0, STATE1, MSG

  ;; Add current hash values with previously saved
  paddd   STATE0, ABEF_SAVE
  paddd   STATE1, CDGH_SAVE

  ;; Increment data pointer and loop if more to process
  add   DATA_PTR,  64
  sub   DATA_SIZE, 64
  jg    .loop0

  ;; Write hash values back in the correct order
  pshufd    STATE0,  STATE0,  0x1B  ; FEBA
  pshufd    STATE1,  STATE1,  0xB1  ; DCHG
  movdqa    MSGTMP4, STATE0
  pblendw   STATE0,  STATE1,  0xF0  ; DCBA
  palignr   STATE1,  MSGTMP4, 8 ; HGFE

  movdqu    [DIGEST_PTR + 0*16], STATE0
  movdqu    [DIGEST_PTR + 1*16], STATE1

.done_hash:
  add    esp,0x40
  pop    edi
  pop    esi
  pop    ebx
  pop    ebp
  ret
