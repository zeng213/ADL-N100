{'_cfg_page': {'root': {'title': '', 'child': [{'PLT': {'title': 'Platform', 'child': [{'FEATURES': {'title': 'Features', 'child': []}}, {'TCC': {'title': 'Intel(R) Time Coordinated Computing (Intel(R) TCC)', 'child': []}}]}}, {'MEM': {'title': 'Memory Settings', 'child': [{'MEM_MISC': {'title': 'Memory MISC', 'child': []}}, {'MEM_Training': {'title': 'Memory Training', 'child': []}}, {'MEM_SPD': {'title': 'MEM SPD', 'child': []}}]}}, {'SIL': {'title': 'Silicon Settings', 'child': []}}, {'GEN': {'title': 'General Settings', 'child': [{'PLDSEL': {'title': 'GPIO Payload Selection', 'child': []}}, {'FUSA': {'title': 'FuSa Settings', 'child': []}}]}}, {'GIO': {'title': 'Gpio Settings', 'child': [{'GIO_GPP_I00': {'title': 'GPIO GPP_I00', 'child': []}}, {'GIO_GPP_I01': {'title': 'GPIO GPP_I01', 'child': []}}, {'GIO_GPP_I02': {'title': 'GPIO GPP_I02', 'child': []}}, {'GIO_GPP_I03': {'title': 'GPIO GPP_I03', 'child': []}}, {'GIO_GPP_I04': {'title': 'GPIO GPP_I04', 'child': []}}, {'GIO_GPP_I05': {'title': 'GPIO GPP_I05', 'child': []}}, {'GIO_GPP_I06': {'title': 'GPIO GPP_I06', 'child': []}}, {'GIO_GPP_I07': {'title': 'GPIO GPP_I07', 'child': []}}, {'GIO_GPP_I08': {'title': 'GPIO GPP_I08', 'child': []}}, {'GIO_GPP_I09': {'title': 'GPIO GPP_I09', 'child': []}}, {'GIO_GPP_I10': {'title': 'GPIO GPP_I10', 'child': []}}, {'GIO_GPP_I11': {'title': 'GPIO GPP_I11', 'child': []}}, {'GIO_GPP_I12': {'title': 'GPIO GPP_I12', 'child': []}}, {'GIO_GPP_I13': {'title': 'GPIO GPP_I13', 'child': []}}, {'GIO_GPP_I14': {'title': 'GPIO GPP_I14', 'child': []}}, {'GIO_GPP_I15': {'title': 'GPIO GPP_I15', 'child': []}}, {'GIO_GPP_I16': {'title': 'GPIO GPP_I16', 'child': []}}, {'GIO_GPP_I17': {'title': 'GPIO GPP_I17', 'child': []}}, {'GIO_GPP_I18': {'title': 'GPIO GPP_I18', 'child': []}}, {'GIO_GPP_I19': {'title': 'GPIO GPP_I19', 'child': []}}, {'GIO_GPP_I20': {'title': 'GPIO GPP_I20', 'child': []}}, {'GIO_GPP_I21': {'title': 'GPIO GPP_I21', 'child': []}}, {'GIO_GPP_I22': {'title': 'GPIO GPP_I22', 'child': []}}, {'GIO_GPP_R00': {'title': 'GPIO GPP_R00', 'child': []}}, {'GIO_GPP_R01': {'title': 'GPIO GPP_R01', 'child': []}}, {'GIO_GPP_R02': {'title': 'GPIO GPP_R02', 'child': []}}, {'GIO_GPP_R03': {'title': 'GPIO GPP_R03', 'child': []}}, {'GIO_GPP_R04': {'title': 'GPIO GPP_R04', 'child': []}}, {'GIO_GPP_R05': {'title': 'GPIO GPP_R05', 'child': []}}, {'GIO_GPP_R06': {'title': 'GPIO GPP_R06', 'child': []}}, {'GIO_GPP_R07': {'title': 'GPIO GPP_R07', 'child': []}}, {'GIO_GPP_R08': {'title': 'GPIO GPP_R08', 'child': []}}, {'GIO_GPP_R09': {'title': 'GPIO GPP_R09', 'child': []}}, {'GIO_GPP_R10': {'title': 'GPIO GPP_R10', 'child': []}}, {'GIO_GPP_R11': {'title': 'GPIO GPP_R11', 'child': []}}, {'GIO_GPP_R12': {'title': 'GPIO GPP_R12', 'child': []}}, {'GIO_GPP_R13': {'title': 'GPIO GPP_R13', 'child': []}}, {'GIO_GPP_R14': {'title': 'GPIO GPP_R14', 'child': []}}, {'GIO_GPP_R15': {'title': 'GPIO GPP_R15', 'child': []}}, {'GIO_GPP_R16': {'title': 'GPIO GPP_R16', 'child': []}}, {'GIO_GPP_R17': {'title': 'GPIO GPP_R17', 'child': []}}, {'GIO_GPP_R18': {'title': 'GPIO GPP_R18', 'child': []}}, {'GIO_GPP_R19': {'title': 'GPIO GPP_R19', 'child': []}}, {'GIO_GPP_R20': {'title': 'GPIO GPP_R20', 'child': []}}, {'GIO_GPP_R21': {'title': 'GPIO GPP_R21', 'child': []}}, {'GIO_GPP_J00': {'title': 'GPIO GPP_J00', 'child': []}}, {'GIO_GPP_J01': {'title': 'GPIO GPP_J01', 'child': []}}, {'GIO_GPP_J02': {'title': 'GPIO GPP_J02', 'child': []}}, {'GIO_GPP_J03': {'title': 'GPIO GPP_J03', 'child': []}}, {'GIO_GPP_J04': {'title': 'GPIO GPP_J04', 'child': []}}, {'GIO_GPP_J05': {'title': 'GPIO GPP_J05', 'child': []}}, {'GIO_GPP_J06': {'title': 'GPIO GPP_J06', 'child': []}}, {'GIO_GPP_J07': {'title': 'GPIO GPP_J07', 'child': []}}, {'GIO_GPP_J08': {'title': 'GPIO GPP_J08', 'child': []}}, {'GIO_GPP_J09': {'title': 'GPIO GPP_J09', 'child': []}}, {'GIO_GPP_J10': {'title': 'GPIO GPP_J10', 'child': []}}, {'GIO_GPP_J11': {'title': 'GPIO GPP_J11', 'child': []}}, {'GIO_GPP_B00': {'title': 'GPIO GPP_B00', 'child': []}}, {'GIO_GPP_B01': {'title': 'GPIO GPP_B01', 'child': []}}, {'GIO_GPP_B02': {'title': 'GPIO GPP_B02', 'child': []}}, {'GIO_GPP_B03': {'title': 'GPIO GPP_B03', 'child': []}}, {'GIO_GPP_B04': {'title': 'GPIO GPP_B04', 'child': []}}, {'GIO_GPP_B05': {'title': 'GPIO GPP_B05', 'child': []}}, {'GIO_GPP_B06': {'title': 'GPIO GPP_B06', 'child': []}}, {'GIO_GPP_B07': {'title': 'GPIO GPP_B07', 'child': []}}, {'GIO_GPP_B08': {'title': 'GPIO GPP_B08', 'child': []}}, {'GIO_GPP_B09': {'title': 'GPIO GPP_B09', 'child': []}}, {'GIO_GPP_B10': {'title': 'GPIO GPP_B10', 'child': []}}, {'GIO_GPP_B11': {'title': 'GPIO GPP_B11', 'child': []}}, {'GIO_GPP_B12': {'title': 'GPIO GPP_B12', 'child': []}}, {'GIO_GPP_B13': {'title': 'GPIO GPP_B13', 'child': []}}, {'GIO_GPP_B14': {'title': 'GPIO GPP_B14', 'child': []}}, {'GIO_GPP_B15': {'title': 'GPIO GPP_B15', 'child': []}}, {'GIO_GPP_B16': {'title': 'GPIO GPP_B16', 'child': []}}, {'GIO_GPP_B17': {'title': 'GPIO GPP_B17', 'child': []}}, {'GIO_GPP_B18': {'title': 'GPIO GPP_B18', 'child': []}}, {'GIO_GPP_B19': {'title': 'GPIO GPP_B19', 'child': []}}, {'GIO_GPP_B20': {'title': 'GPIO GPP_B20', 'child': []}}, {'GIO_GPP_B21': {'title': 'GPIO GPP_B21', 'child': []}}, {'GIO_GPP_B22': {'title': 'GPIO GPP_B22', 'child': []}}, {'GIO_GPP_B23': {'title': 'GPIO GPP_B23', 'child': []}}, {'GIO_GPP_G00': {'title': 'GPIO GPP_G00', 'child': []}}, {'GIO_GPP_G01': {'title': 'GPIO GPP_G01', 'child': []}}, {'GIO_GPP_G02': {'title': 'GPIO GPP_G02', 'child': []}}, {'GIO_GPP_G03': {'title': 'GPIO GPP_G03', 'child': []}}, {'GIO_GPP_G04': {'title': 'GPIO GPP_G04', 'child': []}}, {'GIO_GPP_G05': {'title': 'GPIO GPP_G05', 'child': []}}, {'GIO_GPP_G06': {'title': 'GPIO GPP_G06', 'child': []}}, {'GIO_GPP_G07': {'title': 'GPIO GPP_G07', 'child': []}}, {'GIO_GPP_H00': {'title': 'GPIO GPP_H00', 'child': []}}, {'GIO_GPP_H01': {'title': 'GPIO GPP_H01', 'child': []}}, {'GIO_GPP_H02': {'title': 'GPIO GPP_H02', 'child': []}}, {'GIO_GPP_H03': {'title': 'GPIO GPP_H03', 'child': []}}, {'GIO_GPP_H04': {'title': 'GPIO GPP_H04', 'child': []}}, {'GIO_GPP_H05': {'title': 'GPIO GPP_H05', 'child': []}}, {'GIO_GPP_H06': {'title': 'GPIO GPP_H06', 'child': []}}, {'GIO_GPP_H07': {'title': 'GPIO GPP_H07', 'child': []}}, {'GIO_GPP_H08': {'title': 'GPIO GPP_H08', 'child': []}}, {'GIO_GPP_H09': {'title': 'GPIO GPP_H09', 'child': []}}, {'GIO_GPP_H10': {'title': 'GPIO GPP_H10', 'child': []}}, {'GIO_GPP_H11': {'title': 'GPIO GPP_H11', 'child': []}}, {'GIO_GPP_H12': {'title': 'GPIO GPP_H12', 'child': []}}, {'GIO_GPP_H13': {'title': 'GPIO GPP_H13', 'child': []}}, {'GIO_GPP_H14': {'title': 'GPIO GPP_H14', 'child': []}}, {'GIO_GPP_H15': {'title': 'GPIO GPP_H15', 'child': []}}, {'GIO_GPP_H16': {'title': 'GPIO GPP_H16', 'child': []}}, {'GIO_GPP_H17': {'title': 'GPIO GPP_H17', 'child': []}}, {'GIO_GPP_H18': {'title': 'GPIO GPP_H18', 'child': []}}, {'GIO_GPP_H19': {'title': 'GPIO GPP_H19', 'child': []}}, {'GIO_GPP_H20': {'title': 'GPIO GPP_H20', 'child': []}}, {'GIO_GPP_H21': {'title': 'GPIO GPP_H21', 'child': []}}, {'GIO_GPP_H22': {'title': 'GPIO GPP_H22', 'child': []}}, {'GIO_GPP_H23': {'title': 'GPIO GPP_H23', 'child': []}}, {'GIO_GPD00': {'title': 'GPIO GPD00', 'child': []}}, {'GIO_GPD01': {'title': 'GPIO GPD01', 'child': []}}, {'GIO_GPD02': {'title': 'GPIO GPD02', 'child': []}}, {'GIO_GPD03': {'title': 'GPIO GPD03', 'child': []}}, {'GIO_GPD04': {'title': 'GPIO GPD04', 'child': []}}, {'GIO_GPD05': {'title': 'GPIO GPD05', 'child': []}}, {'GIO_GPD06': {'title': 'GPIO GPD06', 'child': []}}, {'GIO_GPD07': {'title': 'GPIO GPD07', 'child': []}}, {'GIO_GPD08': {'title': 'GPIO GPD08', 'child': []}}, {'GIO_GPD09': {'title': 'GPIO GPD09', 'child': []}}, {'GIO_GPD10': {'title': 'GPIO GPD10', 'child': []}}, {'GIO_GPD11': {'title': 'GPIO GPD11', 'child': []}}, {'GIO_GPD12': {'title': 'GPIO GPD12', 'child': []}}, {'GIO_GPP_A00': {'title': 'GPIO GPP_A00', 'child': []}}, {'GIO_GPP_A01': {'title': 'GPIO GPP_A01', 'child': []}}, {'GIO_GPP_A02': {'title': 'GPIO GPP_A02', 'child': []}}, {'GIO_GPP_A03': {'title': 'GPIO GPP_A03', 'child': []}}, {'GIO_GPP_A04': {'title': 'GPIO GPP_A04', 'child': []}}, {'GIO_GPP_A05': {'title': 'GPIO GPP_A05', 'child': []}}, {'GIO_GPP_A06': {'title': 'GPIO GPP_A06', 'child': []}}, {'GIO_GPP_A07': {'title': 'GPIO GPP_A07', 'child': []}}, {'GIO_GPP_A08': {'title': 'GPIO GPP_A08', 'child': []}}, {'GIO_GPP_A09': {'title': 'GPIO GPP_A09', 'child': []}}, {'GIO_GPP_A10': {'title': 'GPIO GPP_A10', 'child': []}}, {'GIO_GPP_A11': {'title': 'GPIO GPP_A11', 'child': []}}, {'GIO_GPP_A12': {'title': 'GPIO GPP_A12', 'child': []}}, {'GIO_GPP_A13': {'title': 'GPIO GPP_A13', 'child': []}}, {'GIO_GPP_A14': {'title': 'GPIO GPP_A14', 'child': []}}, {'GIO_GPP_A15': {'title': 'GPIO GPP_A15', 'child': []}}, {'GIO_GPP_A16': {'title': 'GPIO GPP_A16', 'child': []}}, {'GIO_GPP_A17': {'title': 'GPIO GPP_A17', 'child': []}}, {'GIO_GPP_A18': {'title': 'GPIO GPP_A18', 'child': []}}, {'GIO_GPP_A19': {'title': 'GPIO GPP_A19', 'child': []}}, {'GIO_GPP_A20': {'title': 'GPIO GPP_A20', 'child': []}}, {'GIO_GPP_A21': {'title': 'GPIO GPP_A21', 'child': []}}, {'GIO_GPP_A22': {'title': 'GPIO GPP_A22', 'child': []}}, {'GIO_GPP_A23': {'title': 'GPIO GPP_A23', 'child': []}}, {'GIO_GPP_C00': {'title': 'GPIO GPP_C00', 'child': []}}, {'GIO_GPP_C01': {'title': 'GPIO GPP_C01', 'child': []}}, {'GIO_GPP_C02': {'title': 'GPIO GPP_C02', 'child': []}}, {'GIO_GPP_C03': {'title': 'GPIO GPP_C03', 'child': []}}, {'GIO_GPP_C04': {'title': 'GPIO GPP_C04', 'child': []}}, {'GIO_GPP_C05': {'title': 'GPIO GPP_C05', 'child': []}}, {'GIO_GPP_C06': {'title': 'GPIO GPP_C06', 'child': []}}, {'GIO_GPP_C07': {'title': 'GPIO GPP_C07', 'child': []}}, {'GIO_GPP_C08': {'title': 'GPIO GPP_C08', 'child': []}}, {'GIO_GPP_C09': {'title': 'GPIO GPP_C09', 'child': []}}, {'GIO_GPP_C10': {'title': 'GPIO GPP_C10', 'child': []}}, {'GIO_GPP_C11': {'title': 'GPIO GPP_C11', 'child': []}}, {'GIO_GPP_C12': {'title': 'GPIO GPP_C12', 'child': []}}, {'GIO_GPP_C13': {'title': 'GPIO GPP_C13', 'child': []}}, {'GIO_GPP_C14': {'title': 'GPIO GPP_C14', 'child': []}}, {'GIO_GPP_C15': {'title': 'GPIO GPP_C15', 'child': []}}, {'GIO_GPP_C16': {'title': 'GPIO GPP_C16', 'child': []}}, {'GIO_GPP_C17': {'title': 'GPIO GPP_C17', 'child': []}}, {'GIO_GPP_C18': {'title': 'GPIO GPP_C18', 'child': []}}, {'GIO_GPP_C19': {'title': 'GPIO GPP_C19', 'child': []}}, {'GIO_GPP_C20': {'title': 'GPIO GPP_C20', 'child': []}}, {'GIO_GPP_C21': {'title': 'GPIO GPP_C21', 'child': []}}, {'GIO_GPP_C22': {'title': 'GPIO GPP_C22', 'child': []}}, {'GIO_GPP_C23': {'title': 'GPIO GPP_C23', 'child': []}}, {'GIO_GPP_S00': {'title': 'GPIO GPP_S00', 'child': []}}, {'GIO_GPP_S01': {'title': 'GPIO GPP_S01', 'child': []}}, {'GIO_GPP_S02': {'title': 'GPIO GPP_S02', 'child': []}}, {'GIO_GPP_S03': {'title': 'GPIO GPP_S03', 'child': []}}, {'GIO_GPP_S04': {'title': 'GPIO GPP_S04', 'child': []}}, {'GIO_GPP_S05': {'title': 'GPIO GPP_S05', 'child': []}}, {'GIO_GPP_S06': {'title': 'GPIO GPP_S06', 'child': []}}, {'GIO_GPP_S07': {'title': 'GPIO GPP_S07', 'child': []}}, {'GIO_GPP_E00': {'title': 'GPIO GPP_E00', 'child': []}}, {'GIO_GPP_E01': {'title': 'GPIO GPP_E01', 'child': []}}, {'GIO_GPP_E02': {'title': 'GPIO GPP_E02', 'child': []}}, {'GIO_GPP_E03': {'title': 'GPIO GPP_E03', 'child': []}}, {'GIO_GPP_E04': {'title': 'GPIO GPP_E04', 'child': []}}, {'GIO_GPP_E05': {'title': 'GPIO GPP_E05', 'child': []}}, {'GIO_GPP_E06': {'title': 'GPIO GPP_E06', 'child': []}}, {'GIO_GPP_E07': {'title': 'GPIO GPP_E07', 'child': []}}, {'GIO_GPP_E08': {'title': 'GPIO GPP_E08', 'child': []}}, {'GIO_GPP_E09': {'title': 'GPIO GPP_E09', 'child': []}}, {'GIO_GPP_E10': {'title': 'GPIO GPP_E10', 'child': []}}, {'GIO_GPP_E11': {'title': 'GPIO GPP_E11', 'child': []}}, {'GIO_GPP_E12': {'title': 'GPIO GPP_E12', 'child': []}}, {'GIO_GPP_E13': {'title': 'GPIO GPP_E13', 'child': []}}, {'GIO_GPP_E14': {'title': 'GPIO GPP_E14', 'child': []}}, {'GIO_GPP_E15': {'title': 'GPIO GPP_E15', 'child': []}}, {'GIO_GPP_E16': {'title': 'GPIO GPP_E16', 'child': []}}, {'GIO_GPP_E17': {'title': 'GPIO GPP_E17', 'child': []}}, {'GIO_GPP_E18': {'title': 'GPIO GPP_E18', 'child': []}}, {'GIO_GPP_E19': {'title': 'GPIO GPP_E19', 'child': []}}, {'GIO_GPP_E20': {'title': 'GPIO GPP_E20', 'child': []}}, {'GIO_GPP_E21': {'title': 'GPIO GPP_E21', 'child': []}}, {'GIO_GPP_E22': {'title': 'GPIO GPP_E22', 'child': []}}, {'GIO_GPP_E23': {'title': 'GPIO GPP_E23', 'child': []}}, {'GIO_GPP_K00': {'title': 'GPIO GPP_K00', 'child': []}}, {'GIO_GPP_K01': {'title': 'GPIO GPP_K01', 'child': []}}, {'GIO_GPP_K02': {'title': 'GPIO GPP_K02', 'child': []}}, {'GIO_GPP_K03': {'title': 'GPIO GPP_K03', 'child': []}}, {'GIO_GPP_K04': {'title': 'GPIO GPP_K04', 'child': []}}, {'GIO_GPP_K05': {'title': 'GPIO GPP_K05', 'child': []}}, {'GIO_GPP_K06': {'title': 'GPIO GPP_K06', 'child': []}}, {'GIO_GPP_K07': {'title': 'GPIO GPP_K07', 'child': []}}, {'GIO_GPP_K08': {'title': 'GPIO GPP_K08', 'child': []}}, {'GIO_GPP_K09': {'title': 'GPIO GPP_K09', 'child': []}}, {'GIO_GPP_K10': {'title': 'GPIO GPP_K10', 'child': []}}, {'GIO_GPP_K11': {'title': 'GPIO GPP_K11', 'child': []}}, {'GIO_GPP_F00': {'title': 'GPIO GPP_F00', 'child': []}}, {'GIO_GPP_F01': {'title': 'GPIO GPP_F01', 'child': []}}, {'GIO_GPP_F02': {'title': 'GPIO GPP_F02', 'child': []}}, {'GIO_GPP_F03': {'title': 'GPIO GPP_F03', 'child': []}}, {'GIO_GPP_F04': {'title': 'GPIO GPP_F04', 'child': []}}, {'GIO_GPP_F05': {'title': 'GPIO GPP_F05', 'child': []}}, {'GIO_GPP_F06': {'title': 'GPIO GPP_F06', 'child': []}}, {'GIO_GPP_F07': {'title': 'GPIO GPP_F07', 'child': []}}, {'GIO_GPP_F08': {'title': 'GPIO GPP_F08', 'child': []}}, {'GIO_GPP_F09': {'title': 'GPIO GPP_F09', 'child': []}}, {'GIO_GPP_F10': {'title': 'GPIO GPP_F10', 'child': []}}, {'GIO_GPP_F11': {'title': 'GPIO GPP_F11', 'child': []}}, {'GIO_GPP_F12': {'title': 'GPIO GPP_F12', 'child': []}}, {'GIO_GPP_F13': {'title': 'GPIO GPP_F13', 'child': []}}, {'GIO_GPP_F14': {'title': 'GPIO GPP_F14', 'child': []}}, {'GIO_GPP_F15': {'title': 'GPIO GPP_F15', 'child': []}}, {'GIO_GPP_F16': {'title': 'GPIO GPP_F16', 'child': []}}, {'GIO_GPP_F17': {'title': 'GPIO GPP_F17', 'child': []}}, {'GIO_GPP_F18': {'title': 'GPIO GPP_F18', 'child': []}}, {'GIO_GPP_F19': {'title': 'GPIO GPP_F19', 'child': []}}, {'GIO_GPP_F20': {'title': 'GPIO GPP_F20', 'child': []}}, {'GIO_GPP_F21': {'title': 'GPIO GPP_F21', 'child': []}}, {'GIO_GPP_F22': {'title': 'GPIO GPP_F22', 'child': []}}, {'GIO_GPP_F23': {'title': 'GPIO GPP_F23', 'child': []}}, {'GIO_GPP_D00': {'title': 'GPIO GPP_D00', 'child': []}}, {'GIO_GPP_D01': {'title': 'GPIO GPP_D01', 'child': []}}, {'GIO_GPP_D02': {'title': 'GPIO GPP_D02', 'child': []}}, {'GIO_GPP_D03': {'title': 'GPIO GPP_D03', 'child': []}}, {'GIO_GPP_D04': {'title': 'GPIO GPP_D04', 'child': []}}, {'GIO_GPP_D05': {'title': 'GPIO GPP_D05', 'child': []}}, {'GIO_GPP_D06': {'title': 'GPIO GPP_D06', 'child': []}}, {'GIO_GPP_D07': {'title': 'GPIO GPP_D07', 'child': []}}, {'GIO_GPP_D08': {'title': 'GPIO GPP_D08', 'child': []}}, {'GIO_GPP_D09': {'title': 'GPIO GPP_D09', 'child': []}}, {'GIO_GPP_D10': {'title': 'GPIO GPP_D10', 'child': []}}, {'GIO_GPP_D11': {'title': 'GPIO GPP_D11', 'child': []}}, {'GIO_GPP_D12': {'title': 'GPIO GPP_D12', 'child': []}}, {'GIO_GPP_D13': {'title': 'GPIO GPP_D13', 'child': []}}, {'GIO_GPP_D14': {'title': 'GPIO GPP_D14', 'child': []}}, {'GIO_GPP_D15': {'title': 'GPIO GPP_D15', 'child': []}}, {'GIO_GPP_D16': {'title': 'GPIO GPP_D16', 'child': []}}, {'GIO_GPP_D17': {'title': 'GPIO GPP_D17', 'child': []}}, {'GIO_GPP_D18': {'title': 'GPIO GPP_D18', 'child': []}}, {'GIO_GPP_D19': {'title': 'GPIO GPP_D19', 'child': []}}, {'GIO_GPP_D20': {'title': 'GPIO GPP_D20', 'child': []}}, {'GIO_GPP_D21': {'title': 'GPIO GPP_D21', 'child': []}}, {'GIO_GPP_D22': {'title': 'GPIO GPP_D22', 'child': []}}, {'GIO_GPP_D23': {'title': 'GPIO GPP_D23', 'child': []}}, {'GIO_GPP_T00': {'title': 'GPIO GPP_T00', 'child': []}}, {'GIO_GPP_T01': {'title': 'GPIO GPP_T01', 'child': []}}, {'GIO_GPP_T02': {'title': 'GPIO GPP_T02', 'child': []}}, {'GIO_GPP_T03': {'title': 'GPIO GPP_T03', 'child': []}}]}}, {'GFX': {'title': 'Graphics Settings', 'child': []}}, {'OS': {'title': 'OS Boot Options', 'child': [{'OS_0': {'title': 'Boot Option 0', 'child': []}}, {'OS_1': {'title': 'Boot Option 1', 'child': []}}, {'OS_2': {'title': 'Boot Option 2', 'child': []}}, {'OS_3': {'title': 'Boot Option 3', 'child': []}}, {'OS_4': {'title': 'Boot Option 4', 'child': []}}, {'OS_5': {'title': 'Boot Option 5', 'child': []}}, {'OS_6': {'title': 'Boot Option 6', 'child': []}}, {'OS_7': {'title': 'Boot Option 7', 'child': []}}, {'OS_8': {'title': 'Boot Option 8', 'child': []}}, {'OS_9': {'title': 'Boot Option 9', 'child': []}}]}}, {'SEC': {'title': 'Security Settings', 'child': [{'PSD': {'title': 'PSD', 'child': []}}]}}, {'PEP': {'title': 'Power Engine Plugin (PEP) Options', 'child': []}}]}}, '_cfg_list': [{'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'Signature', 'name': '', 'help': '', 'option': '', 'page': 'SEC', 'path': '', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Reserved', 'cname': 'HeaderLength', 'name': '', 'help': '', 'option': '', 'page': 'SEC', 'condition': ''}, {'length': 24, 'value': '{', 'type': 'Reserved', 'cname': 'Reserved', 'name': '', 'help': '', 'option': '', 'page': 'SEC', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'UsedLength', 'name': '', 'help': '', 'option': '', 'page': 'SEC', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'TotalLength', 'name': '', 'help': '', 'option': '', 'page': 'SEC', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'FEATURES', 'path': 'FEATURES_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'FEATURES', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'Acpi', 'name': 'ACPI Enable', 'help': 'Enable/Disable ACPI feature. 1:ACPI Enabled (default), 0:ACPI Disabled', 'option': '$EN_DIS', 'page': 'FEATURES', 'path': 'FEATURES_CFG_DATA.Features', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'MeasuredBoot', 'name': 'MeasuredBoot Enable', 'help': 'Enable/Disable MeasuredBoot feature. 1:MeasuredBoot Enabled (default), 0:MeasuredBoot Disabled', 'option': '$EN_DIS', 'page': 'FEATURES', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'S0ix', 'name': 'S0ix (Low Power Idle) Enable', 'help': 'Enable/Disable S0ix feature. 1:S0ix Enabled, 0:S0ix Disabled', 'option': '$EN_DIS', 'page': 'FEATURES', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'DTT', 'name': 'Intel(R) Dynamic Tuning Technology Enable', 'help': 'Enable/Disable DTT feature. 1:DTT Enabled, 0:DTT Disabled', 'option': '$EN_DIS', 'page': 'FEATURES', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'MeFipsMode', 'name': 'ME FIPS Mode Enable', 'help': 'Enable/Disable ME FIPS Mode. 1:Enabled, 0:Disabled', 'option': '$EN_DIS', 'page': 'FEATURES', 'condition': ''}, {'length': 27, 'value': 'x', 'type': 'Reserved', 'cname': 'Rsvd', 'name': 'Reserved', 'help': 'reserved bits', 'option': '', 'page': 'FEATURES', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'GIO', 'path': 'GPIO_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'GIO', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'GpioHeaderSize', 'name': '', 'help': '', 'option': '', 'page': 'GIO', 'path': 'GPIO_CFG_DATA.GPIO_CFG_HDR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Reserved', 'cname': 'GpioBaseTableId', 'name': '', 'help': '', 'option': '', 'page': 'GIO', 'condition': ''}, {'length': 16, 'type': 'Reserved', 'cname': 'GpioItemSize', 'name': '', 'help': '', 'option': '', 'page': 'GIO', 'condition': ''}, {'length': 16, 'type': 'Reserved', 'cname': 'GpioItemCount', 'name': '', 'help': '', 'option': '', 'page': 'GIO', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'GpioItemIdBitOff', 'name': '', 'help': '', 'option': '', 'page': 'GIO', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'GpioItemIdBitLen', 'name': '', 'help': '', 'option': '', 'page': 'GIO', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'GpioItemValidBitOff', 'name': '', 'help': '', 'option': '', 'page': 'GIO', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'GpioItemUnused', 'name': '', 'help': '', 'option': '', 'page': 'GIO', 'condition': ''}, {'length': 304, 'value': '{', 'type': 'Reserved', 'cname': 'GpioBaseTableBitMask', 'name': '', 'help': '', 'option': '', 'page': 'GIO', 'condition': ''}, {'length': 0, 'type': 'Reserved', 'cname': 'GpioTableData', 'name': '', 'help': '', 'option': '', 'page': 'GIO', 'condition': ''}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I00', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I00', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I00.Hide_GPP_I00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I00', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I00.Hide_GPP_I00 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I00', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I00.Hide_GPP_I00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I00', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I00.Hide_GPP_I00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I00', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I00.Hide_GPP_I00 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I00', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I00.Hide_GPP_I00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I00', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I00', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I00.Hide_GPP_I00 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I00', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I00.Hide_GPP_I00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I00', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I00', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I00', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I00', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I00', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I00', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I00.Hide_GPP_I00 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I00', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I00', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I00', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I00', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I00', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I00.Hide_GPP_I00 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I01', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I01', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I01.Hide_GPP_I01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I01', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I01.Hide_GPP_I01 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I01', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I01.Hide_GPP_I01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I01', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I01.Hide_GPP_I01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I01', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I01.Hide_GPP_I01 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I01', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I01.Hide_GPP_I01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I01', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I01', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I01.Hide_GPP_I01 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I01', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I01.Hide_GPP_I01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I01', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I01', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I01', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I01', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I01', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I01', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I01.Hide_GPP_I01 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I01', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I01', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I01', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I01', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I01', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I01.Hide_GPP_I01 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I02', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I02', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I02.Hide_GPP_I02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I02', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I02.Hide_GPP_I02 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I02', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I02.Hide_GPP_I02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I02', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I02.Hide_GPP_I02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I02', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I02.Hide_GPP_I02 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I02', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I02.Hide_GPP_I02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I02', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I02', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I02.Hide_GPP_I02 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I02', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I02.Hide_GPP_I02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I02', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I02', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I02', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I02', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I02', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I02', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I02.Hide_GPP_I02 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I02', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I02', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I02', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I02', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I02', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I02.Hide_GPP_I02 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I03', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I03', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I03.Hide_GPP_I03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I03', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I03.Hide_GPP_I03 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I03', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I03.Hide_GPP_I03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I03', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I03.Hide_GPP_I03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I03', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I03.Hide_GPP_I03 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I03', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I03.Hide_GPP_I03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I03', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I03', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I03.Hide_GPP_I03 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I03', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I03.Hide_GPP_I03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I03', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I03', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I03', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I03', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I03', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I03', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I03.Hide_GPP_I03 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I03', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I03', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I03', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I03', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I03', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I03.Hide_GPP_I03 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I04', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I04', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I04.Hide_GPP_I04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I04', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I04.Hide_GPP_I04 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I04', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I04.Hide_GPP_I04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I04', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I04.Hide_GPP_I04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I04', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I04.Hide_GPP_I04 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I04', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I04.Hide_GPP_I04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I04', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I04', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I04.Hide_GPP_I04 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I04', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I04.Hide_GPP_I04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I04', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I04', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I04', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I04', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I04', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I04', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I04.Hide_GPP_I04 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I04', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I04', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I04', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I04', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I04', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I04.Hide_GPP_I04 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I05', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I05', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I05.Hide_GPP_I05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I05', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I05.Hide_GPP_I05 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I05', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I05.Hide_GPP_I05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I05', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I05.Hide_GPP_I05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I05', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I05.Hide_GPP_I05 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I05', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I05.Hide_GPP_I05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I05', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I05', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I05.Hide_GPP_I05 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I05', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I05.Hide_GPP_I05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I05', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I05', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I05', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I05', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I05', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I05', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I05.Hide_GPP_I05 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I05', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I05', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I05', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I05', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I05', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I05.Hide_GPP_I05 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I06', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I06', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I06.Hide_GPP_I06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I06', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I06.Hide_GPP_I06 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I06', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I06.Hide_GPP_I06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I06', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I06.Hide_GPP_I06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I06', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I06.Hide_GPP_I06 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I06', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I06.Hide_GPP_I06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I06', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I06', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I06.Hide_GPP_I06 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I06', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I06.Hide_GPP_I06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I06', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I06', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I06', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I06', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I06', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I06', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I06.Hide_GPP_I06 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I06', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I06', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I06', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I06', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I06', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I06.Hide_GPP_I06 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I07', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I07', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I07.Hide_GPP_I07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I07', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I07.Hide_GPP_I07 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I07', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I07.Hide_GPP_I07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I07', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I07.Hide_GPP_I07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I07', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I07.Hide_GPP_I07 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I07', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I07.Hide_GPP_I07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I07', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I07', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I07.Hide_GPP_I07 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I07', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I07.Hide_GPP_I07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I07', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I07', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I07', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I07', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I07', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I07', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I07.Hide_GPP_I07 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I07', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I07', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I07', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I07', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I07', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I07.Hide_GPP_I07 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I08', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I08', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I08.Hide_GPP_I08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I08', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I08.Hide_GPP_I08 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I08', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I08.Hide_GPP_I08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I08', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I08.Hide_GPP_I08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I08', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I08.Hide_GPP_I08 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I08', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I08.Hide_GPP_I08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I08', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I08', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I08.Hide_GPP_I08 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I08', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I08.Hide_GPP_I08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I08', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I08', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I08', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I08', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I08', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I08', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I08.Hide_GPP_I08 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I08', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I08', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I08', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I08', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I08', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I08.Hide_GPP_I08 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I09', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I09', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I09.Hide_GPP_I09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I09', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I09.Hide_GPP_I09 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I09', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I09.Hide_GPP_I09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I09', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I09.Hide_GPP_I09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I09', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I09.Hide_GPP_I09 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I09', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I09.Hide_GPP_I09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I09', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I09', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I09.Hide_GPP_I09 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I09', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I09.Hide_GPP_I09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I09', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I09', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I09', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I09', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I09', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I09', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I09.Hide_GPP_I09 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I09', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I09', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I09', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I09', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I09', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I09.Hide_GPP_I09 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I10', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I10', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I10.Hide_GPP_I10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I10', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I10.Hide_GPP_I10 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I10', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I10.Hide_GPP_I10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I10', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I10.Hide_GPP_I10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I10', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I10.Hide_GPP_I10 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I10', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I10.Hide_GPP_I10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I10', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I10', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I10.Hide_GPP_I10 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I10', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I10.Hide_GPP_I10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I10', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I10', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I10', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I10', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I10', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I10', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I10.Hide_GPP_I10 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I10', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I10', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I10', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I10', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I10', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I10.Hide_GPP_I10 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I11', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I11', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I11.Hide_GPP_I11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I11', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I11.Hide_GPP_I11 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I11', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I11.Hide_GPP_I11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I11', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I11.Hide_GPP_I11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I11', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I11.Hide_GPP_I11 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I11', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I11.Hide_GPP_I11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I11', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I11', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I11.Hide_GPP_I11 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I11', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I11.Hide_GPP_I11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I11', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I11', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I11', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I11', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I11', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I11', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I11.Hide_GPP_I11 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I11', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I11', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I11', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I11', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I11', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I11.Hide_GPP_I11 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I12', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I12', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I12.Hide_GPP_I12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I12', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I12.Hide_GPP_I12 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I12', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I12.Hide_GPP_I12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I12', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I12.Hide_GPP_I12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I12', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I12.Hide_GPP_I12 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I12', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I12.Hide_GPP_I12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I12', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I12', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I12.Hide_GPP_I12 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I12', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I12.Hide_GPP_I12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I12', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I12', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I12', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I12', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I12', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I12', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I12.Hide_GPP_I12 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I12', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I12', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I12', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I12', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I12', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I12.Hide_GPP_I12 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I13', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I13', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I13.Hide_GPP_I13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I13', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I13.Hide_GPP_I13 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I13', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I13.Hide_GPP_I13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I13', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I13.Hide_GPP_I13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I13', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I13.Hide_GPP_I13 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I13', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I13.Hide_GPP_I13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I13', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I13', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I13.Hide_GPP_I13 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I13', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I13.Hide_GPP_I13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I13', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I13', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I13', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I13', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I13', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I13', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I13.Hide_GPP_I13 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I13', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I13', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I13', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I13', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I13', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I13.Hide_GPP_I13 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I14', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I14', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I14.Hide_GPP_I14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I14', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I14.Hide_GPP_I14 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I14', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I14.Hide_GPP_I14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I14', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I14.Hide_GPP_I14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I14', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I14.Hide_GPP_I14 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I14', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I14.Hide_GPP_I14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I14', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I14', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I14.Hide_GPP_I14 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I14', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I14.Hide_GPP_I14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I14', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I14', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I14', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I14', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I14', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I14', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I14.Hide_GPP_I14 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I14', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I14', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I14', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I14', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I14', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I14.Hide_GPP_I14 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I15', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I15', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I15.Hide_GPP_I15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I15', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I15.Hide_GPP_I15 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I15', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I15.Hide_GPP_I15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I15', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I15.Hide_GPP_I15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I15', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I15.Hide_GPP_I15 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I15', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I15.Hide_GPP_I15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I15', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I15', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I15.Hide_GPP_I15 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I15', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I15.Hide_GPP_I15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I15', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I15', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I15', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I15', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I15', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I15', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I15.Hide_GPP_I15 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I15', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I15', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I15', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I15', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I15', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I15.Hide_GPP_I15 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I16', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I16', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I16.Hide_GPP_I16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I16', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I16.Hide_GPP_I16 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I16', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I16.Hide_GPP_I16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I16', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I16.Hide_GPP_I16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I16', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I16.Hide_GPP_I16 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I16', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I16.Hide_GPP_I16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I16', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I16', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I16.Hide_GPP_I16 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I16', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I16.Hide_GPP_I16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I16', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I16', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I16', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I16', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I16', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I16', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I16.Hide_GPP_I16 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I16', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I16', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I16', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I16', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I16', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I16.Hide_GPP_I16 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I17', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I17', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I17.Hide_GPP_I17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I17', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I17.Hide_GPP_I17 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I17', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I17.Hide_GPP_I17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I17', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I17.Hide_GPP_I17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I17', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I17.Hide_GPP_I17 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I17', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I17.Hide_GPP_I17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I17', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I17', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I17.Hide_GPP_I17 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I17', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I17.Hide_GPP_I17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I17', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I17', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I17', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I17', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I17', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I17', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I17.Hide_GPP_I17 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I17', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I17', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I17', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I17', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I17', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I17.Hide_GPP_I17 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I18', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I18', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I18.Hide_GPP_I18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I18', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I18.Hide_GPP_I18 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I18', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I18.Hide_GPP_I18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I18', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I18.Hide_GPP_I18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I18', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I18.Hide_GPP_I18 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I18', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I18.Hide_GPP_I18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I18', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I18', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I18.Hide_GPP_I18 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I18', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I18.Hide_GPP_I18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I18', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I18', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I18', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I18', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I18', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I18', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I18.Hide_GPP_I18 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I18', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I18', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I18', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I18', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I18', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I18.Hide_GPP_I18 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I19', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I19', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I19.Hide_GPP_I19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I19', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I19.Hide_GPP_I19 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I19', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I19.Hide_GPP_I19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I19', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I19.Hide_GPP_I19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I19', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I19.Hide_GPP_I19 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I19', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I19.Hide_GPP_I19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I19', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I19', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I19.Hide_GPP_I19 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I19', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I19.Hide_GPP_I19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I19', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I19', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I19', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I19', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I19', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I19', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I19.Hide_GPP_I19 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I19', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I19', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I19', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I19', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I19', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I19.Hide_GPP_I19 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I20', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I20', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I20.Hide_GPP_I20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I20', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I20.Hide_GPP_I20 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I20', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I20.Hide_GPP_I20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I20', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I20.Hide_GPP_I20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I20', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I20.Hide_GPP_I20 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I20', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I20.Hide_GPP_I20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I20', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I20', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I20.Hide_GPP_I20 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I20', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I20.Hide_GPP_I20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I20', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I20', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I20', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I20', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I20', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I20', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I20.Hide_GPP_I20 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I20', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I20', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I20', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I20', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I20', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I20.Hide_GPP_I20 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I21', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I21', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I21.Hide_GPP_I21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I21', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I21.Hide_GPP_I21 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I21', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I21.Hide_GPP_I21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I21', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I21.Hide_GPP_I21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I21', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I21.Hide_GPP_I21 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I21', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I21.Hide_GPP_I21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I21', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I21', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I21.Hide_GPP_I21 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I21', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I21.Hide_GPP_I21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I21', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I21', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I21', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I21', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I21', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I21', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I21.Hide_GPP_I21 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I21', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I21', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I21', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I21', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I21', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I21.Hide_GPP_I21 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_I22', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_I22', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I22.Hide_GPP_I22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_I22', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_I22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I22.Hide_GPP_I22 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_I22', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_I22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I22.Hide_GPP_I22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_I22', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_I22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I22.Hide_GPP_I22 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_I22', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_I22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I22.Hide_GPP_I22 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_I22', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_I22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I22.Hide_GPP_I22 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_I22', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_I22', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I22.Hide_GPP_I22 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_I22', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_I22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I22.Hide_GPP_I22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_I22', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_I22', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_I22', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_I22', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_I22', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_I22', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_I22', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_I22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I22.Hide_GPP_I22 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_I22', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_I22', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_I22', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_I22', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_I22', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_I22', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_I22.Hide_GPP_I22 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R00', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R00', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R00.Hide_GPP_R00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R00', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R00.Hide_GPP_R00 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R00', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R00.Hide_GPP_R00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R00', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R00.Hide_GPP_R00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R00', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R00.Hide_GPP_R00 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R00', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R00.Hide_GPP_R00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R00', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R00', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R00.Hide_GPP_R00 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R00', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R00.Hide_GPP_R00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R00', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R00', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R00', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R00', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R00', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R00', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R00.Hide_GPP_R00 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R00', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R00', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R00', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R00', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R00', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R00.Hide_GPP_R00 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R01', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R01', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R01.Hide_GPP_R01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R01', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R01.Hide_GPP_R01 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R01', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R01.Hide_GPP_R01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R01', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R01.Hide_GPP_R01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R01', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R01.Hide_GPP_R01 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R01', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R01.Hide_GPP_R01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R01', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R01', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R01.Hide_GPP_R01 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R01', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R01.Hide_GPP_R01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R01', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R01', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R01', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R01', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R01', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R01', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R01.Hide_GPP_R01 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R01', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R01', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R01', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R01', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R01', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R01.Hide_GPP_R01 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R02', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R02', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R02.Hide_GPP_R02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R02', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R02.Hide_GPP_R02 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R02', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R02.Hide_GPP_R02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R02', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R02.Hide_GPP_R02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R02', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R02.Hide_GPP_R02 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R02', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R02.Hide_GPP_R02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R02', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R02', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R02.Hide_GPP_R02 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R02', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R02.Hide_GPP_R02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R02', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R02', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R02', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R02', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R02', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R02', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R02.Hide_GPP_R02 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R02', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R02', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R02', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R02', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R02', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R02.Hide_GPP_R02 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R03', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R03', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R03.Hide_GPP_R03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R03', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R03.Hide_GPP_R03 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R03', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R03.Hide_GPP_R03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R03', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R03.Hide_GPP_R03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R03', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R03.Hide_GPP_R03 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R03', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R03.Hide_GPP_R03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R03', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R03', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R03.Hide_GPP_R03 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R03', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R03.Hide_GPP_R03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R03', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R03', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R03', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R03', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R03', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R03', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R03.Hide_GPP_R03 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R03', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R03', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R03', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R03', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R03', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R03.Hide_GPP_R03 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R04', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R04', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R04.Hide_GPP_R04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R04', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R04.Hide_GPP_R04 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R04', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R04.Hide_GPP_R04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R04', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R04.Hide_GPP_R04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R04', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R04.Hide_GPP_R04 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R04', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R04.Hide_GPP_R04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R04', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R04', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R04.Hide_GPP_R04 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R04', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R04.Hide_GPP_R04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R04', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R04', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R04', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R04', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R04', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R04', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R04.Hide_GPP_R04 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R04', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R04', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R04', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R04', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R04', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R04.Hide_GPP_R04 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R05', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R05', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R05.Hide_GPP_R05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R05', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R05.Hide_GPP_R05 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R05', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R05.Hide_GPP_R05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R05', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R05.Hide_GPP_R05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R05', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R05.Hide_GPP_R05 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R05', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R05.Hide_GPP_R05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R05', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R05', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R05.Hide_GPP_R05 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R05', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R05.Hide_GPP_R05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R05', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R05', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R05', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R05', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R05', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R05', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R05.Hide_GPP_R05 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R05', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R05', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R05', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R05', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R05', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R05.Hide_GPP_R05 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R06', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R06', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R06.Hide_GPP_R06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R06', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R06.Hide_GPP_R06 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R06', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R06.Hide_GPP_R06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R06', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R06.Hide_GPP_R06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R06', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R06.Hide_GPP_R06 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R06', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R06.Hide_GPP_R06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R06', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R06', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R06.Hide_GPP_R06 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R06', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R06.Hide_GPP_R06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R06', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R06', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R06', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R06', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R06', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R06', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R06.Hide_GPP_R06 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R06', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R06', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R06', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R06', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R06', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R06.Hide_GPP_R06 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R07', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R07', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R07.Hide_GPP_R07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R07', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R07.Hide_GPP_R07 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R07', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R07.Hide_GPP_R07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R07', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R07.Hide_GPP_R07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R07', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R07.Hide_GPP_R07 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R07', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R07.Hide_GPP_R07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R07', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R07', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R07.Hide_GPP_R07 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R07', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R07.Hide_GPP_R07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R07', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R07', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R07', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R07', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R07', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R07', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R07.Hide_GPP_R07 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R07', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R07', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R07', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R07', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R07', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R07.Hide_GPP_R07 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R08', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R08', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R08.Hide_GPP_R08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R08', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R08.Hide_GPP_R08 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R08', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R08.Hide_GPP_R08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R08', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R08.Hide_GPP_R08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R08', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R08.Hide_GPP_R08 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R08', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R08.Hide_GPP_R08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R08', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R08', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R08.Hide_GPP_R08 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R08', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R08.Hide_GPP_R08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R08', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R08', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R08', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R08', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R08', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R08', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R08.Hide_GPP_R08 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R08', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R08', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R08', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R08', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R08', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R08.Hide_GPP_R08 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R09', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R09', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R09.Hide_GPP_R09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R09', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R09.Hide_GPP_R09 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R09', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R09.Hide_GPP_R09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R09', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R09.Hide_GPP_R09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R09', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R09.Hide_GPP_R09 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R09', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R09.Hide_GPP_R09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R09', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R09', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R09.Hide_GPP_R09 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R09', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R09.Hide_GPP_R09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R09', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R09', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R09', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R09', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R09', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R09', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R09.Hide_GPP_R09 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R09', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R09', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R09', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R09', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R09', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R09.Hide_GPP_R09 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R10', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R10', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R10.Hide_GPP_R10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R10', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R10.Hide_GPP_R10 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R10', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R10.Hide_GPP_R10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R10', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R10.Hide_GPP_R10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R10', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R10.Hide_GPP_R10 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R10', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R10.Hide_GPP_R10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R10', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R10', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R10.Hide_GPP_R10 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R10', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R10.Hide_GPP_R10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R10', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R10', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R10', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R10', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R10', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R10', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R10.Hide_GPP_R10 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R10', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R10', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R10', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R10', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R10', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R10.Hide_GPP_R10 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R11', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R11', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R11.Hide_GPP_R11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R11', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R11.Hide_GPP_R11 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R11', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R11.Hide_GPP_R11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R11', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R11.Hide_GPP_R11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R11', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R11.Hide_GPP_R11 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R11', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R11.Hide_GPP_R11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R11', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R11', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R11.Hide_GPP_R11 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R11', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R11.Hide_GPP_R11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R11', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R11', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R11', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R11', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R11', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R11', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R11.Hide_GPP_R11 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R11', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R11', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R11', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R11', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R11', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R11.Hide_GPP_R11 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R12', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R12', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R12.Hide_GPP_R12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R12', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R12.Hide_GPP_R12 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R12', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R12.Hide_GPP_R12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R12', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R12.Hide_GPP_R12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R12', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R12.Hide_GPP_R12 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R12', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R12.Hide_GPP_R12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R12', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R12', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R12.Hide_GPP_R12 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R12', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R12.Hide_GPP_R12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R12', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R12', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R12', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R12', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R12', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R12', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R12.Hide_GPP_R12 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R12', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R12', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R12', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R12', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R12', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R12.Hide_GPP_R12 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R13', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R13', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R13.Hide_GPP_R13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R13', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R13.Hide_GPP_R13 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R13', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R13.Hide_GPP_R13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R13', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R13.Hide_GPP_R13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R13', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R13.Hide_GPP_R13 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R13', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R13.Hide_GPP_R13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R13', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R13', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R13.Hide_GPP_R13 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R13', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R13.Hide_GPP_R13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R13', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R13', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R13', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R13', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R13', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R13', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R13.Hide_GPP_R13 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R13', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R13', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R13', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R13', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R13', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R13.Hide_GPP_R13 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R14', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R14', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R14.Hide_GPP_R14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R14', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R14.Hide_GPP_R14 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R14', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R14.Hide_GPP_R14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R14', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R14.Hide_GPP_R14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R14', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R14.Hide_GPP_R14 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R14', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R14.Hide_GPP_R14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R14', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R14', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R14.Hide_GPP_R14 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R14', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R14.Hide_GPP_R14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R14', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R14', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R14', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R14', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R14', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R14', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R14.Hide_GPP_R14 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R14', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R14', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R14', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R14', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R14', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R14.Hide_GPP_R14 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R15', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R15', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R15.Hide_GPP_R15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R15', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R15.Hide_GPP_R15 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R15', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R15.Hide_GPP_R15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R15', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R15.Hide_GPP_R15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R15', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R15.Hide_GPP_R15 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R15', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R15.Hide_GPP_R15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R15', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R15', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R15.Hide_GPP_R15 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R15', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R15.Hide_GPP_R15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R15', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R15', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R15', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R15', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R15', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R15', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R15.Hide_GPP_R15 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R15', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R15', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R15', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R15', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R15', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R15.Hide_GPP_R15 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R16', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R16', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R16.Hide_GPP_R16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R16', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R16.Hide_GPP_R16 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R16', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R16.Hide_GPP_R16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R16', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R16.Hide_GPP_R16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R16', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R16.Hide_GPP_R16 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R16', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R16.Hide_GPP_R16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R16', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R16', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R16.Hide_GPP_R16 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R16', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R16.Hide_GPP_R16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R16', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R16', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R16', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R16', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R16', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R16', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R16.Hide_GPP_R16 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R16', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R16', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R16', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R16', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R16', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R16.Hide_GPP_R16 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R17', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R17', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R17.Hide_GPP_R17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R17', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R17.Hide_GPP_R17 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R17', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R17.Hide_GPP_R17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R17', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R17.Hide_GPP_R17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R17', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R17.Hide_GPP_R17 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R17', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R17.Hide_GPP_R17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R17', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R17', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R17.Hide_GPP_R17 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R17', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R17.Hide_GPP_R17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R17', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R17', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R17', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R17', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R17', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R17', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R17.Hide_GPP_R17 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R17', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R17', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R17', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R17', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R17', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R17.Hide_GPP_R17 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R18', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R18', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R18.Hide_GPP_R18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R18', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R18.Hide_GPP_R18 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R18', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R18.Hide_GPP_R18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R18', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R18.Hide_GPP_R18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R18', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R18.Hide_GPP_R18 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R18', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R18.Hide_GPP_R18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R18', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R18', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R18.Hide_GPP_R18 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R18', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R18.Hide_GPP_R18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R18', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R18', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R18', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R18', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R18', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R18', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R18.Hide_GPP_R18 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R18', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R18', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R18', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R18', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R18', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R18.Hide_GPP_R18 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R19', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R19', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R19.Hide_GPP_R19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R19', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R19.Hide_GPP_R19 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R19', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R19.Hide_GPP_R19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R19', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R19.Hide_GPP_R19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R19', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R19.Hide_GPP_R19 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R19', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R19.Hide_GPP_R19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R19', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R19', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R19.Hide_GPP_R19 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R19', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R19.Hide_GPP_R19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R19', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R19', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R19', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R19', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R19', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R19', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R19.Hide_GPP_R19 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R19', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R19', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R19', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R19', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R19', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R19.Hide_GPP_R19 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R20', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R20', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R20.Hide_GPP_R20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R20', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R20.Hide_GPP_R20 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R20', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R20.Hide_GPP_R20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R20', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R20.Hide_GPP_R20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R20', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R20.Hide_GPP_R20 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R20', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R20.Hide_GPP_R20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R20', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R20', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R20.Hide_GPP_R20 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R20', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R20.Hide_GPP_R20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R20', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R20', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R20', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R20', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R20', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R20', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R20.Hide_GPP_R20 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R20', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R20', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R20', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R20', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R20', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R20.Hide_GPP_R20 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_R21', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_R21', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R21.Hide_GPP_R21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_R21', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_R21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R21.Hide_GPP_R21 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_R21', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_R21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R21.Hide_GPP_R21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_R21', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_R21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R21.Hide_GPP_R21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_R21', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_R21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R21.Hide_GPP_R21 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_R21', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_R21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R21.Hide_GPP_R21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_R21', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_R21', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R21.Hide_GPP_R21 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_R21', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_R21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R21.Hide_GPP_R21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_R21', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_R21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_R21', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_R21', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_R21', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_R21', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_R21', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_R21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R21.Hide_GPP_R21 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_R21', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_R21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_R21', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_R21', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_R21', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_R21', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_R21.Hide_GPP_R21 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_J00', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_J00', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J00.Hide_GPP_J00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_J00', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_J00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J00.Hide_GPP_J00 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_J00', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_J00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J00.Hide_GPP_J00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_J00', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_J00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J00.Hide_GPP_J00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_J00', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_J00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J00.Hide_GPP_J00 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_J00', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_J00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J00.Hide_GPP_J00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_J00', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_J00', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J00.Hide_GPP_J00 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_J00', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_J00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J00.Hide_GPP_J00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_J00', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_J00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_J00', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_J00', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_J00', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_J00', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_J00', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_J00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J00.Hide_GPP_J00 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_J00', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_J00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_J00', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_J00', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_J00', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_J00', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J00.Hide_GPP_J00 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_J01', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_J01', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J01.Hide_GPP_J01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_J01', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_J01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J01.Hide_GPP_J01 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_J01', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_J01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J01.Hide_GPP_J01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_J01', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_J01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J01.Hide_GPP_J01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_J01', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_J01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J01.Hide_GPP_J01 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_J01', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_J01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J01.Hide_GPP_J01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_J01', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_J01', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J01.Hide_GPP_J01 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_J01', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_J01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J01.Hide_GPP_J01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_J01', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_J01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_J01', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_J01', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_J01', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_J01', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_J01', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_J01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J01.Hide_GPP_J01 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_J01', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_J01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_J01', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_J01', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_J01', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_J01', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J01.Hide_GPP_J01 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_J02', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_J02', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J02.Hide_GPP_J02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_J02', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_J02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J02.Hide_GPP_J02 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_J02', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_J02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J02.Hide_GPP_J02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_J02', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_J02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J02.Hide_GPP_J02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_J02', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_J02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J02.Hide_GPP_J02 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_J02', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_J02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J02.Hide_GPP_J02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_J02', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_J02', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J02.Hide_GPP_J02 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_J02', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_J02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J02.Hide_GPP_J02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_J02', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_J02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_J02', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_J02', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_J02', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_J02', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_J02', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_J02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J02.Hide_GPP_J02 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_J02', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_J02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_J02', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_J02', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_J02', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_J02', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J02.Hide_GPP_J02 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_J03', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_J03', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J03.Hide_GPP_J03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_J03', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_J03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J03.Hide_GPP_J03 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_J03', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_J03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J03.Hide_GPP_J03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_J03', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_J03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J03.Hide_GPP_J03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_J03', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_J03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J03.Hide_GPP_J03 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_J03', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_J03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J03.Hide_GPP_J03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_J03', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_J03', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J03.Hide_GPP_J03 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_J03', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_J03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J03.Hide_GPP_J03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_J03', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_J03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_J03', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_J03', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_J03', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_J03', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_J03', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_J03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J03.Hide_GPP_J03 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_J03', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_J03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_J03', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_J03', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_J03', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_J03', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J03.Hide_GPP_J03 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_J04', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_J04', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J04.Hide_GPP_J04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_J04', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_J04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J04.Hide_GPP_J04 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_J04', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_J04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J04.Hide_GPP_J04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_J04', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_J04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J04.Hide_GPP_J04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_J04', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_J04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J04.Hide_GPP_J04 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_J04', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_J04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J04.Hide_GPP_J04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_J04', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_J04', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J04.Hide_GPP_J04 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_J04', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_J04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J04.Hide_GPP_J04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_J04', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_J04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_J04', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_J04', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_J04', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_J04', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_J04', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_J04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J04.Hide_GPP_J04 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_J04', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_J04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_J04', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_J04', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_J04', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_J04', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J04.Hide_GPP_J04 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_J05', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_J05', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J05.Hide_GPP_J05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_J05', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_J05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J05.Hide_GPP_J05 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_J05', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_J05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J05.Hide_GPP_J05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_J05', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_J05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J05.Hide_GPP_J05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_J05', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_J05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J05.Hide_GPP_J05 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_J05', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_J05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J05.Hide_GPP_J05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_J05', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_J05', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J05.Hide_GPP_J05 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_J05', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_J05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J05.Hide_GPP_J05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_J05', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_J05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_J05', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_J05', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_J05', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_J05', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_J05', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_J05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J05.Hide_GPP_J05 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_J05', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_J05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_J05', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_J05', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_J05', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_J05', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J05.Hide_GPP_J05 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_J06', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_J06', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J06.Hide_GPP_J06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_J06', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_J06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J06.Hide_GPP_J06 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_J06', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_J06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J06.Hide_GPP_J06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_J06', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_J06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J06.Hide_GPP_J06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_J06', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_J06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J06.Hide_GPP_J06 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_J06', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_J06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J06.Hide_GPP_J06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_J06', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_J06', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J06.Hide_GPP_J06 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_J06', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_J06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J06.Hide_GPP_J06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_J06', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_J06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_J06', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_J06', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_J06', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_J06', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_J06', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_J06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J06.Hide_GPP_J06 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_J06', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_J06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_J06', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_J06', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_J06', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_J06', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J06.Hide_GPP_J06 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_J07', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_J07', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J07.Hide_GPP_J07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_J07', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_J07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J07.Hide_GPP_J07 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_J07', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_J07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J07.Hide_GPP_J07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_J07', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_J07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J07.Hide_GPP_J07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_J07', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_J07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J07.Hide_GPP_J07 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_J07', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_J07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J07.Hide_GPP_J07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_J07', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_J07', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J07.Hide_GPP_J07 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_J07', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_J07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J07.Hide_GPP_J07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_J07', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_J07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_J07', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_J07', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_J07', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_J07', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_J07', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_J07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J07.Hide_GPP_J07 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_J07', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_J07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_J07', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_J07', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_J07', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_J07', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J07.Hide_GPP_J07 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_J08', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_J08', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J08.Hide_GPP_J08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_J08', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_J08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J08.Hide_GPP_J08 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_J08', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_J08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J08.Hide_GPP_J08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_J08', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_J08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J08.Hide_GPP_J08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_J08', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_J08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J08.Hide_GPP_J08 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_J08', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_J08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J08.Hide_GPP_J08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_J08', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_J08', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J08.Hide_GPP_J08 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_J08', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_J08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J08.Hide_GPP_J08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_J08', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_J08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_J08', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_J08', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_J08', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_J08', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_J08', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_J08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J08.Hide_GPP_J08 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_J08', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_J08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_J08', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_J08', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_J08', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_J08', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J08.Hide_GPP_J08 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_J09', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_J09', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J09.Hide_GPP_J09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_J09', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_J09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J09.Hide_GPP_J09 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_J09', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_J09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J09.Hide_GPP_J09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_J09', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_J09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J09.Hide_GPP_J09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_J09', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_J09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J09.Hide_GPP_J09 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_J09', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_J09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J09.Hide_GPP_J09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_J09', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_J09', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J09.Hide_GPP_J09 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_J09', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_J09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J09.Hide_GPP_J09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_J09', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_J09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_J09', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_J09', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_J09', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_J09', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_J09', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_J09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J09.Hide_GPP_J09 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_J09', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_J09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_J09', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_J09', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_J09', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_J09', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J09.Hide_GPP_J09 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_J10', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_J10', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J10.Hide_GPP_J10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_J10', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_J10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J10.Hide_GPP_J10 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_J10', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_J10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J10.Hide_GPP_J10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_J10', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_J10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J10.Hide_GPP_J10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_J10', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_J10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J10.Hide_GPP_J10 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_J10', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_J10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J10.Hide_GPP_J10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_J10', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_J10', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J10.Hide_GPP_J10 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_J10', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_J10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J10.Hide_GPP_J10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_J10', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_J10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_J10', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_J10', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_J10', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_J10', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_J10', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_J10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J10.Hide_GPP_J10 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_J10', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_J10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_J10', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_J10', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_J10', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_J10', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J10.Hide_GPP_J10 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_J11', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_J11', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J11.Hide_GPP_J11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_J11', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_J11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J11.Hide_GPP_J11 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_J11', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_J11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J11.Hide_GPP_J11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_J11', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_J11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J11.Hide_GPP_J11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_J11', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_J11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J11.Hide_GPP_J11 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_J11', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_J11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J11.Hide_GPP_J11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_J11', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_J11', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J11.Hide_GPP_J11 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_J11', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_J11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J11.Hide_GPP_J11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_J11', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_J11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_J11', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_J11', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_J11', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_J11', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_J11', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_J11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J11.Hide_GPP_J11 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_J11', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_J11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_J11', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_J11', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_J11', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_J11', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_J11.Hide_GPP_J11 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B00', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B00', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B00.Hide_GPP_B00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B00', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B00.Hide_GPP_B00 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B00', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B00.Hide_GPP_B00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B00', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B00.Hide_GPP_B00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B00', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B00.Hide_GPP_B00 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B00', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B00.Hide_GPP_B00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B00', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B00', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B00.Hide_GPP_B00 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B00', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B00.Hide_GPP_B00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B00', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B00', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B00', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B00', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B00', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B00', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B00.Hide_GPP_B00 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B00', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B00', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B00', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B00', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B00', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B00.Hide_GPP_B00 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B01', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B01', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B01.Hide_GPP_B01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B01', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B01.Hide_GPP_B01 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B01', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B01.Hide_GPP_B01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B01', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B01.Hide_GPP_B01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B01', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B01.Hide_GPP_B01 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B01', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B01.Hide_GPP_B01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B01', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B01', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B01.Hide_GPP_B01 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B01', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B01.Hide_GPP_B01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B01', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B01', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B01', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B01', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B01', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B01', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B01.Hide_GPP_B01 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B01', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B01', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B01', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B01', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B01', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B01.Hide_GPP_B01 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B02', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B02', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B02.Hide_GPP_B02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B02', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B02.Hide_GPP_B02 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B02', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B02.Hide_GPP_B02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B02', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B02.Hide_GPP_B02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B02', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B02.Hide_GPP_B02 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B02', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B02.Hide_GPP_B02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B02', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B02', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B02.Hide_GPP_B02 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B02', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B02.Hide_GPP_B02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B02', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B02', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B02', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B02', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B02', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B02', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B02.Hide_GPP_B02 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B02', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B02', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B02', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B02', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B02', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B02.Hide_GPP_B02 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B03', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B03', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B03.Hide_GPP_B03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B03', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B03.Hide_GPP_B03 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B03', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B03.Hide_GPP_B03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B03', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B03.Hide_GPP_B03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B03', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B03.Hide_GPP_B03 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B03', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B03.Hide_GPP_B03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B03', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B03', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B03.Hide_GPP_B03 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B03', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B03.Hide_GPP_B03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B03', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B03', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B03', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B03', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B03', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B03', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B03.Hide_GPP_B03 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B03', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B03', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B03', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B03', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B03', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B03.Hide_GPP_B03 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B04', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B04', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B04.Hide_GPP_B04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B04', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B04.Hide_GPP_B04 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B04', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B04.Hide_GPP_B04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B04', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B04.Hide_GPP_B04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B04', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B04.Hide_GPP_B04 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B04', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B04.Hide_GPP_B04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B04', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B04', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B04.Hide_GPP_B04 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B04', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B04.Hide_GPP_B04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B04', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B04', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B04', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B04', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B04', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B04', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B04.Hide_GPP_B04 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B04', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B04', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B04', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B04', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B04', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B04.Hide_GPP_B04 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B05', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B05', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B05.Hide_GPP_B05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B05', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B05.Hide_GPP_B05 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B05', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B05.Hide_GPP_B05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B05', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B05.Hide_GPP_B05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B05', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B05.Hide_GPP_B05 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B05', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B05.Hide_GPP_B05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B05', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B05', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B05.Hide_GPP_B05 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B05', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B05.Hide_GPP_B05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B05', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B05', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B05', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B05', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B05', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B05', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B05.Hide_GPP_B05 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B05', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B05', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B05', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B05', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B05', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B05.Hide_GPP_B05 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B06', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B06', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B06.Hide_GPP_B06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B06', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B06.Hide_GPP_B06 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B06', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B06.Hide_GPP_B06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B06', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B06.Hide_GPP_B06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B06', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B06.Hide_GPP_B06 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B06', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B06.Hide_GPP_B06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B06', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B06', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B06.Hide_GPP_B06 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B06', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B06.Hide_GPP_B06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B06', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B06', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B06', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B06', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B06', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B06', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B06.Hide_GPP_B06 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B06', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B06', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B06', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B06', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B06', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B06.Hide_GPP_B06 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B07', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B07', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B07.Hide_GPP_B07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B07', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B07.Hide_GPP_B07 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B07', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B07.Hide_GPP_B07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B07', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B07.Hide_GPP_B07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B07', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B07.Hide_GPP_B07 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B07', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B07.Hide_GPP_B07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B07', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B07', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B07.Hide_GPP_B07 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B07', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B07.Hide_GPP_B07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B07', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B07', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B07', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B07', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B07', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B07', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B07.Hide_GPP_B07 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B07', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B07', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B07', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B07', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B07', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B07.Hide_GPP_B07 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B08', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B08', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B08.Hide_GPP_B08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B08', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B08.Hide_GPP_B08 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B08', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B08.Hide_GPP_B08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B08', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B08.Hide_GPP_B08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B08', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B08.Hide_GPP_B08 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B08', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B08.Hide_GPP_B08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B08', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B08', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B08.Hide_GPP_B08 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B08', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B08.Hide_GPP_B08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B08', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B08', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B08', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B08', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B08', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B08', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B08.Hide_GPP_B08 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B08', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B08', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B08', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B08', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B08', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B08.Hide_GPP_B08 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B09', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B09', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B09.Hide_GPP_B09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B09', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B09.Hide_GPP_B09 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B09', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B09.Hide_GPP_B09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B09', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B09.Hide_GPP_B09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B09', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B09.Hide_GPP_B09 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B09', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B09.Hide_GPP_B09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B09', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B09', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B09.Hide_GPP_B09 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B09', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B09.Hide_GPP_B09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B09', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B09', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B09', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B09', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B09', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B09', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B09.Hide_GPP_B09 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B09', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B09', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B09', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B09', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B09', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B09.Hide_GPP_B09 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B10', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B10', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B10.Hide_GPP_B10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B10', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B10.Hide_GPP_B10 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B10', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B10.Hide_GPP_B10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B10', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B10.Hide_GPP_B10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B10', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B10.Hide_GPP_B10 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B10', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B10.Hide_GPP_B10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B10', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B10', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B10.Hide_GPP_B10 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B10', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B10.Hide_GPP_B10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B10', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B10', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B10', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B10', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B10', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B10', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B10.Hide_GPP_B10 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B10', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B10', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B10', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B10', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B10', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B10.Hide_GPP_B10 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B11', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B11', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B11.Hide_GPP_B11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B11', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B11.Hide_GPP_B11 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B11', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B11.Hide_GPP_B11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B11', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B11.Hide_GPP_B11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B11', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B11.Hide_GPP_B11 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B11', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B11.Hide_GPP_B11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B11', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B11', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B11.Hide_GPP_B11 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B11', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B11.Hide_GPP_B11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B11', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B11', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B11', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B11', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B11', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B11', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B11.Hide_GPP_B11 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B11', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B11', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B11', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B11', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B11', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B11.Hide_GPP_B11 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B12', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B12', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B12.Hide_GPP_B12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B12', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B12.Hide_GPP_B12 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B12', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B12.Hide_GPP_B12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B12', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B12.Hide_GPP_B12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B12', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B12.Hide_GPP_B12 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B12', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B12.Hide_GPP_B12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B12', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B12', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B12.Hide_GPP_B12 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B12', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B12.Hide_GPP_B12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B12', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B12', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B12', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B12', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B12', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B12', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B12.Hide_GPP_B12 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B12', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B12', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B12', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B12', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B12', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B12.Hide_GPP_B12 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B13', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B13', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B13.Hide_GPP_B13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B13', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B13.Hide_GPP_B13 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B13', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B13.Hide_GPP_B13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B13', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B13.Hide_GPP_B13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B13', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B13.Hide_GPP_B13 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B13', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B13.Hide_GPP_B13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B13', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B13', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B13.Hide_GPP_B13 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B13', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B13.Hide_GPP_B13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B13', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B13', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B13', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B13', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B13', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B13', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B13.Hide_GPP_B13 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B13', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B13', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B13', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B13', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B13', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B13.Hide_GPP_B13 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B14', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B14', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B14.Hide_GPP_B14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B14', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B14.Hide_GPP_B14 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B14', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B14.Hide_GPP_B14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B14', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B14.Hide_GPP_B14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B14', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B14.Hide_GPP_B14 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B14', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B14.Hide_GPP_B14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B14', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B14', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B14.Hide_GPP_B14 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B14', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B14.Hide_GPP_B14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B14', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B14', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B14', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B14', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B14', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B14', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B14.Hide_GPP_B14 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B14', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B14', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B14', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B14', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B14', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B14.Hide_GPP_B14 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B15', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B15', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B15.Hide_GPP_B15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B15', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B15.Hide_GPP_B15 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B15', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B15.Hide_GPP_B15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B15', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B15.Hide_GPP_B15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B15', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B15.Hide_GPP_B15 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B15', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B15.Hide_GPP_B15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B15', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B15', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B15.Hide_GPP_B15 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B15', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B15.Hide_GPP_B15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B15', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B15', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B15', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B15', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B15', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B15', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B15.Hide_GPP_B15 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B15', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B15', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B15', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B15', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B15', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B15.Hide_GPP_B15 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B16', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B16', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B16.Hide_GPP_B16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B16', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B16.Hide_GPP_B16 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B16', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B16.Hide_GPP_B16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B16', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B16.Hide_GPP_B16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B16', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B16.Hide_GPP_B16 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B16', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B16.Hide_GPP_B16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B16', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B16', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B16.Hide_GPP_B16 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B16', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B16.Hide_GPP_B16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B16', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B16', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B16', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B16', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B16', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B16', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B16.Hide_GPP_B16 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B16', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B16', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B16', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B16', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B16', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B16.Hide_GPP_B16 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B17', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B17', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B17.Hide_GPP_B17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B17', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B17.Hide_GPP_B17 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B17', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B17.Hide_GPP_B17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B17', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B17.Hide_GPP_B17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B17', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B17.Hide_GPP_B17 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B17', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B17.Hide_GPP_B17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B17', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B17', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B17.Hide_GPP_B17 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B17', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B17.Hide_GPP_B17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B17', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B17', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B17', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B17', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B17', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B17', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B17.Hide_GPP_B17 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B17', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B17', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B17', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B17', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B17', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B17.Hide_GPP_B17 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B18', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B18', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B18.Hide_GPP_B18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B18', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B18.Hide_GPP_B18 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B18', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B18.Hide_GPP_B18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B18', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B18.Hide_GPP_B18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B18', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B18.Hide_GPP_B18 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B18', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B18.Hide_GPP_B18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B18', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B18', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B18.Hide_GPP_B18 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B18', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B18.Hide_GPP_B18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B18', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B18', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B18', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B18', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B18', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B18', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B18.Hide_GPP_B18 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B18', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B18', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B18', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B18', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B18', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B18.Hide_GPP_B18 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B19', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B19', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B19.Hide_GPP_B19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B19', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B19.Hide_GPP_B19 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B19', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B19.Hide_GPP_B19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B19', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B19.Hide_GPP_B19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B19', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B19.Hide_GPP_B19 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B19', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B19.Hide_GPP_B19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B19', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B19', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B19.Hide_GPP_B19 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B19', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B19.Hide_GPP_B19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B19', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B19', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B19', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B19', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B19', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B19', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B19.Hide_GPP_B19 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B19', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B19', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B19', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B19', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B19', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B19.Hide_GPP_B19 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B20', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B20', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B20.Hide_GPP_B20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B20', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B20.Hide_GPP_B20 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B20', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B20.Hide_GPP_B20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B20', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B20.Hide_GPP_B20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B20', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B20.Hide_GPP_B20 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B20', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B20.Hide_GPP_B20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B20', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B20', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B20.Hide_GPP_B20 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B20', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B20.Hide_GPP_B20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B20', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B20', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B20', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B20', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B20', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B20', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B20.Hide_GPP_B20 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B20', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B20', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B20', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B20', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B20', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B20.Hide_GPP_B20 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B21', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B21', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B21.Hide_GPP_B21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B21', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B21.Hide_GPP_B21 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B21', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B21.Hide_GPP_B21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B21', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B21.Hide_GPP_B21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B21', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B21.Hide_GPP_B21 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B21', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B21.Hide_GPP_B21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B21', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B21', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B21.Hide_GPP_B21 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B21', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B21.Hide_GPP_B21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B21', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B21', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B21', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B21', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B21', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B21', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B21.Hide_GPP_B21 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B21', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B21', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B21', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B21', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B21', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B21.Hide_GPP_B21 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B22', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B22', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B22.Hide_GPP_B22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B22', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B22.Hide_GPP_B22 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B22', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B22.Hide_GPP_B22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B22', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B22.Hide_GPP_B22 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B22', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B22.Hide_GPP_B22 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B22', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B22.Hide_GPP_B22 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B22', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B22', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B22.Hide_GPP_B22 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B22', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B22.Hide_GPP_B22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B22', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B22', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B22', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B22', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B22', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B22', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B22', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B22.Hide_GPP_B22 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B22', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B22', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B22', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B22', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B22', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B22', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B22.Hide_GPP_B22 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_B23', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_B23', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B23.Hide_GPP_B23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_B23', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_B23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B23.Hide_GPP_B23 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_B23', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_B23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B23.Hide_GPP_B23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_B23', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_B23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B23.Hide_GPP_B23 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_B23', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_B23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B23.Hide_GPP_B23 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_B23', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_B23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B23.Hide_GPP_B23 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_B23', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_B23', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B23.Hide_GPP_B23 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_B23', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_B23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B23.Hide_GPP_B23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_B23', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_B23', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_B23', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_B23', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_B23', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_B23', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_B23', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_B23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B23.Hide_GPP_B23 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_B23', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_B23', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_B23', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_B23', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_B23', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_B23', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_B23.Hide_GPP_B23 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_G00', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_G00', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_G00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G00.Hide_GPP_G00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_G00', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_G00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G00.Hide_GPP_G00 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_G00', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_G00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G00.Hide_GPP_G00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_G00', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_G00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G00.Hide_GPP_G00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_G00', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_G00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G00.Hide_GPP_G00 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_G00', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_G00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G00.Hide_GPP_G00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_G00', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_G00', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_G00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G00.Hide_GPP_G00 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_G00', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_G00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G00.Hide_GPP_G00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_G00', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_G00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_G00', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_G00', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_G00', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_G00', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_G00', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_G00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G00.Hide_GPP_G00 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_G00', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_G00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_G00', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_G00', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_G00', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_G00', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G00.Hide_GPP_G00 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_G01', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_G01', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_G01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G01.Hide_GPP_G01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_G01', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_G01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G01.Hide_GPP_G01 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_G01', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_G01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G01.Hide_GPP_G01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_G01', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_G01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G01.Hide_GPP_G01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_G01', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_G01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G01.Hide_GPP_G01 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_G01', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_G01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G01.Hide_GPP_G01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_G01', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_G01', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_G01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G01.Hide_GPP_G01 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_G01', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_G01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G01.Hide_GPP_G01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_G01', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_G01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_G01', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_G01', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_G01', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_G01', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_G01', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_G01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G01.Hide_GPP_G01 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_G01', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_G01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_G01', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_G01', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_G01', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_G01', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G01.Hide_GPP_G01 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_G02', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_G02', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_G02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G02.Hide_GPP_G02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_G02', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_G02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G02.Hide_GPP_G02 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_G02', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_G02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G02.Hide_GPP_G02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_G02', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_G02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G02.Hide_GPP_G02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_G02', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_G02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G02.Hide_GPP_G02 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_G02', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_G02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G02.Hide_GPP_G02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_G02', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_G02', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_G02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G02.Hide_GPP_G02 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_G02', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_G02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G02.Hide_GPP_G02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_G02', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_G02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_G02', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_G02', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_G02', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_G02', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_G02', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_G02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G02.Hide_GPP_G02 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_G02', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_G02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_G02', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_G02', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_G02', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_G02', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G02.Hide_GPP_G02 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_G03', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_G03', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_G03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G03.Hide_GPP_G03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_G03', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_G03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G03.Hide_GPP_G03 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_G03', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_G03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G03.Hide_GPP_G03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_G03', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_G03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G03.Hide_GPP_G03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_G03', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_G03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G03.Hide_GPP_G03 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_G03', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_G03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G03.Hide_GPP_G03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_G03', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_G03', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_G03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G03.Hide_GPP_G03 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_G03', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_G03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G03.Hide_GPP_G03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_G03', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_G03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_G03', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_G03', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_G03', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_G03', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_G03', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_G03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G03.Hide_GPP_G03 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_G03', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_G03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_G03', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_G03', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_G03', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_G03', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G03.Hide_GPP_G03 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_G04', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_G04', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_G04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G04.Hide_GPP_G04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_G04', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_G04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G04.Hide_GPP_G04 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_G04', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_G04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G04.Hide_GPP_G04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_G04', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_G04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G04.Hide_GPP_G04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_G04', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_G04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G04.Hide_GPP_G04 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_G04', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_G04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G04.Hide_GPP_G04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_G04', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_G04', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_G04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G04.Hide_GPP_G04 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_G04', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_G04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G04.Hide_GPP_G04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_G04', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_G04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_G04', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_G04', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_G04', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_G04', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_G04', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_G04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G04.Hide_GPP_G04 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_G04', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_G04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_G04', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_G04', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_G04', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_G04', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G04.Hide_GPP_G04 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_G05', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_G05', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_G05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G05.Hide_GPP_G05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_G05', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_G05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G05.Hide_GPP_G05 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_G05', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_G05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G05.Hide_GPP_G05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_G05', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_G05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G05.Hide_GPP_G05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_G05', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_G05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G05.Hide_GPP_G05 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_G05', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_G05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G05.Hide_GPP_G05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_G05', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_G05', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_G05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G05.Hide_GPP_G05 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_G05', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_G05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G05.Hide_GPP_G05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_G05', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_G05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_G05', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_G05', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_G05', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_G05', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_G05', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_G05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G05.Hide_GPP_G05 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_G05', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_G05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_G05', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_G05', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_G05', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_G05', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G05.Hide_GPP_G05 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_G06', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_G06', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_G06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G06.Hide_GPP_G06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_G06', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_G06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G06.Hide_GPP_G06 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_G06', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_G06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G06.Hide_GPP_G06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_G06', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_G06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G06.Hide_GPP_G06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_G06', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_G06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G06.Hide_GPP_G06 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_G06', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_G06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G06.Hide_GPP_G06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_G06', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_G06', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_G06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G06.Hide_GPP_G06 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_G06', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_G06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G06.Hide_GPP_G06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_G06', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_G06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_G06', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_G06', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_G06', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_G06', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_G06', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_G06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G06.Hide_GPP_G06 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_G06', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_G06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_G06', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_G06', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_G06', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_G06', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G06.Hide_GPP_G06 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_G07', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_G07', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_G07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G07.Hide_GPP_G07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_G07', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_G07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G07.Hide_GPP_G07 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_G07', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_G07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G07.Hide_GPP_G07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_G07', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_G07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G07.Hide_GPP_G07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_G07', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_G07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G07.Hide_GPP_G07 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_G07', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_G07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G07.Hide_GPP_G07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_G07', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_G07', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_G07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G07.Hide_GPP_G07 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_G07', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_G07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G07.Hide_GPP_G07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_G07', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_G07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_G07', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_G07', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_G07', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_G07', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_G07', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_G07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G07.Hide_GPP_G07 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_G07', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_G07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_G07', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_G07', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_G07', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_G07', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_G07.Hide_GPP_G07 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H00', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H00', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H00.Hide_GPP_H00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H00', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H00.Hide_GPP_H00 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H00', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H00.Hide_GPP_H00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H00', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H00.Hide_GPP_H00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H00', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H00.Hide_GPP_H00 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H00', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H00.Hide_GPP_H00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H00', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H00', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H00.Hide_GPP_H00 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H00', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H00.Hide_GPP_H00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H00', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H00', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H00', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H00', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H00', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H00', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H00.Hide_GPP_H00 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H00', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H00', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H00', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H00', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H00', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H00.Hide_GPP_H00 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H01', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H01', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H01.Hide_GPP_H01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H01', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H01.Hide_GPP_H01 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H01', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H01.Hide_GPP_H01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H01', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H01.Hide_GPP_H01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H01', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H01.Hide_GPP_H01 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H01', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H01.Hide_GPP_H01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H01', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H01', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H01.Hide_GPP_H01 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H01', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H01.Hide_GPP_H01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H01', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H01', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H01', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H01', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H01', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H01', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H01.Hide_GPP_H01 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H01', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H01', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H01', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H01', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H01', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H01.Hide_GPP_H01 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H02', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H02', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H02.Hide_GPP_H02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H02', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H02.Hide_GPP_H02 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H02', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H02.Hide_GPP_H02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H02', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H02.Hide_GPP_H02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H02', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H02.Hide_GPP_H02 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H02', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H02.Hide_GPP_H02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H02', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H02', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H02.Hide_GPP_H02 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H02', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H02.Hide_GPP_H02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H02', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H02', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H02', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H02', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H02', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H02', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H02.Hide_GPP_H02 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H02', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H02', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H02', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H02', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H02', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H02.Hide_GPP_H02 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H03', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H03', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H03.Hide_GPP_H03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H03', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H03.Hide_GPP_H03 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H03', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H03.Hide_GPP_H03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H03', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H03.Hide_GPP_H03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H03', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H03.Hide_GPP_H03 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H03', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H03.Hide_GPP_H03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H03', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H03', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H03.Hide_GPP_H03 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H03', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H03.Hide_GPP_H03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H03', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H03', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H03', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H03', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H03', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H03', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H03.Hide_GPP_H03 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H03', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H03', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H03', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H03', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H03', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H03.Hide_GPP_H03 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H04', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H04', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H04.Hide_GPP_H04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H04', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H04.Hide_GPP_H04 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H04', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H04.Hide_GPP_H04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H04', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H04.Hide_GPP_H04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H04', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H04.Hide_GPP_H04 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H04', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H04.Hide_GPP_H04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H04', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H04', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H04.Hide_GPP_H04 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H04', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H04.Hide_GPP_H04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H04', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H04', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H04', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H04', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H04', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H04', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H04.Hide_GPP_H04 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H04', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H04', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H04', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H04', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H04', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H04.Hide_GPP_H04 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H05', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H05', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H05.Hide_GPP_H05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H05', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H05.Hide_GPP_H05 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H05', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H05.Hide_GPP_H05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H05', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H05.Hide_GPP_H05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H05', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H05.Hide_GPP_H05 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H05', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H05.Hide_GPP_H05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H05', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H05', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H05.Hide_GPP_H05 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H05', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H05.Hide_GPP_H05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H05', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H05', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H05', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H05', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H05', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H05', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H05.Hide_GPP_H05 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H05', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H05', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H05', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H05', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H05', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H05.Hide_GPP_H05 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H06', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H06', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H06.Hide_GPP_H06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H06', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H06.Hide_GPP_H06 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H06', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H06.Hide_GPP_H06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H06', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H06.Hide_GPP_H06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H06', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H06.Hide_GPP_H06 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H06', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H06.Hide_GPP_H06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H06', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H06', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H06.Hide_GPP_H06 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H06', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H06.Hide_GPP_H06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H06', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H06', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H06', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H06', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H06', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H06', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H06.Hide_GPP_H06 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H06', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H06', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H06', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H06', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H06', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H06.Hide_GPP_H06 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H07', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H07', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H07.Hide_GPP_H07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H07', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H07.Hide_GPP_H07 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H07', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H07.Hide_GPP_H07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H07', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H07.Hide_GPP_H07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H07', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H07.Hide_GPP_H07 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H07', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H07.Hide_GPP_H07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H07', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H07', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H07.Hide_GPP_H07 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H07', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H07.Hide_GPP_H07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H07', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H07', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H07', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H07', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H07', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H07', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H07.Hide_GPP_H07 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H07', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H07', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H07', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H07', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H07', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H07.Hide_GPP_H07 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H08', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H08', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H08.Hide_GPP_H08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H08', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H08.Hide_GPP_H08 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H08', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H08.Hide_GPP_H08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H08', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H08.Hide_GPP_H08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H08', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H08.Hide_GPP_H08 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H08', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H08.Hide_GPP_H08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H08', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H08', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H08.Hide_GPP_H08 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H08', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H08.Hide_GPP_H08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H08', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H08', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H08', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H08', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H08', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H08', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H08.Hide_GPP_H08 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H08', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H08', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H08', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H08', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H08', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H08.Hide_GPP_H08 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H09', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H09', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H09.Hide_GPP_H09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H09', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H09.Hide_GPP_H09 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H09', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H09.Hide_GPP_H09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H09', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H09.Hide_GPP_H09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H09', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H09.Hide_GPP_H09 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H09', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H09.Hide_GPP_H09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H09', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H09', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H09.Hide_GPP_H09 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H09', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H09.Hide_GPP_H09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H09', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H09', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H09', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H09', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H09', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H09', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H09.Hide_GPP_H09 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H09', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H09', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H09', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H09', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H09', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H09.Hide_GPP_H09 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H10', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H10', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H10.Hide_GPP_H10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H10', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H10.Hide_GPP_H10 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H10', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H10.Hide_GPP_H10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H10', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H10.Hide_GPP_H10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H10', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H10.Hide_GPP_H10 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H10', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H10.Hide_GPP_H10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H10', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H10', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H10.Hide_GPP_H10 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H10', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H10.Hide_GPP_H10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H10', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H10', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H10', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H10', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H10', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H10', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H10.Hide_GPP_H10 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H10', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H10', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H10', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H10', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H10', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H10.Hide_GPP_H10 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H11', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H11', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H11.Hide_GPP_H11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H11', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H11.Hide_GPP_H11 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H11', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H11.Hide_GPP_H11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H11', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H11.Hide_GPP_H11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H11', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H11.Hide_GPP_H11 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H11', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H11.Hide_GPP_H11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H11', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H11', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H11.Hide_GPP_H11 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H11', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H11.Hide_GPP_H11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H11', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H11', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H11', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H11', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H11', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H11', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H11.Hide_GPP_H11 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H11', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H11', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H11', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H11', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H11', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H11.Hide_GPP_H11 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H12', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H12', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H12.Hide_GPP_H12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H12', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H12.Hide_GPP_H12 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H12', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H12.Hide_GPP_H12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H12', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H12.Hide_GPP_H12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H12', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H12.Hide_GPP_H12 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H12', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H12.Hide_GPP_H12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H12', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H12', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H12.Hide_GPP_H12 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H12', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H12.Hide_GPP_H12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H12', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H12', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H12', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H12', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H12', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H12', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H12.Hide_GPP_H12 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H12', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H12', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H12', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H12', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H12', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H12.Hide_GPP_H12 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H13', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H13', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H13.Hide_GPP_H13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H13', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H13.Hide_GPP_H13 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H13', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H13.Hide_GPP_H13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H13', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H13.Hide_GPP_H13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H13', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H13.Hide_GPP_H13 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H13', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H13.Hide_GPP_H13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H13', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H13', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H13.Hide_GPP_H13 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H13', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H13.Hide_GPP_H13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H13', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H13', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H13', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H13', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H13', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H13', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H13.Hide_GPP_H13 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H13', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H13', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H13', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H13', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H13', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H13.Hide_GPP_H13 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H14', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H14', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H14.Hide_GPP_H14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H14', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H14.Hide_GPP_H14 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H14', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H14.Hide_GPP_H14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H14', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H14.Hide_GPP_H14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H14', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H14.Hide_GPP_H14 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H14', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H14.Hide_GPP_H14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H14', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H14', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H14.Hide_GPP_H14 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H14', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H14.Hide_GPP_H14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H14', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H14', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H14', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H14', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H14', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H14', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H14.Hide_GPP_H14 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H14', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H14', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H14', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H14', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H14', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H14.Hide_GPP_H14 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H15', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H15', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H15.Hide_GPP_H15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H15', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H15.Hide_GPP_H15 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H15', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H15.Hide_GPP_H15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H15', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H15.Hide_GPP_H15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H15', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H15.Hide_GPP_H15 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H15', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H15.Hide_GPP_H15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H15', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H15', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H15.Hide_GPP_H15 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H15', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H15.Hide_GPP_H15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H15', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H15', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H15', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H15', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H15', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H15', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H15.Hide_GPP_H15 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H15', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H15', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H15', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H15', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H15', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H15.Hide_GPP_H15 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H16', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H16', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H16.Hide_GPP_H16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H16', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H16.Hide_GPP_H16 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H16', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H16.Hide_GPP_H16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H16', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H16.Hide_GPP_H16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H16', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H16.Hide_GPP_H16 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H16', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H16.Hide_GPP_H16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H16', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H16', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H16.Hide_GPP_H16 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H16', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H16.Hide_GPP_H16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H16', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H16', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H16', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H16', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H16', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H16', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H16.Hide_GPP_H16 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H16', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H16', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H16', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H16', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H16', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H16.Hide_GPP_H16 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H17', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H17', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H17.Hide_GPP_H17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H17', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H17.Hide_GPP_H17 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H17', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H17.Hide_GPP_H17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H17', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H17.Hide_GPP_H17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H17', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H17.Hide_GPP_H17 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H17', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H17.Hide_GPP_H17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H17', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H17', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H17.Hide_GPP_H17 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H17', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H17.Hide_GPP_H17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H17', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H17', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H17', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H17', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H17', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H17', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H17.Hide_GPP_H17 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H17', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H17', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H17', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H17', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H17', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H17.Hide_GPP_H17 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H18', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H18', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H18.Hide_GPP_H18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H18', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H18.Hide_GPP_H18 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H18', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H18.Hide_GPP_H18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H18', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H18.Hide_GPP_H18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H18', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H18.Hide_GPP_H18 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H18', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H18.Hide_GPP_H18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H18', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H18', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H18.Hide_GPP_H18 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H18', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H18.Hide_GPP_H18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H18', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H18', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H18', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H18', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H18', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H18', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H18.Hide_GPP_H18 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H18', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H18', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H18', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H18', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H18', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H18.Hide_GPP_H18 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H19', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H19', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H19.Hide_GPP_H19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H19', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H19.Hide_GPP_H19 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H19', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H19.Hide_GPP_H19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H19', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H19.Hide_GPP_H19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H19', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H19.Hide_GPP_H19 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H19', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H19.Hide_GPP_H19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H19', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H19', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H19.Hide_GPP_H19 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H19', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H19.Hide_GPP_H19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H19', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H19', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H19', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H19', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H19', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H19', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H19.Hide_GPP_H19 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H19', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H19', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H19', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H19', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H19', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H19.Hide_GPP_H19 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H20', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H20', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H20.Hide_GPP_H20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H20', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H20.Hide_GPP_H20 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H20', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H20.Hide_GPP_H20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H20', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H20.Hide_GPP_H20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H20', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H20.Hide_GPP_H20 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H20', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H20.Hide_GPP_H20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H20', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H20', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H20.Hide_GPP_H20 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H20', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H20.Hide_GPP_H20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H20', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H20', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H20', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H20', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H20', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H20', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H20.Hide_GPP_H20 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H20', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H20', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H20', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H20', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H20', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H20.Hide_GPP_H20 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H21', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H21', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H21.Hide_GPP_H21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H21', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H21.Hide_GPP_H21 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H21', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H21.Hide_GPP_H21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H21', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H21.Hide_GPP_H21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H21', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H21.Hide_GPP_H21 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H21', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H21.Hide_GPP_H21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H21', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H21', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H21.Hide_GPP_H21 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H21', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H21.Hide_GPP_H21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H21', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H21', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H21', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H21', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H21', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H21', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H21.Hide_GPP_H21 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H21', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H21', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H21', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H21', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H21', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H21.Hide_GPP_H21 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H22', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H22', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H22.Hide_GPP_H22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H22', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H22.Hide_GPP_H22 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H22', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H22.Hide_GPP_H22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H22', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H22.Hide_GPP_H22 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H22', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H22.Hide_GPP_H22 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H22', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H22.Hide_GPP_H22 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H22', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H22', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H22.Hide_GPP_H22 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H22', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H22.Hide_GPP_H22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H22', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H22', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H22', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H22', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H22', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H22', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H22', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H22.Hide_GPP_H22 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H22', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H22', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H22', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H22', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H22', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H22', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H22.Hide_GPP_H22 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_H23', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_H23', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H23.Hide_GPP_H23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_H23', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_H23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H23.Hide_GPP_H23 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_H23', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_H23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H23.Hide_GPP_H23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_H23', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_H23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H23.Hide_GPP_H23 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_H23', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_H23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H23.Hide_GPP_H23 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_H23', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_H23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H23.Hide_GPP_H23 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_H23', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_H23', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H23.Hide_GPP_H23 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_H23', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_H23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H23.Hide_GPP_H23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_H23', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_H23', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_H23', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_H23', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_H23', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_H23', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_H23', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_H23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H23.Hide_GPP_H23 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_H23', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_H23', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_H23', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_H23', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_H23', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_H23', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_H23.Hide_GPP_H23 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPD00', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPD00', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPD00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD00.Hide_GPD00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPD00', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPD00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD00.Hide_GPD00 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPD00', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPD00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD00.Hide_GPD00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPD00', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPD00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD00.Hide_GPD00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPD00', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPD00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD00.Hide_GPD00 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPD00', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPD00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD00.Hide_GPD00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPD00', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPD00', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPD00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD00.Hide_GPD00 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPD00', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPD00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD00.Hide_GPD00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPD00', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPD00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPD00', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPD00', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPD00', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPD00', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPD00', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPD00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD00.Hide_GPD00 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPD00', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPD00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPD00', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPD00', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPD00', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPD00', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD00.Hide_GPD00 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPD01', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPD01', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPD01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD01.Hide_GPD01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPD01', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPD01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD01.Hide_GPD01 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPD01', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPD01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD01.Hide_GPD01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPD01', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPD01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD01.Hide_GPD01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPD01', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPD01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD01.Hide_GPD01 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPD01', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPD01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD01.Hide_GPD01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPD01', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPD01', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPD01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD01.Hide_GPD01 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPD01', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPD01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD01.Hide_GPD01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPD01', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPD01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPD01', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPD01', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPD01', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPD01', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPD01', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPD01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD01.Hide_GPD01 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPD01', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPD01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPD01', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPD01', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPD01', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPD01', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD01.Hide_GPD01 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPD02', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPD02', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPD02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD02.Hide_GPD02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPD02', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPD02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD02.Hide_GPD02 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPD02', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPD02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD02.Hide_GPD02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPD02', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPD02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD02.Hide_GPD02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPD02', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPD02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD02.Hide_GPD02 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPD02', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPD02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD02.Hide_GPD02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPD02', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPD02', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPD02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD02.Hide_GPD02 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPD02', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPD02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD02.Hide_GPD02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPD02', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPD02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPD02', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPD02', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPD02', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPD02', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPD02', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPD02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD02.Hide_GPD02 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPD02', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPD02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPD02', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPD02', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPD02', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPD02', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD02.Hide_GPD02 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPD03', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPD03', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPD03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD03.Hide_GPD03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPD03', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPD03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD03.Hide_GPD03 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPD03', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPD03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD03.Hide_GPD03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPD03', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPD03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD03.Hide_GPD03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPD03', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPD03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD03.Hide_GPD03 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPD03', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPD03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD03.Hide_GPD03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPD03', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPD03', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPD03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD03.Hide_GPD03 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPD03', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPD03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD03.Hide_GPD03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPD03', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPD03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPD03', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPD03', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPD03', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPD03', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPD03', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPD03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD03.Hide_GPD03 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPD03', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPD03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPD03', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPD03', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPD03', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPD03', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD03.Hide_GPD03 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPD04', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPD04', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPD04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD04.Hide_GPD04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPD04', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPD04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD04.Hide_GPD04 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPD04', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPD04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD04.Hide_GPD04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPD04', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPD04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD04.Hide_GPD04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPD04', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPD04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD04.Hide_GPD04 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPD04', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPD04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD04.Hide_GPD04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPD04', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPD04', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPD04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD04.Hide_GPD04 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPD04', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPD04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD04.Hide_GPD04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPD04', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPD04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPD04', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPD04', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPD04', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPD04', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPD04', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPD04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD04.Hide_GPD04 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPD04', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPD04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPD04', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPD04', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPD04', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPD04', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD04.Hide_GPD04 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPD05', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPD05', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPD05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD05.Hide_GPD05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPD05', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPD05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD05.Hide_GPD05 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPD05', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPD05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD05.Hide_GPD05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPD05', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPD05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD05.Hide_GPD05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPD05', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPD05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD05.Hide_GPD05 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPD05', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPD05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD05.Hide_GPD05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPD05', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPD05', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPD05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD05.Hide_GPD05 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPD05', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPD05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD05.Hide_GPD05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPD05', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPD05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPD05', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPD05', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPD05', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPD05', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPD05', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPD05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD05.Hide_GPD05 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPD05', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPD05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPD05', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPD05', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPD05', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPD05', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD05.Hide_GPD05 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPD06', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPD06', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPD06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD06.Hide_GPD06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPD06', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPD06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD06.Hide_GPD06 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPD06', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPD06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD06.Hide_GPD06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPD06', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPD06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD06.Hide_GPD06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPD06', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPD06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD06.Hide_GPD06 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPD06', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPD06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD06.Hide_GPD06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPD06', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPD06', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPD06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD06.Hide_GPD06 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPD06', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPD06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD06.Hide_GPD06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPD06', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPD06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPD06', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPD06', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPD06', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPD06', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPD06', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPD06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD06.Hide_GPD06 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPD06', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPD06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPD06', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPD06', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPD06', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPD06', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD06.Hide_GPD06 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPD07', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPD07', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPD07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD07.Hide_GPD07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPD07', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPD07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD07.Hide_GPD07 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPD07', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPD07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD07.Hide_GPD07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPD07', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPD07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD07.Hide_GPD07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPD07', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPD07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD07.Hide_GPD07 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPD07', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPD07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD07.Hide_GPD07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPD07', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPD07', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPD07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD07.Hide_GPD07 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPD07', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPD07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD07.Hide_GPD07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPD07', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPD07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPD07', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPD07', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPD07', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPD07', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPD07', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPD07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD07.Hide_GPD07 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPD07', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPD07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPD07', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPD07', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPD07', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPD07', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD07.Hide_GPD07 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPD08', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPD08', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPD08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD08.Hide_GPD08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPD08', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPD08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD08.Hide_GPD08 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPD08', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPD08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD08.Hide_GPD08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPD08', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPD08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD08.Hide_GPD08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPD08', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPD08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD08.Hide_GPD08 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPD08', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPD08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD08.Hide_GPD08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPD08', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPD08', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPD08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD08.Hide_GPD08 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPD08', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPD08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD08.Hide_GPD08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPD08', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPD08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPD08', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPD08', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPD08', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPD08', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPD08', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPD08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD08.Hide_GPD08 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPD08', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPD08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPD08', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPD08', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPD08', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPD08', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD08.Hide_GPD08 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPD09', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPD09', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPD09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD09.Hide_GPD09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPD09', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPD09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD09.Hide_GPD09 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPD09', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPD09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD09.Hide_GPD09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPD09', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPD09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD09.Hide_GPD09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPD09', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPD09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD09.Hide_GPD09 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPD09', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPD09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD09.Hide_GPD09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPD09', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPD09', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPD09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD09.Hide_GPD09 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPD09', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPD09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD09.Hide_GPD09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPD09', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPD09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPD09', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPD09', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPD09', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPD09', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPD09', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPD09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD09.Hide_GPD09 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPD09', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPD09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPD09', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPD09', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPD09', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPD09', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD09.Hide_GPD09 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPD10', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPD10', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPD10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD10.Hide_GPD10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPD10', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPD10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD10.Hide_GPD10 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPD10', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPD10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD10.Hide_GPD10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPD10', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPD10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD10.Hide_GPD10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPD10', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPD10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD10.Hide_GPD10 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPD10', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPD10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD10.Hide_GPD10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPD10', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPD10', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPD10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD10.Hide_GPD10 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPD10', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPD10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD10.Hide_GPD10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPD10', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPD10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPD10', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPD10', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPD10', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPD10', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPD10', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPD10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD10.Hide_GPD10 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPD10', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPD10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPD10', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPD10', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPD10', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPD10', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD10.Hide_GPD10 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPD11', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPD11', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPD11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD11.Hide_GPD11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPD11', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPD11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD11.Hide_GPD11 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPD11', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPD11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD11.Hide_GPD11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPD11', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPD11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD11.Hide_GPD11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPD11', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPD11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD11.Hide_GPD11 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPD11', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPD11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD11.Hide_GPD11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPD11', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPD11', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPD11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD11.Hide_GPD11 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPD11', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPD11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD11.Hide_GPD11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPD11', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPD11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPD11', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPD11', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPD11', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPD11', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPD11', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPD11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD11.Hide_GPD11 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPD11', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPD11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPD11', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPD11', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPD11', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPD11', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD11.Hide_GPD11 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPD12', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPD12', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPD12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD12.Hide_GPD12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPD12', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPD12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD12.Hide_GPD12 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPD12', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPD12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD12.Hide_GPD12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPD12', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPD12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD12.Hide_GPD12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPD12', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPD12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD12.Hide_GPD12 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPD12', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPD12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD12.Hide_GPD12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPD12', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPD12', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPD12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD12.Hide_GPD12 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPD12', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPD12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD12.Hide_GPD12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPD12', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPD12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPD12', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPD12', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPD12', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPD12', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPD12', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPD12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD12.Hide_GPD12 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPD12', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPD12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPD12', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPD12', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPD12', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPD12', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPD12.Hide_GPD12 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A00', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A00', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A00.Hide_GPP_A00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A00', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A00.Hide_GPP_A00 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A00', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A00.Hide_GPP_A00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A00', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A00.Hide_GPP_A00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A00', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A00.Hide_GPP_A00 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A00', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A00.Hide_GPP_A00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A00', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A00', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A00.Hide_GPP_A00 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A00', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A00.Hide_GPP_A00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A00', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A00', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A00', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A00', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A00', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A00', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A00.Hide_GPP_A00 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A00', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A00', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A00', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A00', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A00', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A00.Hide_GPP_A00 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A01', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A01', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A01.Hide_GPP_A01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A01', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A01.Hide_GPP_A01 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A01', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A01.Hide_GPP_A01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A01', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A01.Hide_GPP_A01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A01', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A01.Hide_GPP_A01 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A01', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A01.Hide_GPP_A01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A01', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A01', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A01.Hide_GPP_A01 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A01', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A01.Hide_GPP_A01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A01', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A01', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A01', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A01', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A01', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A01', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A01.Hide_GPP_A01 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A01', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A01', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A01', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A01', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A01', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A01.Hide_GPP_A01 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A02', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A02', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A02.Hide_GPP_A02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A02', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A02.Hide_GPP_A02 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A02', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A02.Hide_GPP_A02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A02', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A02.Hide_GPP_A02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A02', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A02.Hide_GPP_A02 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A02', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A02.Hide_GPP_A02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A02', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A02', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A02.Hide_GPP_A02 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A02', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A02.Hide_GPP_A02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A02', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A02', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A02', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A02', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A02', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A02', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A02.Hide_GPP_A02 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A02', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A02', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A02', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A02', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A02', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A02.Hide_GPP_A02 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A03', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A03', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A03.Hide_GPP_A03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A03', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A03.Hide_GPP_A03 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A03', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A03.Hide_GPP_A03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A03', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A03.Hide_GPP_A03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A03', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A03.Hide_GPP_A03 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A03', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A03.Hide_GPP_A03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A03', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A03', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A03.Hide_GPP_A03 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A03', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A03.Hide_GPP_A03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A03', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A03', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A03', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A03', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A03', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A03', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A03.Hide_GPP_A03 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A03', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A03', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A03', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A03', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A03', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A03.Hide_GPP_A03 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A04', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A04', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A04.Hide_GPP_A04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A04', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A04.Hide_GPP_A04 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A04', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A04.Hide_GPP_A04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A04', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A04.Hide_GPP_A04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A04', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A04.Hide_GPP_A04 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A04', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A04.Hide_GPP_A04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A04', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A04', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A04.Hide_GPP_A04 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A04', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A04.Hide_GPP_A04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A04', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A04', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A04', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A04', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A04', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A04', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A04.Hide_GPP_A04 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A04', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A04', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A04', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A04', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A04', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A04.Hide_GPP_A04 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A05', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A05', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A05.Hide_GPP_A05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A05', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A05.Hide_GPP_A05 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A05', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A05.Hide_GPP_A05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A05', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A05.Hide_GPP_A05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A05', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A05.Hide_GPP_A05 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A05', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A05.Hide_GPP_A05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A05', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A05', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A05.Hide_GPP_A05 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A05', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A05.Hide_GPP_A05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A05', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A05', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A05', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A05', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A05', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A05', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A05.Hide_GPP_A05 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A05', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A05', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A05', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A05', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A05', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A05.Hide_GPP_A05 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A06', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A06', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A06.Hide_GPP_A06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A06', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A06.Hide_GPP_A06 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A06', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A06.Hide_GPP_A06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A06', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A06.Hide_GPP_A06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A06', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A06.Hide_GPP_A06 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A06', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A06.Hide_GPP_A06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A06', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A06', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A06.Hide_GPP_A06 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A06', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A06.Hide_GPP_A06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A06', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A06', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A06', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A06', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A06', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A06', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A06.Hide_GPP_A06 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A06', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A06', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A06', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A06', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A06', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A06.Hide_GPP_A06 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A07', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A07', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A07.Hide_GPP_A07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A07', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A07.Hide_GPP_A07 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A07', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A07.Hide_GPP_A07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A07', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A07.Hide_GPP_A07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A07', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A07.Hide_GPP_A07 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A07', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A07.Hide_GPP_A07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A07', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A07', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A07.Hide_GPP_A07 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A07', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A07.Hide_GPP_A07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A07', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A07', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A07', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A07', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A07', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A07', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A07.Hide_GPP_A07 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A07', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A07', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A07', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A07', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A07', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A07.Hide_GPP_A07 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A08', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A08', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A08.Hide_GPP_A08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A08', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A08.Hide_GPP_A08 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A08', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A08.Hide_GPP_A08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A08', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A08.Hide_GPP_A08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A08', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A08.Hide_GPP_A08 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A08', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A08.Hide_GPP_A08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A08', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A08', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A08.Hide_GPP_A08 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A08', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A08.Hide_GPP_A08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A08', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A08', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A08', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A08', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A08', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A08', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A08.Hide_GPP_A08 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A08', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A08', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A08', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A08', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A08', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A08.Hide_GPP_A08 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A09', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A09', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A09.Hide_GPP_A09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A09', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A09.Hide_GPP_A09 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A09', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A09.Hide_GPP_A09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A09', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A09.Hide_GPP_A09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A09', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A09.Hide_GPP_A09 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A09', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A09.Hide_GPP_A09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A09', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A09', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A09.Hide_GPP_A09 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A09', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A09.Hide_GPP_A09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A09', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A09', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A09', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A09', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A09', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A09', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A09.Hide_GPP_A09 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A09', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A09', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A09', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A09', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A09', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A09.Hide_GPP_A09 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A10', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A10', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A10.Hide_GPP_A10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A10', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A10.Hide_GPP_A10 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A10', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A10.Hide_GPP_A10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A10', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A10.Hide_GPP_A10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A10', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A10.Hide_GPP_A10 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A10', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A10.Hide_GPP_A10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A10', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A10', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A10.Hide_GPP_A10 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A10', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A10.Hide_GPP_A10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A10', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A10', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A10', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A10', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A10', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A10', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A10.Hide_GPP_A10 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A10', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A10', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A10', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A10', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A10', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A10.Hide_GPP_A10 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A11', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A11', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A11.Hide_GPP_A11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A11', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A11.Hide_GPP_A11 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A11', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A11.Hide_GPP_A11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A11', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A11.Hide_GPP_A11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A11', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A11.Hide_GPP_A11 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A11', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A11.Hide_GPP_A11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A11', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A11', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A11.Hide_GPP_A11 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A11', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A11.Hide_GPP_A11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A11', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A11', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A11', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A11', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A11', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A11', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A11.Hide_GPP_A11 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A11', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A11', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A11', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A11', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A11', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A11.Hide_GPP_A11 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A12', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A12', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A12.Hide_GPP_A12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A12', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A12.Hide_GPP_A12 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A12', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A12.Hide_GPP_A12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A12', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A12.Hide_GPP_A12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A12', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A12.Hide_GPP_A12 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A12', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A12.Hide_GPP_A12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A12', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A12', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A12.Hide_GPP_A12 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A12', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A12.Hide_GPP_A12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A12', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A12', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A12', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A12', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A12', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A12', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A12.Hide_GPP_A12 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A12', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A12', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A12', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A12', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A12', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A12.Hide_GPP_A12 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A13', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A13', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A13.Hide_GPP_A13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A13', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A13.Hide_GPP_A13 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A13', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A13.Hide_GPP_A13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A13', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A13.Hide_GPP_A13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A13', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A13.Hide_GPP_A13 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A13', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A13.Hide_GPP_A13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A13', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A13', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A13.Hide_GPP_A13 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A13', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A13.Hide_GPP_A13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A13', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A13', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A13', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A13', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A13', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A13', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A13.Hide_GPP_A13 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A13', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A13', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A13', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A13', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A13', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A13.Hide_GPP_A13 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A14', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A14', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A14.Hide_GPP_A14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A14', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A14.Hide_GPP_A14 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A14', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A14.Hide_GPP_A14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A14', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A14.Hide_GPP_A14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A14', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A14.Hide_GPP_A14 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A14', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A14.Hide_GPP_A14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A14', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A14', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A14.Hide_GPP_A14 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A14', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A14.Hide_GPP_A14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A14', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A14', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A14', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A14', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A14', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A14', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A14.Hide_GPP_A14 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A14', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A14', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A14', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A14', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A14', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A14.Hide_GPP_A14 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A15', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A15', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A15.Hide_GPP_A15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A15', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A15.Hide_GPP_A15 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A15', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A15.Hide_GPP_A15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A15', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A15.Hide_GPP_A15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A15', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A15.Hide_GPP_A15 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A15', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A15.Hide_GPP_A15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A15', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A15', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A15.Hide_GPP_A15 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A15', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A15.Hide_GPP_A15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A15', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A15', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A15', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A15', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A15', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A15', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A15.Hide_GPP_A15 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A15', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A15', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A15', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A15', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A15', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A15.Hide_GPP_A15 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A16', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A16', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A16.Hide_GPP_A16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A16', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A16.Hide_GPP_A16 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A16', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A16.Hide_GPP_A16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A16', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A16.Hide_GPP_A16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A16', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A16.Hide_GPP_A16 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A16', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A16.Hide_GPP_A16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A16', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A16', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A16.Hide_GPP_A16 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A16', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A16.Hide_GPP_A16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A16', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A16', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A16', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A16', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A16', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A16', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A16.Hide_GPP_A16 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A16', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A16', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A16', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A16', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A16', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A16.Hide_GPP_A16 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A17', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A17', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A17.Hide_GPP_A17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A17', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A17.Hide_GPP_A17 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A17', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A17.Hide_GPP_A17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A17', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A17.Hide_GPP_A17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A17', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A17.Hide_GPP_A17 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A17', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A17.Hide_GPP_A17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A17', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A17', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A17.Hide_GPP_A17 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A17', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A17.Hide_GPP_A17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A17', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A17', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A17', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A17', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A17', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A17', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A17.Hide_GPP_A17 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A17', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A17', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A17', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A17', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A17', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A17.Hide_GPP_A17 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A18', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A18', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A18.Hide_GPP_A18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A18', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A18.Hide_GPP_A18 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A18', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A18.Hide_GPP_A18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A18', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A18.Hide_GPP_A18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A18', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A18.Hide_GPP_A18 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A18', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A18.Hide_GPP_A18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A18', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A18', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A18.Hide_GPP_A18 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A18', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A18.Hide_GPP_A18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A18', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A18', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A18', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A18', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A18', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A18', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A18.Hide_GPP_A18 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A18', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A18', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A18', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A18', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A18', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A18.Hide_GPP_A18 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A19', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A19', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A19.Hide_GPP_A19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A19', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A19.Hide_GPP_A19 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A19', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A19.Hide_GPP_A19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A19', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A19.Hide_GPP_A19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A19', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A19.Hide_GPP_A19 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A19', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A19.Hide_GPP_A19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A19', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A19', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A19.Hide_GPP_A19 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A19', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A19.Hide_GPP_A19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A19', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A19', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A19', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A19', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A19', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A19', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A19.Hide_GPP_A19 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A19', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A19', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A19', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A19', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A19', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A19.Hide_GPP_A19 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A20', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A20', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A20.Hide_GPP_A20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A20', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A20.Hide_GPP_A20 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A20', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A20.Hide_GPP_A20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A20', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A20.Hide_GPP_A20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A20', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A20.Hide_GPP_A20 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A20', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A20.Hide_GPP_A20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A20', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A20', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A20.Hide_GPP_A20 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A20', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A20.Hide_GPP_A20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A20', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A20', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A20', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A20', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A20', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A20', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A20.Hide_GPP_A20 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A20', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A20', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A20', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A20', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A20', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A20.Hide_GPP_A20 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A21', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A21', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A21.Hide_GPP_A21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A21', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A21.Hide_GPP_A21 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A21', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A21.Hide_GPP_A21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A21', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A21.Hide_GPP_A21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A21', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A21.Hide_GPP_A21 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A21', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A21.Hide_GPP_A21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A21', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A21', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A21.Hide_GPP_A21 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A21', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A21.Hide_GPP_A21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A21', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A21', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A21', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A21', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A21', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A21', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A21.Hide_GPP_A21 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A21', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A21', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A21', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A21', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A21', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A21.Hide_GPP_A21 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A22', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A22', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A22.Hide_GPP_A22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A22', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A22.Hide_GPP_A22 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A22', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A22.Hide_GPP_A22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A22', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A22.Hide_GPP_A22 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A22', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A22.Hide_GPP_A22 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A22', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A22.Hide_GPP_A22 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A22', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A22', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A22.Hide_GPP_A22 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A22', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A22.Hide_GPP_A22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A22', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A22', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A22', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A22', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A22', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A22', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A22', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A22.Hide_GPP_A22 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A22', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A22', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A22', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A22', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A22', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A22', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A22.Hide_GPP_A22 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_A23', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_A23', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A23.Hide_GPP_A23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_A23', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_A23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A23.Hide_GPP_A23 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_A23', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_A23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A23.Hide_GPP_A23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_A23', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_A23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A23.Hide_GPP_A23 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_A23', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_A23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A23.Hide_GPP_A23 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_A23', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_A23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A23.Hide_GPP_A23 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_A23', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_A23', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A23.Hide_GPP_A23 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_A23', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_A23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A23.Hide_GPP_A23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_A23', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_A23', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_A23', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_A23', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_A23', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_A23', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_A23', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_A23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A23.Hide_GPP_A23 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_A23', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_A23', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_A23', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_A23', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_A23', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_A23', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_A23.Hide_GPP_A23 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C00', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C00', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C00.Hide_GPP_C00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C00', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C00.Hide_GPP_C00 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C00', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C00.Hide_GPP_C00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C00', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C00.Hide_GPP_C00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C00', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C00.Hide_GPP_C00 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C00', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C00.Hide_GPP_C00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C00', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C00', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C00.Hide_GPP_C00 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C00', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C00.Hide_GPP_C00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C00', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C00', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C00', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C00', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C00', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C00', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C00.Hide_GPP_C00 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C00', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C00', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C00', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C00', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C00', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C00.Hide_GPP_C00 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C01', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C01', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C01.Hide_GPP_C01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C01', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C01.Hide_GPP_C01 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C01', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C01.Hide_GPP_C01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C01', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C01.Hide_GPP_C01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C01', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C01.Hide_GPP_C01 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C01', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C01.Hide_GPP_C01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C01', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C01', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C01.Hide_GPP_C01 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C01', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C01.Hide_GPP_C01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C01', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C01', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C01', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C01', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C01', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C01', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C01.Hide_GPP_C01 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C01', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C01', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C01', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C01', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C01', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C01.Hide_GPP_C01 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C02', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C02', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C02.Hide_GPP_C02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C02', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C02.Hide_GPP_C02 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C02', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C02.Hide_GPP_C02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C02', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C02.Hide_GPP_C02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C02', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C02.Hide_GPP_C02 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C02', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C02.Hide_GPP_C02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C02', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C02', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C02.Hide_GPP_C02 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C02', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C02.Hide_GPP_C02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C02', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C02', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C02', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C02', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C02', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C02', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C02.Hide_GPP_C02 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C02', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C02', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C02', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C02', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C02', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C02.Hide_GPP_C02 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C03', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C03', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C03.Hide_GPP_C03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C03', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C03.Hide_GPP_C03 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C03', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C03.Hide_GPP_C03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C03', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C03.Hide_GPP_C03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C03', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C03.Hide_GPP_C03 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C03', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C03.Hide_GPP_C03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C03', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C03', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C03.Hide_GPP_C03 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C03', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C03.Hide_GPP_C03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C03', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C03', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C03', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C03', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C03', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C03', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C03.Hide_GPP_C03 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C03', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C03', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C03', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C03', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C03', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C03.Hide_GPP_C03 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C04', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C04', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C04.Hide_GPP_C04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C04', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C04.Hide_GPP_C04 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C04', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C04.Hide_GPP_C04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C04', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C04.Hide_GPP_C04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C04', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C04.Hide_GPP_C04 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C04', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C04.Hide_GPP_C04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C04', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C04', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C04.Hide_GPP_C04 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C04', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C04.Hide_GPP_C04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C04', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C04', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C04', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C04', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C04', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C04', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C04.Hide_GPP_C04 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C04', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C04', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C04', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C04', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C04', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C04.Hide_GPP_C04 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C05', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C05', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C05.Hide_GPP_C05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C05', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C05.Hide_GPP_C05 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C05', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C05.Hide_GPP_C05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C05', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C05.Hide_GPP_C05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C05', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C05.Hide_GPP_C05 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C05', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C05.Hide_GPP_C05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C05', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C05', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C05.Hide_GPP_C05 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C05', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C05.Hide_GPP_C05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C05', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C05', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C05', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C05', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C05', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C05', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C05.Hide_GPP_C05 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C05', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C05', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C05', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C05', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C05', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C05.Hide_GPP_C05 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C06', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C06', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C06.Hide_GPP_C06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C06', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C06.Hide_GPP_C06 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C06', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C06.Hide_GPP_C06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C06', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C06.Hide_GPP_C06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C06', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C06.Hide_GPP_C06 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C06', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C06.Hide_GPP_C06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C06', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C06', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C06.Hide_GPP_C06 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C06', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C06.Hide_GPP_C06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C06', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C06', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C06', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C06', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C06', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C06', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C06.Hide_GPP_C06 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C06', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C06', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C06', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C06', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C06', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C06.Hide_GPP_C06 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C07', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C07', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C07.Hide_GPP_C07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C07', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C07.Hide_GPP_C07 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C07', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C07.Hide_GPP_C07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C07', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C07.Hide_GPP_C07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C07', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C07.Hide_GPP_C07 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C07', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C07.Hide_GPP_C07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C07', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C07', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C07.Hide_GPP_C07 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C07', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C07.Hide_GPP_C07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C07', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C07', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C07', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C07', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C07', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C07', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C07.Hide_GPP_C07 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C07', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C07', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C07', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C07', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C07', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C07.Hide_GPP_C07 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C08', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C08', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C08.Hide_GPP_C08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C08', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C08.Hide_GPP_C08 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C08', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C08.Hide_GPP_C08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C08', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C08.Hide_GPP_C08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C08', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C08.Hide_GPP_C08 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C08', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C08.Hide_GPP_C08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C08', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C08', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C08.Hide_GPP_C08 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C08', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C08.Hide_GPP_C08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C08', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C08', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C08', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C08', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C08', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C08', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C08.Hide_GPP_C08 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C08', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C08', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C08', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C08', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C08', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C08.Hide_GPP_C08 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C09', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C09', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C09.Hide_GPP_C09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C09', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C09.Hide_GPP_C09 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C09', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C09.Hide_GPP_C09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C09', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C09.Hide_GPP_C09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C09', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C09.Hide_GPP_C09 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C09', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C09.Hide_GPP_C09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C09', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C09', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C09.Hide_GPP_C09 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C09', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C09.Hide_GPP_C09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C09', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C09', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C09', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C09', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C09', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C09', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C09.Hide_GPP_C09 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C09', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C09', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C09', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C09', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C09', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C09.Hide_GPP_C09 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C10', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C10', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C10.Hide_GPP_C10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C10', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C10.Hide_GPP_C10 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C10', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C10.Hide_GPP_C10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C10', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C10.Hide_GPP_C10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C10', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C10.Hide_GPP_C10 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C10', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C10.Hide_GPP_C10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C10', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C10', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C10.Hide_GPP_C10 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C10', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C10.Hide_GPP_C10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C10', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C10', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C10', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C10', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C10', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C10', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C10.Hide_GPP_C10 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C10', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C10', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C10', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C10', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C10', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C10.Hide_GPP_C10 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C11', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C11', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C11.Hide_GPP_C11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C11', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C11.Hide_GPP_C11 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C11', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C11.Hide_GPP_C11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C11', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C11.Hide_GPP_C11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C11', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C11.Hide_GPP_C11 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C11', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C11.Hide_GPP_C11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C11', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C11', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C11.Hide_GPP_C11 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C11', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C11.Hide_GPP_C11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C11', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C11', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C11', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C11', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C11', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C11', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C11.Hide_GPP_C11 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C11', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C11', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C11', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C11', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C11', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C11.Hide_GPP_C11 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C12', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C12', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C12.Hide_GPP_C12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C12', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C12.Hide_GPP_C12 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C12', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C12.Hide_GPP_C12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C12', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C12.Hide_GPP_C12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C12', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C12.Hide_GPP_C12 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C12', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C12.Hide_GPP_C12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C12', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C12', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C12.Hide_GPP_C12 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C12', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C12.Hide_GPP_C12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C12', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C12', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C12', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C12', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C12', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C12', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C12.Hide_GPP_C12 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C12', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C12', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C12', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C12', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C12', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C12.Hide_GPP_C12 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C13', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C13', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C13.Hide_GPP_C13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C13', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C13.Hide_GPP_C13 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C13', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C13.Hide_GPP_C13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C13', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C13.Hide_GPP_C13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C13', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C13.Hide_GPP_C13 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C13', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C13.Hide_GPP_C13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C13', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C13', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C13.Hide_GPP_C13 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C13', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C13.Hide_GPP_C13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C13', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C13', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C13', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C13', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C13', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C13', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C13.Hide_GPP_C13 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C13', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C13', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C13', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C13', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C13', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C13.Hide_GPP_C13 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C14', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C14', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C14.Hide_GPP_C14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C14', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C14.Hide_GPP_C14 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C14', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C14.Hide_GPP_C14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C14', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C14.Hide_GPP_C14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C14', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C14.Hide_GPP_C14 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C14', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C14.Hide_GPP_C14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C14', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C14', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C14.Hide_GPP_C14 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C14', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C14.Hide_GPP_C14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C14', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C14', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C14', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C14', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C14', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C14', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C14.Hide_GPP_C14 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C14', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C14', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C14', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C14', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C14', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C14.Hide_GPP_C14 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C15', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C15', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C15.Hide_GPP_C15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C15', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C15.Hide_GPP_C15 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C15', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C15.Hide_GPP_C15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C15', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C15.Hide_GPP_C15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C15', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C15.Hide_GPP_C15 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C15', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C15.Hide_GPP_C15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C15', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C15', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C15.Hide_GPP_C15 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C15', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C15.Hide_GPP_C15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C15', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C15', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C15', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C15', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C15', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C15', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C15.Hide_GPP_C15 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C15', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C15', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C15', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C15', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C15', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C15.Hide_GPP_C15 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C16', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C16', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C16.Hide_GPP_C16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C16', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C16.Hide_GPP_C16 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C16', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C16.Hide_GPP_C16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C16', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C16.Hide_GPP_C16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C16', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C16.Hide_GPP_C16 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C16', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C16.Hide_GPP_C16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C16', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C16', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C16.Hide_GPP_C16 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C16', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C16.Hide_GPP_C16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C16', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C16', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C16', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C16', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C16', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C16', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C16.Hide_GPP_C16 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C16', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C16', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C16', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C16', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C16', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C16.Hide_GPP_C16 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C17', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C17', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C17.Hide_GPP_C17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C17', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C17.Hide_GPP_C17 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C17', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C17.Hide_GPP_C17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C17', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C17.Hide_GPP_C17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C17', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C17.Hide_GPP_C17 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C17', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C17.Hide_GPP_C17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C17', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C17', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C17.Hide_GPP_C17 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C17', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C17.Hide_GPP_C17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C17', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C17', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C17', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C17', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C17', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C17', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C17.Hide_GPP_C17 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C17', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C17', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C17', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C17', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C17', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C17.Hide_GPP_C17 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C18', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C18', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C18.Hide_GPP_C18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C18', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C18.Hide_GPP_C18 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C18', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C18.Hide_GPP_C18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C18', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C18.Hide_GPP_C18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C18', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C18.Hide_GPP_C18 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C18', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C18.Hide_GPP_C18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C18', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C18', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C18.Hide_GPP_C18 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C18', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C18.Hide_GPP_C18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C18', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C18', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C18', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C18', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C18', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C18', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C18.Hide_GPP_C18 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C18', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C18', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C18', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C18', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C18', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C18.Hide_GPP_C18 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C19', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C19', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C19.Hide_GPP_C19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C19', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C19.Hide_GPP_C19 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C19', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C19.Hide_GPP_C19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C19', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C19.Hide_GPP_C19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C19', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C19.Hide_GPP_C19 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C19', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C19.Hide_GPP_C19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C19', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C19', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C19.Hide_GPP_C19 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C19', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C19.Hide_GPP_C19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C19', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C19', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C19', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C19', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C19', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C19', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C19.Hide_GPP_C19 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C19', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C19', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C19', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C19', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C19', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C19.Hide_GPP_C19 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C20', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C20', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C20.Hide_GPP_C20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C20', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C20.Hide_GPP_C20 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C20', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C20.Hide_GPP_C20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C20', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C20.Hide_GPP_C20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C20', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C20.Hide_GPP_C20 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C20', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C20.Hide_GPP_C20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C20', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C20', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C20.Hide_GPP_C20 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C20', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C20.Hide_GPP_C20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C20', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C20', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C20', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C20', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C20', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C20', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C20.Hide_GPP_C20 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C20', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C20', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C20', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C20', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C20', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C20.Hide_GPP_C20 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C21', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C21', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C21.Hide_GPP_C21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C21', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C21.Hide_GPP_C21 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C21', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C21.Hide_GPP_C21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C21', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C21.Hide_GPP_C21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C21', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C21.Hide_GPP_C21 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C21', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C21.Hide_GPP_C21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C21', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C21', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C21.Hide_GPP_C21 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C21', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C21.Hide_GPP_C21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C21', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C21', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C21', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C21', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C21', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C21', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C21.Hide_GPP_C21 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C21', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C21', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C21', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C21', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C21', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C21.Hide_GPP_C21 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C22', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C22', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C22.Hide_GPP_C22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C22', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C22.Hide_GPP_C22 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C22', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C22.Hide_GPP_C22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C22', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C22.Hide_GPP_C22 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C22', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C22.Hide_GPP_C22 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C22', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C22.Hide_GPP_C22 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C22', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C22', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C22.Hide_GPP_C22 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C22', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C22.Hide_GPP_C22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C22', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C22', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C22', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C22', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C22', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C22', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C22', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C22.Hide_GPP_C22 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C22', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C22', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C22', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C22', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C22', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C22', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C22.Hide_GPP_C22 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_C23', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_C23', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C23.Hide_GPP_C23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_C23', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_C23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C23.Hide_GPP_C23 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_C23', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_C23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C23.Hide_GPP_C23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_C23', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_C23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C23.Hide_GPP_C23 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_C23', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_C23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C23.Hide_GPP_C23 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_C23', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_C23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C23.Hide_GPP_C23 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_C23', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_C23', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C23.Hide_GPP_C23 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_C23', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_C23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C23.Hide_GPP_C23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_C23', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_C23', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_C23', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_C23', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_C23', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_C23', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_C23', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_C23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C23.Hide_GPP_C23 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_C23', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_C23', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_C23', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_C23', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_C23', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_C23', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_C23.Hide_GPP_C23 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_S00', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_S00', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_S00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S00.Hide_GPP_S00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_S00', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_S00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S00.Hide_GPP_S00 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_S00', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_S00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S00.Hide_GPP_S00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_S00', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_S00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S00.Hide_GPP_S00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_S00', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_S00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S00.Hide_GPP_S00 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_S00', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_S00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S00.Hide_GPP_S00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_S00', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_S00', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_S00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S00.Hide_GPP_S00 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_S00', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_S00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S00.Hide_GPP_S00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_S00', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_S00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_S00', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_S00', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_S00', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_S00', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_S00', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_S00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S00.Hide_GPP_S00 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_S00', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_S00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_S00', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_S00', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_S00', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_S00', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S00.Hide_GPP_S00 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_S01', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_S01', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_S01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S01.Hide_GPP_S01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_S01', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_S01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S01.Hide_GPP_S01 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_S01', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_S01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S01.Hide_GPP_S01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_S01', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_S01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S01.Hide_GPP_S01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_S01', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_S01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S01.Hide_GPP_S01 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_S01', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_S01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S01.Hide_GPP_S01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_S01', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_S01', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_S01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S01.Hide_GPP_S01 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_S01', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_S01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S01.Hide_GPP_S01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_S01', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_S01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_S01', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_S01', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_S01', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_S01', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_S01', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_S01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S01.Hide_GPP_S01 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_S01', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_S01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_S01', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_S01', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_S01', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_S01', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S01.Hide_GPP_S01 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_S02', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_S02', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_S02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S02.Hide_GPP_S02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_S02', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_S02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S02.Hide_GPP_S02 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_S02', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_S02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S02.Hide_GPP_S02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_S02', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_S02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S02.Hide_GPP_S02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_S02', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_S02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S02.Hide_GPP_S02 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_S02', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_S02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S02.Hide_GPP_S02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_S02', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_S02', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_S02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S02.Hide_GPP_S02 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_S02', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_S02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S02.Hide_GPP_S02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_S02', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_S02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_S02', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_S02', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_S02', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_S02', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_S02', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_S02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S02.Hide_GPP_S02 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_S02', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_S02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_S02', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_S02', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_S02', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_S02', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S02.Hide_GPP_S02 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_S03', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_S03', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_S03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S03.Hide_GPP_S03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_S03', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_S03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S03.Hide_GPP_S03 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_S03', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_S03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S03.Hide_GPP_S03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_S03', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_S03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S03.Hide_GPP_S03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_S03', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_S03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S03.Hide_GPP_S03 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_S03', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_S03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S03.Hide_GPP_S03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_S03', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_S03', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_S03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S03.Hide_GPP_S03 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_S03', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_S03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S03.Hide_GPP_S03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_S03', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_S03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_S03', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_S03', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_S03', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_S03', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_S03', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_S03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S03.Hide_GPP_S03 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_S03', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_S03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_S03', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_S03', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_S03', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_S03', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S03.Hide_GPP_S03 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_S04', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_S04', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_S04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S04.Hide_GPP_S04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_S04', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_S04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S04.Hide_GPP_S04 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_S04', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_S04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S04.Hide_GPP_S04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_S04', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_S04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S04.Hide_GPP_S04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_S04', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_S04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S04.Hide_GPP_S04 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_S04', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_S04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S04.Hide_GPP_S04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_S04', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_S04', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_S04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S04.Hide_GPP_S04 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_S04', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_S04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S04.Hide_GPP_S04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_S04', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_S04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_S04', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_S04', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_S04', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_S04', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_S04', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_S04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S04.Hide_GPP_S04 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_S04', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_S04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_S04', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_S04', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_S04', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_S04', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S04.Hide_GPP_S04 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_S05', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_S05', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_S05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S05.Hide_GPP_S05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_S05', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_S05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S05.Hide_GPP_S05 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_S05', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_S05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S05.Hide_GPP_S05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_S05', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_S05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S05.Hide_GPP_S05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_S05', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_S05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S05.Hide_GPP_S05 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_S05', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_S05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S05.Hide_GPP_S05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_S05', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_S05', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_S05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S05.Hide_GPP_S05 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_S05', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_S05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S05.Hide_GPP_S05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_S05', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_S05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_S05', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_S05', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_S05', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_S05', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_S05', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_S05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S05.Hide_GPP_S05 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_S05', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_S05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_S05', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_S05', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_S05', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_S05', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S05.Hide_GPP_S05 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_S06', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_S06', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_S06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S06.Hide_GPP_S06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_S06', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_S06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S06.Hide_GPP_S06 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_S06', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_S06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S06.Hide_GPP_S06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_S06', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_S06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S06.Hide_GPP_S06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_S06', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_S06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S06.Hide_GPP_S06 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_S06', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_S06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S06.Hide_GPP_S06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_S06', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_S06', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_S06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S06.Hide_GPP_S06 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_S06', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_S06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S06.Hide_GPP_S06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_S06', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_S06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_S06', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_S06', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_S06', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_S06', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_S06', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_S06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S06.Hide_GPP_S06 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_S06', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_S06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_S06', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_S06', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_S06', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_S06', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S06.Hide_GPP_S06 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_S07', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_S07', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_S07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S07.Hide_GPP_S07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_S07', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_S07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S07.Hide_GPP_S07 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_S07', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_S07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S07.Hide_GPP_S07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_S07', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_S07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S07.Hide_GPP_S07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_S07', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_S07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S07.Hide_GPP_S07 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_S07', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_S07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S07.Hide_GPP_S07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_S07', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_S07', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_S07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S07.Hide_GPP_S07 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_S07', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_S07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S07.Hide_GPP_S07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_S07', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_S07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_S07', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_S07', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_S07', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_S07', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_S07', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_S07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S07.Hide_GPP_S07 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_S07', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_S07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_S07', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_S07', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_S07', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_S07', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_S07.Hide_GPP_S07 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E00', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E00', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E00.Hide_GPP_E00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E00', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E00.Hide_GPP_E00 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E00', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E00.Hide_GPP_E00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E00', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E00.Hide_GPP_E00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E00', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E00.Hide_GPP_E00 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E00', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E00.Hide_GPP_E00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E00', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E00', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E00.Hide_GPP_E00 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E00', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E00.Hide_GPP_E00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E00', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E00', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E00', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E00', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E00', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E00', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E00.Hide_GPP_E00 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E00', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E00', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E00', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E00', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E00', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E00.Hide_GPP_E00 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E01', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E01', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E01.Hide_GPP_E01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E01', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E01.Hide_GPP_E01 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E01', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E01.Hide_GPP_E01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E01', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E01.Hide_GPP_E01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E01', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E01.Hide_GPP_E01 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E01', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E01.Hide_GPP_E01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E01', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E01', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E01.Hide_GPP_E01 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E01', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E01.Hide_GPP_E01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E01', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E01', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E01', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E01', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E01', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E01', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E01.Hide_GPP_E01 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E01', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E01', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E01', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E01', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E01', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E01.Hide_GPP_E01 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E02', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E02', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E02.Hide_GPP_E02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E02', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E02.Hide_GPP_E02 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E02', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E02.Hide_GPP_E02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E02', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E02.Hide_GPP_E02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E02', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E02.Hide_GPP_E02 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E02', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E02.Hide_GPP_E02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E02', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E02', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E02.Hide_GPP_E02 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E02', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E02.Hide_GPP_E02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E02', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E02', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E02', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E02', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E02', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E02', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E02.Hide_GPP_E02 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E02', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E02', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E02', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E02', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E02', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E02.Hide_GPP_E02 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E03', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E03', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E03.Hide_GPP_E03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E03', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E03.Hide_GPP_E03 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E03', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E03.Hide_GPP_E03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E03', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E03.Hide_GPP_E03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E03', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E03.Hide_GPP_E03 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E03', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E03.Hide_GPP_E03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E03', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E03', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E03.Hide_GPP_E03 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E03', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E03.Hide_GPP_E03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E03', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E03', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E03', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E03', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E03', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E03', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E03.Hide_GPP_E03 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E03', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E03', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E03', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E03', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E03', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E03.Hide_GPP_E03 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E04', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E04', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E04.Hide_GPP_E04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E04', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E04.Hide_GPP_E04 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E04', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E04.Hide_GPP_E04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E04', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E04.Hide_GPP_E04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E04', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E04.Hide_GPP_E04 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E04', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E04.Hide_GPP_E04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E04', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E04', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E04.Hide_GPP_E04 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E04', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E04.Hide_GPP_E04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E04', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E04', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E04', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E04', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E04', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E04', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E04.Hide_GPP_E04 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E04', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E04', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E04', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E04', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E04', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E04.Hide_GPP_E04 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E05', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E05', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E05.Hide_GPP_E05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E05', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E05.Hide_GPP_E05 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E05', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E05.Hide_GPP_E05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E05', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E05.Hide_GPP_E05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E05', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E05.Hide_GPP_E05 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E05', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E05.Hide_GPP_E05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E05', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E05', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E05.Hide_GPP_E05 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E05', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E05.Hide_GPP_E05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E05', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E05', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E05', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E05', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E05', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E05', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E05.Hide_GPP_E05 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E05', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E05', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E05', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E05', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E05', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E05.Hide_GPP_E05 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E06', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E06', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E06.Hide_GPP_E06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E06', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E06.Hide_GPP_E06 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E06', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E06.Hide_GPP_E06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E06', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E06.Hide_GPP_E06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E06', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E06.Hide_GPP_E06 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E06', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E06.Hide_GPP_E06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E06', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E06', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E06.Hide_GPP_E06 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E06', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E06.Hide_GPP_E06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E06', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E06', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E06', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E06', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E06', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E06', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E06.Hide_GPP_E06 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E06', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E06', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E06', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E06', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E06', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E06.Hide_GPP_E06 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E07', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E07', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E07.Hide_GPP_E07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E07', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E07.Hide_GPP_E07 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E07', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E07.Hide_GPP_E07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E07', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E07.Hide_GPP_E07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E07', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E07.Hide_GPP_E07 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E07', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E07.Hide_GPP_E07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E07', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E07', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E07.Hide_GPP_E07 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E07', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E07.Hide_GPP_E07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E07', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E07', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E07', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E07', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E07', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E07', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E07.Hide_GPP_E07 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E07', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E07', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E07', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E07', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E07', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E07.Hide_GPP_E07 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E08', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E08', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E08.Hide_GPP_E08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E08', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E08.Hide_GPP_E08 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E08', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E08.Hide_GPP_E08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E08', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E08.Hide_GPP_E08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E08', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E08.Hide_GPP_E08 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E08', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E08.Hide_GPP_E08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E08', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E08', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E08.Hide_GPP_E08 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E08', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E08.Hide_GPP_E08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E08', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E08', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E08', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E08', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E08', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E08', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E08.Hide_GPP_E08 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E08', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E08', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E08', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E08', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E08', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E08.Hide_GPP_E08 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E09', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E09', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E09.Hide_GPP_E09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E09', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E09.Hide_GPP_E09 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E09', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E09.Hide_GPP_E09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E09', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E09.Hide_GPP_E09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E09', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E09.Hide_GPP_E09 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E09', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E09.Hide_GPP_E09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E09', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E09', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E09.Hide_GPP_E09 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E09', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E09.Hide_GPP_E09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E09', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E09', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E09', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E09', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E09', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E09', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E09.Hide_GPP_E09 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E09', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E09', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E09', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E09', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E09', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E09.Hide_GPP_E09 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E10', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E10', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E10.Hide_GPP_E10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E10', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E10.Hide_GPP_E10 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E10', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E10.Hide_GPP_E10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E10', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E10.Hide_GPP_E10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E10', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E10.Hide_GPP_E10 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E10', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E10.Hide_GPP_E10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E10', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E10', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E10.Hide_GPP_E10 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E10', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E10.Hide_GPP_E10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E10', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E10', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E10', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E10', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E10', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E10', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E10.Hide_GPP_E10 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E10', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E10', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E10', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E10', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E10', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E10.Hide_GPP_E10 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E11', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E11', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E11.Hide_GPP_E11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E11', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E11.Hide_GPP_E11 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E11', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E11.Hide_GPP_E11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E11', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E11.Hide_GPP_E11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E11', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E11.Hide_GPP_E11 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E11', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E11.Hide_GPP_E11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E11', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E11', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E11.Hide_GPP_E11 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E11', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E11.Hide_GPP_E11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E11', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E11', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E11', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E11', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E11', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E11', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E11.Hide_GPP_E11 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E11', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E11', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E11', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E11', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E11', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E11.Hide_GPP_E11 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E12', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E12', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E12.Hide_GPP_E12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E12', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E12.Hide_GPP_E12 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E12', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E12.Hide_GPP_E12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E12', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E12.Hide_GPP_E12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E12', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E12.Hide_GPP_E12 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E12', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E12.Hide_GPP_E12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E12', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E12', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E12.Hide_GPP_E12 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E12', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E12.Hide_GPP_E12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E12', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E12', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E12', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E12', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E12', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E12', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E12.Hide_GPP_E12 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E12', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E12', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E12', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E12', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E12', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E12.Hide_GPP_E12 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E13', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E13', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E13.Hide_GPP_E13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E13', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E13.Hide_GPP_E13 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E13', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E13.Hide_GPP_E13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E13', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E13.Hide_GPP_E13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E13', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E13.Hide_GPP_E13 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E13', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E13.Hide_GPP_E13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E13', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E13', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E13.Hide_GPP_E13 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E13', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E13.Hide_GPP_E13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E13', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E13', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E13', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E13', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E13', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E13', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E13.Hide_GPP_E13 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E13', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E13', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E13', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E13', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E13', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E13.Hide_GPP_E13 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E14', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E14', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E14.Hide_GPP_E14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E14', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E14.Hide_GPP_E14 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E14', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E14.Hide_GPP_E14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E14', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E14.Hide_GPP_E14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E14', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E14.Hide_GPP_E14 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E14', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E14.Hide_GPP_E14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E14', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E14', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E14.Hide_GPP_E14 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E14', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E14.Hide_GPP_E14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E14', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E14', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E14', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E14', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E14', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E14', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E14.Hide_GPP_E14 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E14', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E14', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E14', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E14', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E14', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E14.Hide_GPP_E14 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E15', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E15', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E15.Hide_GPP_E15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E15', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E15.Hide_GPP_E15 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E15', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E15.Hide_GPP_E15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E15', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E15.Hide_GPP_E15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E15', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E15.Hide_GPP_E15 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E15', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E15.Hide_GPP_E15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E15', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E15', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E15.Hide_GPP_E15 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E15', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E15.Hide_GPP_E15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E15', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E15', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E15', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E15', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E15', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E15', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E15.Hide_GPP_E15 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E15', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E15', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E15', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E15', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E15', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E15.Hide_GPP_E15 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E16', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E16', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E16.Hide_GPP_E16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E16', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E16.Hide_GPP_E16 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E16', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E16.Hide_GPP_E16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E16', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E16.Hide_GPP_E16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E16', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E16.Hide_GPP_E16 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E16', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E16.Hide_GPP_E16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E16', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E16', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E16.Hide_GPP_E16 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E16', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E16.Hide_GPP_E16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E16', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E16', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E16', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E16', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E16', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E16', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E16.Hide_GPP_E16 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E16', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E16', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E16', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E16', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E16', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E16.Hide_GPP_E16 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E17', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E17', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E17.Hide_GPP_E17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E17', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E17.Hide_GPP_E17 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E17', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E17.Hide_GPP_E17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E17', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E17.Hide_GPP_E17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E17', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E17.Hide_GPP_E17 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E17', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E17.Hide_GPP_E17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E17', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E17', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E17.Hide_GPP_E17 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E17', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E17.Hide_GPP_E17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E17', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E17', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E17', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E17', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E17', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E17', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E17.Hide_GPP_E17 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E17', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E17', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E17', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E17', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E17', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E17.Hide_GPP_E17 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E18', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E18', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E18.Hide_GPP_E18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E18', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E18.Hide_GPP_E18 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E18', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E18.Hide_GPP_E18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E18', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E18.Hide_GPP_E18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E18', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E18.Hide_GPP_E18 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E18', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E18.Hide_GPP_E18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E18', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E18', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E18.Hide_GPP_E18 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E18', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E18.Hide_GPP_E18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E18', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E18', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E18', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E18', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E18', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E18', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E18.Hide_GPP_E18 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E18', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E18', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E18', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E18', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E18', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E18.Hide_GPP_E18 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E19', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E19', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E19.Hide_GPP_E19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E19', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E19.Hide_GPP_E19 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E19', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E19.Hide_GPP_E19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E19', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E19.Hide_GPP_E19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E19', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E19.Hide_GPP_E19 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E19', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E19.Hide_GPP_E19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E19', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E19', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E19.Hide_GPP_E19 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E19', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E19.Hide_GPP_E19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E19', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E19', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E19', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E19', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E19', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E19', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E19.Hide_GPP_E19 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E19', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E19', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E19', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E19', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E19', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E19.Hide_GPP_E19 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E20', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E20', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E20.Hide_GPP_E20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E20', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E20.Hide_GPP_E20 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E20', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E20.Hide_GPP_E20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E20', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E20.Hide_GPP_E20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E20', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E20.Hide_GPP_E20 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E20', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E20.Hide_GPP_E20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E20', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E20', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E20.Hide_GPP_E20 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E20', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E20.Hide_GPP_E20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E20', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E20', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E20', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E20', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E20', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E20', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E20.Hide_GPP_E20 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E20', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E20', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E20', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E20', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E20', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E20.Hide_GPP_E20 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E21', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E21', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E21.Hide_GPP_E21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E21', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E21.Hide_GPP_E21 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E21', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E21.Hide_GPP_E21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E21', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E21.Hide_GPP_E21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E21', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E21.Hide_GPP_E21 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E21', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E21.Hide_GPP_E21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E21', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E21', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E21.Hide_GPP_E21 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E21', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E21.Hide_GPP_E21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E21', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E21', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E21', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E21', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E21', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E21', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E21.Hide_GPP_E21 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E21', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E21', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E21', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E21', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E21', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E21.Hide_GPP_E21 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E22', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E22', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E22.Hide_GPP_E22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E22', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E22.Hide_GPP_E22 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E22', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E22.Hide_GPP_E22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E22', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E22.Hide_GPP_E22 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E22', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E22.Hide_GPP_E22 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E22', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E22.Hide_GPP_E22 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E22', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E22', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E22.Hide_GPP_E22 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E22', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E22.Hide_GPP_E22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E22', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E22', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E22', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E22', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E22', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E22', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E22', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E22.Hide_GPP_E22 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E22', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E22', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E22', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E22', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E22', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E22', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E22.Hide_GPP_E22 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_E23', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_E23', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E23.Hide_GPP_E23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_E23', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_E23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E23.Hide_GPP_E23 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_E23', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_E23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E23.Hide_GPP_E23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_E23', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_E23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E23.Hide_GPP_E23 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_E23', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_E23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E23.Hide_GPP_E23 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_E23', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_E23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E23.Hide_GPP_E23 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_E23', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_E23', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E23.Hide_GPP_E23 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_E23', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_E23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E23.Hide_GPP_E23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_E23', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_E23', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_E23', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_E23', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_E23', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_E23', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_E23', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_E23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E23.Hide_GPP_E23 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_E23', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_E23', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_E23', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_E23', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_E23', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_E23', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_E23.Hide_GPP_E23 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_K00', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_K00', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K00.Hide_GPP_K00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_K00', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_K00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K00.Hide_GPP_K00 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_K00', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_K00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K00.Hide_GPP_K00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_K00', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_K00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K00.Hide_GPP_K00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_K00', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_K00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K00.Hide_GPP_K00 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_K00', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_K00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K00.Hide_GPP_K00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_K00', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_K00', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K00.Hide_GPP_K00 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_K00', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_K00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K00.Hide_GPP_K00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_K00', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_K00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_K00', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_K00', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_K00', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_K00', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_K00', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_K00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K00.Hide_GPP_K00 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_K00', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_K00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_K00', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_K00', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_K00', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_K00', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K00.Hide_GPP_K00 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_K01', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_K01', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K01.Hide_GPP_K01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_K01', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_K01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K01.Hide_GPP_K01 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_K01', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_K01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K01.Hide_GPP_K01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_K01', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_K01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K01.Hide_GPP_K01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_K01', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_K01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K01.Hide_GPP_K01 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_K01', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_K01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K01.Hide_GPP_K01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_K01', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_K01', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K01.Hide_GPP_K01 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_K01', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_K01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K01.Hide_GPP_K01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_K01', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_K01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_K01', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_K01', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_K01', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_K01', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_K01', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_K01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K01.Hide_GPP_K01 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_K01', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_K01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_K01', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_K01', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_K01', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_K01', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K01.Hide_GPP_K01 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_K02', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_K02', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K02.Hide_GPP_K02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_K02', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_K02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K02.Hide_GPP_K02 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_K02', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_K02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K02.Hide_GPP_K02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_K02', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_K02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K02.Hide_GPP_K02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_K02', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_K02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K02.Hide_GPP_K02 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_K02', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_K02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K02.Hide_GPP_K02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_K02', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_K02', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K02.Hide_GPP_K02 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_K02', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_K02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K02.Hide_GPP_K02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_K02', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_K02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_K02', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_K02', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_K02', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_K02', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_K02', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_K02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K02.Hide_GPP_K02 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_K02', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_K02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_K02', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_K02', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_K02', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_K02', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K02.Hide_GPP_K02 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_K03', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_K03', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K03.Hide_GPP_K03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_K03', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_K03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K03.Hide_GPP_K03 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_K03', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_K03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K03.Hide_GPP_K03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_K03', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_K03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K03.Hide_GPP_K03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_K03', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_K03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K03.Hide_GPP_K03 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_K03', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_K03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K03.Hide_GPP_K03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_K03', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_K03', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K03.Hide_GPP_K03 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_K03', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_K03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K03.Hide_GPP_K03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_K03', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_K03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_K03', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_K03', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_K03', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_K03', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_K03', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_K03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K03.Hide_GPP_K03 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_K03', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_K03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_K03', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_K03', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_K03', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_K03', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K03.Hide_GPP_K03 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_K04', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_K04', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K04.Hide_GPP_K04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_K04', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_K04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K04.Hide_GPP_K04 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_K04', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_K04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K04.Hide_GPP_K04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_K04', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_K04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K04.Hide_GPP_K04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_K04', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_K04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K04.Hide_GPP_K04 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_K04', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_K04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K04.Hide_GPP_K04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_K04', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_K04', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K04.Hide_GPP_K04 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_K04', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_K04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K04.Hide_GPP_K04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_K04', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_K04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_K04', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_K04', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_K04', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_K04', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_K04', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_K04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K04.Hide_GPP_K04 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_K04', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_K04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_K04', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_K04', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_K04', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_K04', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K04.Hide_GPP_K04 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_K05', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_K05', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K05.Hide_GPP_K05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_K05', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_K05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K05.Hide_GPP_K05 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_K05', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_K05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K05.Hide_GPP_K05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_K05', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_K05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K05.Hide_GPP_K05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_K05', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_K05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K05.Hide_GPP_K05 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_K05', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_K05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K05.Hide_GPP_K05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_K05', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_K05', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K05.Hide_GPP_K05 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_K05', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_K05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K05.Hide_GPP_K05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_K05', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_K05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_K05', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_K05', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_K05', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_K05', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_K05', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_K05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K05.Hide_GPP_K05 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_K05', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_K05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_K05', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_K05', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_K05', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_K05', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K05.Hide_GPP_K05 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_K06', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_K06', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K06.Hide_GPP_K06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_K06', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_K06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K06.Hide_GPP_K06 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_K06', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_K06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K06.Hide_GPP_K06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_K06', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_K06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K06.Hide_GPP_K06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_K06', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_K06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K06.Hide_GPP_K06 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_K06', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_K06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K06.Hide_GPP_K06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_K06', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_K06', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K06.Hide_GPP_K06 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_K06', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_K06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K06.Hide_GPP_K06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_K06', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_K06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_K06', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_K06', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_K06', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_K06', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_K06', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_K06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K06.Hide_GPP_K06 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_K06', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_K06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_K06', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_K06', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_K06', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_K06', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K06.Hide_GPP_K06 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_K07', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_K07', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K07.Hide_GPP_K07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_K07', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_K07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K07.Hide_GPP_K07 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_K07', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_K07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K07.Hide_GPP_K07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_K07', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_K07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K07.Hide_GPP_K07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_K07', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_K07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K07.Hide_GPP_K07 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_K07', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_K07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K07.Hide_GPP_K07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_K07', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_K07', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K07.Hide_GPP_K07 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_K07', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_K07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K07.Hide_GPP_K07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_K07', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_K07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_K07', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_K07', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_K07', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_K07', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_K07', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_K07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K07.Hide_GPP_K07 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_K07', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_K07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_K07', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_K07', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_K07', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_K07', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K07.Hide_GPP_K07 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_K08', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_K08', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K08.Hide_GPP_K08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_K08', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_K08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K08.Hide_GPP_K08 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_K08', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_K08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K08.Hide_GPP_K08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_K08', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_K08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K08.Hide_GPP_K08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_K08', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_K08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K08.Hide_GPP_K08 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_K08', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_K08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K08.Hide_GPP_K08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_K08', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_K08', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K08.Hide_GPP_K08 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_K08', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_K08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K08.Hide_GPP_K08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_K08', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_K08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_K08', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_K08', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_K08', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_K08', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_K08', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_K08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K08.Hide_GPP_K08 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_K08', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_K08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_K08', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_K08', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_K08', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_K08', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K08.Hide_GPP_K08 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_K09', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_K09', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K09.Hide_GPP_K09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_K09', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_K09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K09.Hide_GPP_K09 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_K09', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_K09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K09.Hide_GPP_K09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_K09', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_K09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K09.Hide_GPP_K09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_K09', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_K09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K09.Hide_GPP_K09 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_K09', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_K09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K09.Hide_GPP_K09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_K09', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_K09', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K09.Hide_GPP_K09 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_K09', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_K09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K09.Hide_GPP_K09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_K09', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_K09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_K09', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_K09', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_K09', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_K09', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_K09', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_K09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K09.Hide_GPP_K09 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_K09', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_K09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_K09', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_K09', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_K09', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_K09', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K09.Hide_GPP_K09 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_K10', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_K10', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K10.Hide_GPP_K10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_K10', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_K10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K10.Hide_GPP_K10 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_K10', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_K10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K10.Hide_GPP_K10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_K10', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_K10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K10.Hide_GPP_K10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_K10', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_K10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K10.Hide_GPP_K10 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_K10', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_K10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K10.Hide_GPP_K10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_K10', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_K10', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K10.Hide_GPP_K10 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_K10', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_K10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K10.Hide_GPP_K10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_K10', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_K10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_K10', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_K10', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_K10', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_K10', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_K10', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_K10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K10.Hide_GPP_K10 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_K10', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_K10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_K10', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_K10', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_K10', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_K10', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K10.Hide_GPP_K10 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_K11', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_K11', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K11.Hide_GPP_K11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_K11', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_K11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K11.Hide_GPP_K11 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_K11', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_K11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K11.Hide_GPP_K11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_K11', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_K11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K11.Hide_GPP_K11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_K11', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_K11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K11.Hide_GPP_K11 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_K11', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_K11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K11.Hide_GPP_K11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_K11', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_K11', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K11.Hide_GPP_K11 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_K11', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_K11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K11.Hide_GPP_K11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_K11', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_K11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_K11', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_K11', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_K11', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_K11', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_K11', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_K11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K11.Hide_GPP_K11 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_K11', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_K11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_K11', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_K11', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_K11', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_K11', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_K11.Hide_GPP_K11 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F00', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F00', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F00.Hide_GPP_F00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F00', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F00.Hide_GPP_F00 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F00', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F00.Hide_GPP_F00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F00', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F00.Hide_GPP_F00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F00', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F00.Hide_GPP_F00 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F00', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F00.Hide_GPP_F00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F00', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F00', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F00.Hide_GPP_F00 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F00', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F00.Hide_GPP_F00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F00', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F00', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F00', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F00', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F00', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F00', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F00.Hide_GPP_F00 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F00', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F00', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F00', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F00', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F00', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F00.Hide_GPP_F00 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F01', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F01', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F01.Hide_GPP_F01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F01', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F01.Hide_GPP_F01 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F01', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F01.Hide_GPP_F01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F01', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F01.Hide_GPP_F01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F01', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F01.Hide_GPP_F01 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F01', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F01.Hide_GPP_F01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F01', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F01', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F01.Hide_GPP_F01 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F01', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F01.Hide_GPP_F01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F01', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F01', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F01', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F01', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F01', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F01', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F01.Hide_GPP_F01 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F01', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F01', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F01', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F01', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F01', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F01.Hide_GPP_F01 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F02', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F02', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F02.Hide_GPP_F02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F02', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F02.Hide_GPP_F02 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F02', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F02.Hide_GPP_F02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F02', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F02.Hide_GPP_F02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F02', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F02.Hide_GPP_F02 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F02', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F02.Hide_GPP_F02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F02', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F02', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F02.Hide_GPP_F02 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F02', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F02.Hide_GPP_F02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F02', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F02', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F02', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F02', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F02', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F02', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F02.Hide_GPP_F02 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F02', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F02', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F02', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F02', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F02', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F02.Hide_GPP_F02 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F03', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F03', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F03.Hide_GPP_F03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F03', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F03.Hide_GPP_F03 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F03', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F03.Hide_GPP_F03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F03', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F03.Hide_GPP_F03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F03', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F03.Hide_GPP_F03 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F03', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F03.Hide_GPP_F03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F03', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F03', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F03.Hide_GPP_F03 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F03', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F03.Hide_GPP_F03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F03', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F03', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F03', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F03', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F03', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F03', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F03.Hide_GPP_F03 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F03', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F03', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F03', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F03', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F03', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F03.Hide_GPP_F03 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F04', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F04', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F04.Hide_GPP_F04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F04', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F04.Hide_GPP_F04 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F04', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F04.Hide_GPP_F04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F04', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F04.Hide_GPP_F04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F04', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F04.Hide_GPP_F04 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F04', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F04.Hide_GPP_F04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F04', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F04', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F04.Hide_GPP_F04 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F04', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F04.Hide_GPP_F04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F04', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F04', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F04', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F04', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F04', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F04', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F04.Hide_GPP_F04 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F04', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F04', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F04', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F04', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F04', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F04.Hide_GPP_F04 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F05', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F05', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F05.Hide_GPP_F05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F05', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F05.Hide_GPP_F05 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F05', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F05.Hide_GPP_F05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F05', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F05.Hide_GPP_F05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F05', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F05.Hide_GPP_F05 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F05', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F05.Hide_GPP_F05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F05', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F05', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F05.Hide_GPP_F05 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F05', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F05.Hide_GPP_F05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F05', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F05', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F05', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F05', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F05', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F05', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F05.Hide_GPP_F05 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F05', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F05', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F05', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F05', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F05', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F05.Hide_GPP_F05 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F06', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F06', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F06.Hide_GPP_F06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F06', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F06.Hide_GPP_F06 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F06', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F06.Hide_GPP_F06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F06', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F06.Hide_GPP_F06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F06', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F06.Hide_GPP_F06 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F06', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F06.Hide_GPP_F06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F06', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F06', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F06.Hide_GPP_F06 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F06', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F06.Hide_GPP_F06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F06', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F06', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F06', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F06', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F06', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F06', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F06.Hide_GPP_F06 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F06', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F06', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F06', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F06', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F06', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F06.Hide_GPP_F06 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F07', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F07', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F07.Hide_GPP_F07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F07', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F07.Hide_GPP_F07 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F07', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F07.Hide_GPP_F07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F07', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F07.Hide_GPP_F07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F07', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F07.Hide_GPP_F07 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F07', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F07.Hide_GPP_F07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F07', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F07', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F07.Hide_GPP_F07 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F07', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F07.Hide_GPP_F07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F07', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F07', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F07', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F07', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F07', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F07', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F07.Hide_GPP_F07 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F07', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F07', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F07', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F07', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F07', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F07.Hide_GPP_F07 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F08', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F08', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F08.Hide_GPP_F08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F08', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F08.Hide_GPP_F08 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F08', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F08.Hide_GPP_F08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F08', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F08.Hide_GPP_F08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F08', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F08.Hide_GPP_F08 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F08', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F08.Hide_GPP_F08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F08', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F08', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F08.Hide_GPP_F08 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F08', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F08.Hide_GPP_F08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F08', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F08', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F08', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F08', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F08', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F08', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F08.Hide_GPP_F08 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F08', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F08', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F08', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F08', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F08', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F08.Hide_GPP_F08 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F09', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F09', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F09.Hide_GPP_F09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F09', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F09.Hide_GPP_F09 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F09', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F09.Hide_GPP_F09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F09', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F09.Hide_GPP_F09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F09', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F09.Hide_GPP_F09 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F09', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F09.Hide_GPP_F09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F09', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F09', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F09.Hide_GPP_F09 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F09', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F09.Hide_GPP_F09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F09', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F09', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F09', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F09', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F09', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F09', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F09.Hide_GPP_F09 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F09', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F09', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F09', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F09', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F09', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F09.Hide_GPP_F09 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F10', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F10', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F10.Hide_GPP_F10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F10', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F10.Hide_GPP_F10 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F10', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F10.Hide_GPP_F10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F10', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F10.Hide_GPP_F10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F10', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F10.Hide_GPP_F10 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F10', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F10.Hide_GPP_F10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F10', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F10', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F10.Hide_GPP_F10 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F10', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F10.Hide_GPP_F10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F10', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F10', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F10', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F10', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F10', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F10', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F10.Hide_GPP_F10 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F10', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F10', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F10', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F10', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F10', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F10.Hide_GPP_F10 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F11', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F11', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F11.Hide_GPP_F11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F11', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F11.Hide_GPP_F11 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F11', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F11.Hide_GPP_F11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F11', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F11.Hide_GPP_F11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F11', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F11.Hide_GPP_F11 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F11', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F11.Hide_GPP_F11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F11', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F11', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F11.Hide_GPP_F11 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F11', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F11.Hide_GPP_F11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F11', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F11', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F11', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F11', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F11', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F11', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F11.Hide_GPP_F11 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F11', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F11', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F11', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F11', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F11', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F11.Hide_GPP_F11 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F12', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F12', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F12.Hide_GPP_F12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F12', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F12.Hide_GPP_F12 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F12', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F12.Hide_GPP_F12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F12', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F12.Hide_GPP_F12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F12', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F12.Hide_GPP_F12 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F12', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F12.Hide_GPP_F12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F12', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F12', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F12.Hide_GPP_F12 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F12', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F12.Hide_GPP_F12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F12', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F12', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F12', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F12', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F12', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F12', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F12.Hide_GPP_F12 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F12', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F12', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F12', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F12', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F12', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F12.Hide_GPP_F12 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F13', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F13', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F13.Hide_GPP_F13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F13', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F13.Hide_GPP_F13 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F13', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F13.Hide_GPP_F13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F13', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F13.Hide_GPP_F13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F13', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F13.Hide_GPP_F13 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F13', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F13.Hide_GPP_F13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F13', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F13', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F13.Hide_GPP_F13 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F13', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F13.Hide_GPP_F13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F13', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F13', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F13', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F13', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F13', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F13', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F13.Hide_GPP_F13 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F13', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F13', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F13', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F13', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F13', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F13.Hide_GPP_F13 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F14', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F14', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F14.Hide_GPP_F14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F14', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F14.Hide_GPP_F14 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F14', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F14.Hide_GPP_F14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F14', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F14.Hide_GPP_F14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F14', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F14.Hide_GPP_F14 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F14', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F14.Hide_GPP_F14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F14', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F14', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F14.Hide_GPP_F14 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F14', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F14.Hide_GPP_F14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F14', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F14', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F14', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F14', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F14', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F14', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F14.Hide_GPP_F14 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F14', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F14', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F14', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F14', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F14', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F14.Hide_GPP_F14 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F15', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F15', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F15.Hide_GPP_F15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F15', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F15.Hide_GPP_F15 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F15', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F15.Hide_GPP_F15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F15', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F15.Hide_GPP_F15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F15', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F15.Hide_GPP_F15 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F15', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F15.Hide_GPP_F15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F15', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F15', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F15.Hide_GPP_F15 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F15', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F15.Hide_GPP_F15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F15', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F15', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F15', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F15', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F15', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F15', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F15.Hide_GPP_F15 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F15', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F15', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F15', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F15', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F15', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F15.Hide_GPP_F15 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F16', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F16', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F16.Hide_GPP_F16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F16', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F16.Hide_GPP_F16 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F16', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F16.Hide_GPP_F16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F16', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F16.Hide_GPP_F16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F16', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F16.Hide_GPP_F16 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F16', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F16.Hide_GPP_F16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F16', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F16', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F16.Hide_GPP_F16 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F16', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F16.Hide_GPP_F16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F16', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F16', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F16', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F16', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F16', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F16', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F16.Hide_GPP_F16 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F16', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F16', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F16', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F16', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F16', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F16.Hide_GPP_F16 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F17', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F17', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F17.Hide_GPP_F17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F17', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F17.Hide_GPP_F17 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F17', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F17.Hide_GPP_F17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F17', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F17.Hide_GPP_F17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F17', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F17.Hide_GPP_F17 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F17', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F17.Hide_GPP_F17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F17', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F17', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F17.Hide_GPP_F17 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F17', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F17.Hide_GPP_F17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F17', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F17', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F17', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F17', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F17', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F17', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F17.Hide_GPP_F17 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F17', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F17', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F17', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F17', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F17', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F17.Hide_GPP_F17 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F18', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F18', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F18.Hide_GPP_F18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F18', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F18.Hide_GPP_F18 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F18', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F18.Hide_GPP_F18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F18', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F18.Hide_GPP_F18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F18', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F18.Hide_GPP_F18 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F18', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F18.Hide_GPP_F18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F18', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F18', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F18.Hide_GPP_F18 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F18', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F18.Hide_GPP_F18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F18', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F18', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F18', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F18', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F18', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F18', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F18.Hide_GPP_F18 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F18', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F18', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F18', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F18', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F18', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F18.Hide_GPP_F18 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F19', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F19', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F19.Hide_GPP_F19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F19', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F19.Hide_GPP_F19 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F19', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F19.Hide_GPP_F19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F19', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F19.Hide_GPP_F19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F19', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F19.Hide_GPP_F19 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F19', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F19.Hide_GPP_F19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F19', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F19', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F19.Hide_GPP_F19 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F19', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F19.Hide_GPP_F19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F19', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F19', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F19', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F19', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F19', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F19', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F19.Hide_GPP_F19 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F19', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F19', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F19', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F19', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F19', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F19.Hide_GPP_F19 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F20', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F20', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F20.Hide_GPP_F20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F20', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F20.Hide_GPP_F20 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F20', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F20.Hide_GPP_F20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F20', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F20.Hide_GPP_F20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F20', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F20.Hide_GPP_F20 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F20', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F20.Hide_GPP_F20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F20', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F20', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F20.Hide_GPP_F20 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F20', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F20.Hide_GPP_F20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F20', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F20', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F20', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F20', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F20', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F20', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F20.Hide_GPP_F20 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F20', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F20', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F20', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F20', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F20', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F20.Hide_GPP_F20 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F21', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F21', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F21.Hide_GPP_F21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F21', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F21.Hide_GPP_F21 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F21', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F21.Hide_GPP_F21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F21', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F21.Hide_GPP_F21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F21', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F21.Hide_GPP_F21 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F21', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F21.Hide_GPP_F21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F21', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F21', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F21.Hide_GPP_F21 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F21', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F21.Hide_GPP_F21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F21', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F21', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F21', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F21', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F21', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F21', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F21.Hide_GPP_F21 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F21', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F21', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F21', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F21', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F21', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F21.Hide_GPP_F21 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F22', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F22', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F22.Hide_GPP_F22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F22', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F22.Hide_GPP_F22 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F22', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F22.Hide_GPP_F22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F22', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F22.Hide_GPP_F22 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F22', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F22.Hide_GPP_F22 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F22', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F22.Hide_GPP_F22 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F22', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F22', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F22.Hide_GPP_F22 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F22', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F22.Hide_GPP_F22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F22', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F22', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F22', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F22', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F22', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F22', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F22', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F22.Hide_GPP_F22 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F22', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F22', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F22', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F22', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F22', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F22', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F22.Hide_GPP_F22 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_F23', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_F23', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F23.Hide_GPP_F23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_F23', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_F23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F23.Hide_GPP_F23 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_F23', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_F23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F23.Hide_GPP_F23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_F23', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_F23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F23.Hide_GPP_F23 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_F23', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_F23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F23.Hide_GPP_F23 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_F23', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_F23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F23.Hide_GPP_F23 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_F23', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_F23', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F23.Hide_GPP_F23 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_F23', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_F23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F23.Hide_GPP_F23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_F23', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_F23', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_F23', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_F23', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_F23', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_F23', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_F23', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_F23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F23.Hide_GPP_F23 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_F23', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_F23', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_F23', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_F23', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_F23', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_F23', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_F23.Hide_GPP_F23 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D00', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D00', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D00.Hide_GPP_D00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D00', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D00.Hide_GPP_D00 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D00', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D00.Hide_GPP_D00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D00', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D00.Hide_GPP_D00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D00', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D00.Hide_GPP_D00 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D00', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D00.Hide_GPP_D00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D00', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D00', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D00.Hide_GPP_D00 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D00', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D00.Hide_GPP_D00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D00', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D00', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D00', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D00', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D00', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D00', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D00.Hide_GPP_D00 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D00', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D00', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D00', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D00', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D00', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D00.Hide_GPP_D00 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D01', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D01', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D01.Hide_GPP_D01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D01', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D01.Hide_GPP_D01 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D01', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D01.Hide_GPP_D01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D01', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D01.Hide_GPP_D01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D01', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D01.Hide_GPP_D01 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D01', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D01.Hide_GPP_D01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D01', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D01', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D01.Hide_GPP_D01 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D01', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D01.Hide_GPP_D01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D01', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D01', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D01', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D01', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D01', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D01', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D01.Hide_GPP_D01 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D01', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D01', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D01', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D01', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D01', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D01.Hide_GPP_D01 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D02', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D02', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D02.Hide_GPP_D02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D02', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D02.Hide_GPP_D02 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D02', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D02.Hide_GPP_D02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D02', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D02.Hide_GPP_D02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D02', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D02.Hide_GPP_D02 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D02', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D02.Hide_GPP_D02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D02', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D02', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D02.Hide_GPP_D02 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D02', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D02.Hide_GPP_D02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D02', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D02', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D02', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D02', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D02', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D02', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D02.Hide_GPP_D02 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D02', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D02', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D02', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D02', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D02', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D02.Hide_GPP_D02 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D03', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D03', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D03.Hide_GPP_D03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D03', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D03.Hide_GPP_D03 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D03', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D03.Hide_GPP_D03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D03', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D03.Hide_GPP_D03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D03', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D03.Hide_GPP_D03 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D03', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D03.Hide_GPP_D03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D03', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D03', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D03.Hide_GPP_D03 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D03', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D03.Hide_GPP_D03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D03', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D03', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D03', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D03', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D03', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D03', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D03.Hide_GPP_D03 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D03', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D03', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D03', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D03', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D03', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D03.Hide_GPP_D03 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D04', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D04', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D04.Hide_GPP_D04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D04', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D04.Hide_GPP_D04 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D04', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D04.Hide_GPP_D04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D04', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D04.Hide_GPP_D04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D04', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D04.Hide_GPP_D04 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D04', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D04.Hide_GPP_D04 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D04', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D04', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D04.Hide_GPP_D04 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D04', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D04.Hide_GPP_D04 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D04', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D04', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D04', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D04', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D04', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D04', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D04', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D04.Hide_GPP_D04 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D04', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D04', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D04', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D04', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D04', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D04', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D04.Hide_GPP_D04 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D05', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D05', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D05.Hide_GPP_D05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D05', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D05.Hide_GPP_D05 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D05', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D05.Hide_GPP_D05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D05', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D05.Hide_GPP_D05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D05', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D05.Hide_GPP_D05 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D05', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D05.Hide_GPP_D05 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D05', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D05', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D05.Hide_GPP_D05 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D05', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D05.Hide_GPP_D05 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D05', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D05', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D05', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D05', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D05', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D05', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D05', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D05.Hide_GPP_D05 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D05', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D05', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D05', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D05', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D05', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D05', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D05.Hide_GPP_D05 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D06', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D06', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D06.Hide_GPP_D06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D06', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D06.Hide_GPP_D06 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D06', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D06.Hide_GPP_D06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D06', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D06.Hide_GPP_D06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D06', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D06.Hide_GPP_D06 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D06', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D06.Hide_GPP_D06 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D06', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D06', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D06.Hide_GPP_D06 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D06', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D06.Hide_GPP_D06 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D06', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D06', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D06', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D06', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D06', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D06', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D06', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D06.Hide_GPP_D06 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D06', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D06', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D06', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D06', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D06', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D06', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D06.Hide_GPP_D06 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D07', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D07', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D07.Hide_GPP_D07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D07', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D07.Hide_GPP_D07 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D07', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D07.Hide_GPP_D07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D07', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D07.Hide_GPP_D07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D07', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D07.Hide_GPP_D07 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D07', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D07.Hide_GPP_D07 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D07', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D07', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D07.Hide_GPP_D07 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D07', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D07.Hide_GPP_D07 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D07', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D07', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D07', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D07', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D07', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D07', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D07', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D07.Hide_GPP_D07 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D07', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D07', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D07', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D07', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D07', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D07', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D07.Hide_GPP_D07 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D08', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D08', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D08.Hide_GPP_D08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D08', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D08.Hide_GPP_D08 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D08', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D08.Hide_GPP_D08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D08', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D08.Hide_GPP_D08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D08', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D08.Hide_GPP_D08 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D08', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D08.Hide_GPP_D08 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D08', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D08', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D08.Hide_GPP_D08 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D08', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D08.Hide_GPP_D08 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D08', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D08', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D08', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D08', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D08', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D08', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D08', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D08.Hide_GPP_D08 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D08', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D08', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D08', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D08', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D08', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D08', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D08.Hide_GPP_D08 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D09', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D09', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D09.Hide_GPP_D09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D09', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D09.Hide_GPP_D09 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D09', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D09.Hide_GPP_D09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D09', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D09.Hide_GPP_D09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D09', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D09.Hide_GPP_D09 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D09', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D09.Hide_GPP_D09 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D09', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D09', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D09.Hide_GPP_D09 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D09', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D09.Hide_GPP_D09 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D09', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D09', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D09', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D09', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D09', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D09', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D09', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D09.Hide_GPP_D09 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D09', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D09', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D09', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D09', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D09', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D09', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D09.Hide_GPP_D09 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D10', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D10', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D10.Hide_GPP_D10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D10', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D10.Hide_GPP_D10 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D10', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D10.Hide_GPP_D10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D10', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D10.Hide_GPP_D10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D10', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D10.Hide_GPP_D10 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D10', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D10.Hide_GPP_D10 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D10', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D10', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D10.Hide_GPP_D10 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D10', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D10.Hide_GPP_D10 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D10', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D10', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D10', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D10', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D10', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D10', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D10', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D10.Hide_GPP_D10 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D10', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D10', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D10', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D10', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D10', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D10', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D10.Hide_GPP_D10 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D11', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D11', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D11.Hide_GPP_D11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D11', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D11.Hide_GPP_D11 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D11', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D11.Hide_GPP_D11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D11', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D11.Hide_GPP_D11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D11', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D11.Hide_GPP_D11 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D11', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D11.Hide_GPP_D11 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D11', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D11', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D11.Hide_GPP_D11 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D11', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D11.Hide_GPP_D11 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D11', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D11', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D11', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D11', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D11', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D11', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D11', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D11.Hide_GPP_D11 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D11', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D11', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D11', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D11', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D11', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D11', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D11.Hide_GPP_D11 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D12', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D12', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D12.Hide_GPP_D12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D12', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D12.Hide_GPP_D12 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D12', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D12.Hide_GPP_D12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D12', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D12.Hide_GPP_D12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D12', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D12.Hide_GPP_D12 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D12', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D12.Hide_GPP_D12 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D12', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D12', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D12.Hide_GPP_D12 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D12', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D12.Hide_GPP_D12 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D12', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D12', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D12', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D12', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D12', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D12', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D12', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D12.Hide_GPP_D12 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D12', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D12', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D12', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D12', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D12', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D12', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D12.Hide_GPP_D12 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D13', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D13', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D13.Hide_GPP_D13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D13', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D13.Hide_GPP_D13 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D13', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D13.Hide_GPP_D13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D13', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D13.Hide_GPP_D13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D13', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D13.Hide_GPP_D13 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D13', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D13.Hide_GPP_D13 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D13', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D13', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D13.Hide_GPP_D13 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D13', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D13.Hide_GPP_D13 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D13', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D13', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D13', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D13', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D13', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D13', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D13', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D13.Hide_GPP_D13 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D13', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D13', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D13', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D13', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D13', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D13', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D13.Hide_GPP_D13 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D14', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D14', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D14.Hide_GPP_D14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D14', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D14.Hide_GPP_D14 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D14', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D14.Hide_GPP_D14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D14', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D14.Hide_GPP_D14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D14', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D14.Hide_GPP_D14 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D14', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D14.Hide_GPP_D14 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D14', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D14', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D14.Hide_GPP_D14 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D14', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D14.Hide_GPP_D14 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D14', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D14', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D14', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D14', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D14', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D14', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D14', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D14.Hide_GPP_D14 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D14', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D14', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D14', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D14', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D14', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D14', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D14.Hide_GPP_D14 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D15', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D15', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D15.Hide_GPP_D15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D15', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D15.Hide_GPP_D15 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D15', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D15.Hide_GPP_D15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D15', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D15.Hide_GPP_D15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D15', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D15.Hide_GPP_D15 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D15', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D15.Hide_GPP_D15 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D15', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D15', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D15.Hide_GPP_D15 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D15', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D15.Hide_GPP_D15 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D15', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D15', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D15', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D15', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D15', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D15', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D15', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D15.Hide_GPP_D15 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D15', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D15', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D15', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D15', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D15', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D15', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D15.Hide_GPP_D15 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D16', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D16', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D16.Hide_GPP_D16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D16', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D16.Hide_GPP_D16 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D16', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D16.Hide_GPP_D16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D16', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D16.Hide_GPP_D16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D16', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D16.Hide_GPP_D16 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D16', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D16.Hide_GPP_D16 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D16', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D16', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D16.Hide_GPP_D16 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D16', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D16.Hide_GPP_D16 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D16', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D16', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D16', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D16', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D16', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D16', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D16', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D16.Hide_GPP_D16 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D16', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D16', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D16', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D16', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D16', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D16', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D16.Hide_GPP_D16 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D17', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D17', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D17.Hide_GPP_D17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D17', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D17.Hide_GPP_D17 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D17', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D17.Hide_GPP_D17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D17', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D17.Hide_GPP_D17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D17', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D17.Hide_GPP_D17 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D17', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D17.Hide_GPP_D17 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D17', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D17', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D17.Hide_GPP_D17 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D17', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D17.Hide_GPP_D17 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D17', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D17', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D17', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D17', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D17', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D17', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D17', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D17.Hide_GPP_D17 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D17', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D17', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D17', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D17', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D17', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D17', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D17.Hide_GPP_D17 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D18', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D18', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D18.Hide_GPP_D18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D18', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D18.Hide_GPP_D18 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D18', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D18.Hide_GPP_D18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D18', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D18.Hide_GPP_D18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D18', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D18.Hide_GPP_D18 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D18', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D18.Hide_GPP_D18 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D18', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D18', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D18.Hide_GPP_D18 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D18', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D18.Hide_GPP_D18 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D18', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D18', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D18', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D18', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D18', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D18', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D18', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D18.Hide_GPP_D18 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D18', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D18', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D18', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D18', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D18', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D18', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D18.Hide_GPP_D18 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D19', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D19', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D19.Hide_GPP_D19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D19', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D19.Hide_GPP_D19 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D19', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D19.Hide_GPP_D19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D19', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D19.Hide_GPP_D19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D19', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D19.Hide_GPP_D19 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D19', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D19.Hide_GPP_D19 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D19', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D19', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D19.Hide_GPP_D19 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D19', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D19.Hide_GPP_D19 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D19', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D19', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D19', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D19', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D19', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D19', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D19', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D19.Hide_GPP_D19 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D19', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D19', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D19', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D19', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D19', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D19', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D19.Hide_GPP_D19 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D20', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D20', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D20.Hide_GPP_D20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D20', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D20.Hide_GPP_D20 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D20', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D20.Hide_GPP_D20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D20', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D20.Hide_GPP_D20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D20', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D20.Hide_GPP_D20 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D20', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D20.Hide_GPP_D20 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D20', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D20', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D20.Hide_GPP_D20 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D20', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D20.Hide_GPP_D20 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D20', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D20', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D20', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D20', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D20', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D20', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D20', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D20.Hide_GPP_D20 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D20', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D20', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D20', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D20', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D20', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D20', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D20.Hide_GPP_D20 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D21', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D21', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D21.Hide_GPP_D21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D21', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D21.Hide_GPP_D21 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D21', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D21.Hide_GPP_D21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D21', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D21.Hide_GPP_D21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D21', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D21.Hide_GPP_D21 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D21', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D21.Hide_GPP_D21 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D21', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D21', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D21.Hide_GPP_D21 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D21', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D21.Hide_GPP_D21 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D21', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D21', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D21', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D21', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D21', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D21', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D21', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D21.Hide_GPP_D21 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D21', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D21', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D21', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D21', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D21', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D21', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D21.Hide_GPP_D21 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D22', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D22', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D22.Hide_GPP_D22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D22', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D22.Hide_GPP_D22 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D22', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D22.Hide_GPP_D22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D22', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D22.Hide_GPP_D22 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D22', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D22.Hide_GPP_D22 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D22', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D22.Hide_GPP_D22 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D22', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D22', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D22.Hide_GPP_D22 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D22', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D22.Hide_GPP_D22 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D22', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D22', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D22', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D22', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D22', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D22', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D22', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D22', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D22.Hide_GPP_D22 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D22', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D22', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D22', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D22', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D22', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D22', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D22.Hide_GPP_D22 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_D23', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_D23', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D23.Hide_GPP_D23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_D23', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_D23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D23.Hide_GPP_D23 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_D23', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_D23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D23.Hide_GPP_D23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_D23', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_D23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D23.Hide_GPP_D23 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_D23', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_D23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D23.Hide_GPP_D23 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_D23', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_D23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D23.Hide_GPP_D23 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_D23', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_D23', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D23.Hide_GPP_D23 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_D23', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_D23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D23.Hide_GPP_D23 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_D23', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_D23', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_D23', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_D23', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_D23', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_D23', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_D23', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_D23', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D23.Hide_GPP_D23 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_D23', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_D23', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_D23', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_D23', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_D23', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_D23', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_D23.Hide_GPP_D23 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_T00', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_T00', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_T00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T00.Hide_GPP_T00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_T00', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_T00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T00.Hide_GPP_T00 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_T00', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_T00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T00.Hide_GPP_T00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_T00', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_T00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T00.Hide_GPP_T00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_T00', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_T00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T00.Hide_GPP_T00 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_T00', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_T00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T00.Hide_GPP_T00 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_T00', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_T00', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_T00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T00.Hide_GPP_T00 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_T00', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_T00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T00.Hide_GPP_T00 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_T00', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_T00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_T00', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_T00', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_T00', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_T00', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_T00', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_T00', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T00.Hide_GPP_T00 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_T00', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_T00', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_T00', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_T00', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_T00', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_T00', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T00.Hide_GPP_T00 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_T01', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_T01', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_T01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T01.Hide_GPP_T01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_T01', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_T01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T01.Hide_GPP_T01 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_T01', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_T01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T01.Hide_GPP_T01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_T01', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_T01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T01.Hide_GPP_T01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_T01', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_T01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T01.Hide_GPP_T01 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_T01', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_T01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T01.Hide_GPP_T01 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_T01', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_T01', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_T01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T01.Hide_GPP_T01 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_T01', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_T01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T01.Hide_GPP_T01 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_T01', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_T01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_T01', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_T01', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_T01', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_T01', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_T01', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_T01', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T01.Hide_GPP_T01 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_T01', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_T01', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_T01', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_T01', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_T01', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_T01', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T01.Hide_GPP_T01 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_T02', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_T02', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_T02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T02.Hide_GPP_T02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_T02', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_T02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T02.Hide_GPP_T02 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_T02', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_T02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T02.Hide_GPP_T02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_T02', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_T02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T02.Hide_GPP_T02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_T02', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_T02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T02.Hide_GPP_T02 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_T02', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_T02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T02.Hide_GPP_T02 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_T02', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_T02', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_T02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T02.Hide_GPP_T02 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_T02', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_T02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T02.Hide_GPP_T02 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_T02', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_T02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_T02', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_T02', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_T02', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_T02', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_T02', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_T02', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T02.Hide_GPP_T02 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_T02', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_T02', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_T02', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_T02', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_T02', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_T02', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T02.Hide_GPP_T02 == 0'}, {'length': 5, 'type': 'Combo', 'cname': 'GPIOPADMode_GPP_T03', 'name': 'PadMode', 'help': 'GPIO PAD Mode. If GPIO is set to one of NativeX modes then following settings are not applicable and can be skipped:- Interrupt related settings, Host Software Ownership, Output/Input enabling/disabling, Output lock', 'option': '0x0:Hardware Default, 0x1:GPIO control of the pad, 0x3:Native function 1, 0x5:Native function 2, 0x7:Native function 3, 0x9:Native function 4, 0xB:Native function 5, 0xD:Native function 6', 'page': 'GIO_GPP_T03', 'path': 'GPIO_CFG_DATA.GpioPinConfig0_GPP_T03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T03.Hide_GPP_T03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOHostSoftPadOwn_GPP_T03', 'name': 'HostSoftPadOwn', 'help': 'GPIO Host Software Pad Ownership. This setting affects GPIO interrupt status registers. Depending on chosen ownership some GPIO Interrupt status register get updated and other masked:- - HOST ownership to ACPI - Use this setting if pad is not going to be used by GPIO OS driver. If GPIO is configured to generate SCI/SMI/NMI then this setting must be used for interrupts to work. - HOST ownership to GPIO Driver mode - Use this setting only if GPIO pad should be controlled by GPIO OS Driver. GPIO OS Driver will be able to control the pad if appropriate entry in ACPI exists.', 'option': '0x0:Host Ownership Default(Leave ownership value unmodified), 0x1:Host ownership to ACPI, 0x3:Host ownership to GPIO Driver mode', 'page': 'GIO_GPP_T03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T03.Hide_GPP_T03 == 0'}, {'length': 6, 'type': 'Combo', 'cname': 'GPIODirection_GPP_T03', 'name': 'Direction', 'help': 'GPIO Host Software Pad Ownership: - DirDefault = Leave pad direction setting unmodified, - DirInOut = Set pad for both output and input, - DirInInvOut = Set pad for both output and input with inversion, - DirIn = Set pad for input only, - DirInInv = Set pad for input with inversion, - DirOut = Set pad for output only, - DirNone  = Disable both output and input.', 'option': '0x0:DirDefault, 0x9:DirInOut, 0x19:DirInInvOut, 0xB:DirIn, 0x1B:DirInInv, 0x5:DirOut, 0x7:DirNone', 'page': 'GIO_GPP_T03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T03.Hide_GPP_T03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'GPIOOutputState_GPP_T03', 'name': 'OutputState', 'help': 'GPIO Output State.This field is relevant only if output is enabled:- - OutDefault = Leave output value unmodified, - OutLow = Set output to low, - OutHigh = Set output to high', 'option': '0x0:OutDefault, 0x1:OutLow, 0x3:OutHigh', 'page': 'GIO_GPP_T03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T03.Hide_GPP_T03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOInterruptConfig_GPP_T03', 'name': 'InterruptConfig', 'help': "GPIO Interrupt Configuration - This setting is applicable only if pad is in GPIO mode and has input enabled. GPIO_INT_CONFIG allows to choose which interrupt is generated (IOxAPIC/SCI/SMI/NMI) and how it is triggered (edge or level). Refer to PADCFG_DW0 register description in EDS for details on this settings. Field from GpioIntNmi to GpioIntApic can be OR'ed with GpioIntLevel to GpioIntBothEdge to describe an interrupt e.g. GpioIntApic | GpioIntLevel. If GPIO is set to cause an SCI then also GPI_GPE_EN is enabled for this pad. If GPIO is set to cause an NMI then also GPI_NMI_EN is enabled for this pad. Not all GPIO are capable of generating an SMI or NMI interrupt. When routing GPIO to cause an IOxAPIC interrupt care must be taken, as this interrupt cannot be shared and its IRQn number is not configurable. If GPIO is under GPIO OS driver control and appropriate ACPI GpioInt descriptor exist then use only trigger type setting (from GpioIntLevel to GpioIntBothEdge). This type of GPIO Driver interrupt doesn't have any additional routing setting required to be set by BIOS. Interrupt is handled by GPIO OS Driver. - IntDefault = Leave value of interrupt routing unmodified, - IntDisable = Disable IOxAPIC/SCI/SMI/NMI interrupt generation, - IntNmi = Enable NMI interrupt only, - IntSmi = Enable SMI interrupt only, - IntSci = Enable SCI interrupt only, - IntApic = Enable IOxAPIC interrupt only, - IntLevel = Set interrupt as level triggered, - IntEdge = Set interrupt as edge triggered, - IntLvlEdgDis = Disable interrupt trigger, - IntBothEdge = Set interrupt as both edge triggered", 'option': '0x0:IntDefault , 0x1:IntDisable, 0x3:IntNmi , 0x5:IntSmi, 0x9:IntSci, 0x11:IntApic, 0x20:IntLevel, 0x60:IntEdge, 0xA0:IntLvlEdgDis, 0xE0:IntBothEdge, 0x31:IntLevel | IntApic, 0x29:IntLevel | IntSci, 0x25:IntLevel | IntSmi, 0x69:IntEdge | IntSci, 0x71:IntEdge | IntApic, 0x65:IntEdge | IntSmi, 0x60:IntEdge | IntDefault, 0xA1:IntLvlEdgDis | IntDisable', 'page': 'GIO_GPP_T03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T03.Hide_GPP_T03 == 0'}, {'length': 8, 'type': 'Combo', 'cname': 'GPIOResetConfig_GPP_T03', 'name': 'Power/ResetConfig', 'help': 'GPIO Power Configuration. This allows to set GPIO Reset type which will be used to reset certain GPIO settings. - ResetDefault = Leave value of pad reset unmodified, - ResumeReset = Pad setting will reset on DeepSx transition and G3, - HostDeepReset = Pad settings will reset on:Warm/Cold/Global reset,DeepSx transition,G3, - PlatformReset = Pad settings will reset on:S3/S4/S5 transition, Warm/Cold/Global reset, DeepSx transition, G3 - DswReset = Pad settings will reset on G3', 'option': '0x0:ResetDefault, 0x1:ResetResume, 0x3:HostDeepReset, 0x5:PlatformReset, 0x7:DswReset', 'page': 'GIO_GPP_T03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T03.Hide_GPP_T03 == 0'}, {'length': 9, 'type': 'Combo', 'cname': 'GPIOElectricalCfg_GPP_T03', 'name': 'GPIO ElectricalCfg', 'help': 'GPIO Electrical Configuration. Set GPIO termination and Pad Tolerance.(applicable only for some pads):- - TermDefault = Leave termination setting unmodified, - TermNone = None, - TermWpd5K = 5kOhm weak pull-down, - TermWpd20K = 20kOhm weak pull-down, - TermWpu1K = 1kOhm weak pull-up, - TermWpu2K = 2kOhm weak pull-up, - TermWpu5K = 5kOhm weak pull-up, - TermWpu20K = 20kOhm weak pull-up, - TermWpu1K2K = 1kOhm & 2kOhm weak pull-up, - TermNative = Native function. This setting is applicable only to some native modes, - NoTolerance1v8 = Disable 1.8V pad tolerance, Tolerance1v8 = Enable 1.8V pad tolerance', 'option': '0x0:TermDefault, 0x1:TermNone, 0x5:TermWpd5K, 0x9:TermWpd20K, 0x13:TermWpu1K, 0x17:TermWpu2K, 0x15:TermWpu5K, 0x19:TermWpu20K, 0x1B:TermWpu1K2K, 0x1F:TermNative, 0x20:NoTolerance1v8, 0x60:Tolerance1v8', 'page': 'GIO_GPP_T03', 'path': 'GPIO_CFG_DATA.GpioPinConfig1_GPP_T03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T03.Hide_GPP_T03 == 0'}, {'length': 4, 'type': 'Combo', 'cname': 'GPIOLockConfig_GPP_T03', 'name': 'LockConfig', 'help': 'GPIO Lock Configuration. - LockDefault = Leave value of pad as-is, - PadConfigLock = Lock Pad configuration, - PadConfigUnlock = Leave Pad configuration unlocked, - PadLock = Lock both Pad configuration and output control, - OutputStateUnlock = Leave Pad output control unlocked, PadUnlock = Leave both Pad configuration and output control unlocked', 'option': '0x0:LockDefault, 0x1:PadConfigLock, 0x3:PadConfigUnlock, 0x5:PadLock , 0xC:OutputStateUnlock, 0xF:PadUnlock', 'page': 'GIO_GPP_T03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T03.Hide_GPP_T03 == 0'}, {'length': 2, 'type': 'Combo', 'cname': 'RxRaw_GPP_T03', 'name': 'RxRaw', 'help': " This bit determines if the selected pad state is being overridden to '1'.", 'option': '0x0:Default, 0x1:NoOverride, 0x3:RxDrive 1 internally', 'page': 'GIO_GPP_T03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved1_GPP_T03', 'name': 'Reserved1', 'help': '', 'option': '', 'page': 'GIO_GPP_T03', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'PadNum_GPP_T03', 'name': 'PadNum', 'help': '', 'option': '', 'page': 'GIO_GPP_T03', 'condition': ''}, {'length': 5, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x1F)', 'cname': 'GrpIdx_GPP_T03', 'name': 'GrpIdx', 'help': '', 'option': '', 'page': 'GIO_GPP_T03', 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T03.Hide_GPP_T03 == 1'}, {'length': 1, 'type': 'Reserved', 'cname': 'Reserved2_GPP_T03', 'name': 'Reserved2', 'help': '', 'option': '', 'page': 'GIO_GPP_T03', 'condition': ''}, {'length': 1, 'type': 'Reserved', 'cname': 'Hide_GPP_T03', 'name': 'Hide', 'help': '', 'option': '', 'page': 'GIO_GPP_T03', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'GPIOSkip_GPP_T03', 'name': 'GPIO Skip', 'help': 'ENABLE- Skip GPIO PAD programming (keep the defaults). DISABLE- Program GPIO PAD configuration.', 'option': '$EN_DIS', 'page': 'GIO_GPP_T03', 'order': 0, 'condition': '$GPIO_CFG_DATA.GpioPinConfig1_GPP_T03.Hide_GPP_T03 == 0'}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'PLT', 'path': 'PLATFORMID_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'PLT', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'Combo', 'cname': 'PlatformId', 'name': 'Platform ID', 'help': 'Select platform ID', 'option': '0:Board  0,  1:Board  1,  2:Board  2,  3:Board  3,  4:Board  4,  5:Board  5,  6:Board  6,  7:Board  7, 8:Board  8,  9:Board  9, 10:Board 10, 11:Board 11, 12:Board 12, 13:Board 13, 14:Board 14, 15:Board 15, 16:Board 16, 17:Board 17, 18:Board 18, 19:Board 19, 20:Board 20, 21:Board 21, 22:Board 22, 23:Board 23, 24:Board 24, 25:Board 25, 26:Board 26, 27:Board 27, 28:Board 28, 29:Board 29, 30:Board 30, 31:Board 31', 'page': 'PLT', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'Reserved', 'cname': 'PseRsvd', 'name': '', 'help': '', 'option': '', 'page': 'PLT', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'PLT', 'path': 'PLAT_NAME_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'PLT', 'condition': ''}, {'length': 64, 'value': "'", 'type': 'EditText', 'cname': 'PlatformName', 'name': 'Platform Name', 'help': 'Specify the platform name, a maximum of 8 characters', 'option': '', 'page': 'PLT', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'GEN', 'path': 'GEN_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'GEN', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x00000000,0xFFFFFFFF)', 'cname': 'DebugPrintLevel', 'name': 'Debug Print Level', 'help': 'Specify debug print level', 'option': '', 'page': 'GEN', 'condition': ''}, {'length': 32, 'value': "'", 'type': 'EditText', 'cname': 'PayloadId', 'name': 'Payload ID', 'help': 'Specify payload ID string. Empty will boot default payload. Otherwise, boot specified payload ID in multi-payload binary.', 'option': '', 'page': 'GEN', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'OsCrashMemorySize', 'name': 'OS Crash Memory Size', 'help': 'Specify reserved memory size for OS to save OS crash data. The reserved memory address should be same across reset.', 'option': '0:0MB, 1:4MB, 2:8MB, 3:16MB, 4:32MB, 5:64MB', 'page': 'GEN', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': 'EnableCrashMode', 'name': 'Enable Crash Mode', 'help': 'Enable/Disable Crash Mode. Boot into Crash OS only when crash mode is enabled.', 'option': '$EN_DIS', 'page': 'GEN', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'RpmbKeyProvisioning', 'name': 'RpmbKeyProvisioning', 'help': 'Enable or disable Rpmb Key Provisioning', 'option': '$EN_DIS', 'page': 'GEN', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Combo', 'cname': 'VbtImageId', 'name': 'Platform VBT table', 'help': 'Specify image ID for desired VBT binary', 'option': '1:VBT Binary 1, 2:VBT Binary 2', 'page': 'GEN', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'CurrentBoot', 'name': 'Current Boot Option', 'help': 'Set the current boot option. It indicates the boot option index (0-15) to be tried first on the boot flow. AUTO allows platform to set current boot option using platform specific policy.', 'option': '31:AUTO, 0:0, 1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8, 9:9, 10:10, 11:11, 10:10, 11:11, 12:12, 13:13, 14:14, 15:15', 'page': 'OS', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootToShell', 'name': 'Boot to OsLoader shell', 'help': 'By default OsLoader payload shell is only available in debug build. Enable BootToShell will make OsLoader Payload have same behavior with debug build in the release build.', 'option': '$EN_DIS', 'page': 'OS', 'condition': ''}, {'length': 24, 'value': 'x', 'type': 'Reserved', 'cname': 'Dummy', 'name': '', 'help': '', 'option': '', 'page': 'OS', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'TCC', 'path': 'TCC_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'TCC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TccEnable', 'name': 'Intel(R) TCC Mode', 'help': 'Enable/Disable Intel(R) Time Coordinated Computing Mode. When enabled, this will modify system settings to improve real-time performance.', 'option': '0:Disabled, 1:Enabled', 'page': 'TCC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TccTuning', 'name': 'Data Streams Optimizer', 'help': 'Enable/Disable Data Streams Optimizer (DSO). Enable will utilize DSO Subregion to tune system. DSO settings supersede Intel(R) TCC Mode settings that overlap between the two.', 'option': '0:Disabled, 1:Enabled', 'page': 'TCC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TccSoftSram', 'name': 'Software SRAM', 'help': 'Enable/Disable Software SRAM. Enable will allocate 1 way of LLC; if Cache Configuration subregion is available, it will allocate based on the subregion.', 'option': '0:Disabled, 1:Enabled', 'page': 'TCC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TccErrorLog', 'name': 'Error Log', 'help': 'Enable or Disable Error Log. Enable will record errors related to Intel(R) TCC and save them to memory.', 'option': '0:Disabled, 1:Enabled', 'page': 'TCC', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'PLDSEL', 'path': 'PLDSEL_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'PLDSEL', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'PadGroup', 'name': 'Pad Group', 'help': 'Specify GPIO Pad Group', 'option': '0x0:GROUP_I, 0x1:GROUP_R, 0x2:GROUP_J, 0x5:GROUP_B, 0x6:GROUP_G, 0x7:GROUP_H, 0xA:GROUP_A, 0xD:GROUP_S, 0xE:GROUP_E, 0xF:GROUP_K, 0x10:GROUP_F, 0x11:GROUP_D', 'page': 'PLDSEL', 'path': 'PLDSEL_CFG_DATA.PldSelGpio', 'condition': '($PLDSEL_CFG_DATA.PldSelGpio.Enable == 1)'}, {'length': 8, 'type': 'EditNum, DEC, (0,23)', 'cname': 'PinNumber', 'name': 'Pin Number', 'help': 'Specify GPIO Pin Number (0-23) on the selected Group', 'option': '', 'page': 'PLDSEL', 'condition': '($PLDSEL_CFG_DATA.PldSelGpio.Enable == 1)'}, {'length': 1, 'type': 'Combo', 'cname': 'Enable', 'name': "Enable GPIO Payload Selection when PayloadId is 'AUTO'", 'help': "Enable GPIO Payload Selection when PayloadId is 'AUTO'", 'option': '$EN_DIS', 'page': 'PLDSEL', 'condition': ''}, {'length': 1, 'type': 'Combo', 'cname': 'PinPolarity', 'name': 'Pin Polarity', 'help': 'GPIO Pin Polarity to trigger Payload switching When pin polarity matches the value, OS Loader will be used. Otherwise, UEFI Payload is selected.', 'option': '0:Active High, 1:Active Low', 'page': 'PLDSEL', 'condition': '($PLDSEL_CFG_DATA.PldSelGpio.Enable == 1)'}, {'length': 14, 'type': 'Reserved', 'cname': 'Rsvd1', 'name': 'Reserved', 'help': '', 'option': '', 'page': 'PLDSEL', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'OS_0', 'path': 'BOOT_OPTION_CFG_DATA_0', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'OS_0', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'ImageType_0', 'name': 'Image Type', 'help': "Specify boot image type. Extra and PreOS image type indicates this option is not a standalone boot option. Instead, it provides additional information for the previous boot option. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL. 'Not used' indicates this option will be ignored.", 'option': '0:Default, 1:Android, 2:ClearLinux, 3:Acrn, 4:Fastboot, 0x1E:Extra image, 0x9E:PreOS image, 0xFF:Not used', 'page': 'OS_0', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootFlags_0', 'name': 'Boot Flags', 'help': 'Specify boot flags (options) When extra image or PreOS image is selected, need config them in next boot option with proper image type. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL.', 'option': '0:Normal, 4:PreOS support, 8:Extra image support, 12:PreOS and extra image support, 16:Mender support, 20:PreOS and mender support', 'page': 'OS_0', 'condition': '($BOOT_OPTION_CFG_DATA_0.ImageType_0 & 0x1F) < 0x1E'}, {'length': 8, 'value': 'x', 'type': 'Reserved', 'cname': 'Reserved_0', 'name': '', 'help': '', 'option': '', 'page': 'OS_0', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceType_0', 'name': 'Boot Device type', 'help': 'Specify boot device type', 'option': '0:SATA, 1:SD, 2:EMMC, 3:UFS, 4:SPI, 5:USB, 6:NVME, 7:MEMORY', 'page': 'OS_0', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_0.ImageType_0 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceInstance_0', 'name': 'Boot Device instance', 'help': 'Specify boot device instance when then are multiple instances', 'option': '0:Device 0, 1:Device 1, 2:Device 2, 3:Device 3', 'page': 'OS_0', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_0.ImageType_0 & 0x1F) < 0x1E'}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'HwPart_0', 'name': 'Hardware Partition', 'help': 'Specify hardware partition number. If boot device type is SPI, the hardware partition refers to SPI flash region- 0-Descriptor, 1-BIOS, 2-ME, 3-GbE, 4-PDR Regions. If boot device type is SATA, the hardware partition refers to the SATA port number on the system; setting to 255 uses the first detected SATA device. If boot device type is USB, the hardware partition refers to the order in which the USB block devices are detected when multiple USB block devices are connected.', 'option': '0:User Partition, 1:Boot Partition 1, 2:Boot Partition 2, 3:Boot Partition 3, 4:Boot Partition 4, 5:Boot Partition 5, 6:Boot Partition 6, 7:Boot Partition 7, 255:SATA Auto 255', 'page': 'OS_0', 'condition': '($BOOT_OPTION_CFG_DATA_0.ImageType_0 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'EditNum, DEC, (0,255)', 'cname': 'SwPart_0', 'name': 'Software Partition', 'help': "Specify software partition number. A value of 255 indicates raw booting via the absolute LBA instead of a relative LBA (e.g. relative to a software partition's starting LBA).", 'option': '', 'page': 'OS_0', 'condition': '($BOOT_OPTION_CFG_DATA_0.ImageType_0 & 0x1F) < 0x1F'}, {'length': 8, 'type': 'Combo', 'cname': 'FsType_0', 'name': 'File System Type', 'help': 'Image is loaded from file system instead of raw data', 'option': '0:FAT, 1:EXT2, 2:AUTO, 3:RAW', 'page': 'OS_0', 'condition': '($BOOT_OPTION_CFG_DATA_0.ImageType_0 & 0x1F) < 0x1E'}, {'length': 128, 'value': "'", 'type': 'EditText', 'cname': 'BootImage_0', 'name': 'Normal OS info or LBA address', 'help': 'Specify file name of normal OS or LBA address (16-byte max length). For LBA address, please use HEX prefix "#0x". EX- #0x12345678', 'option': '', 'page': 'OS_0', 'condition': '($BOOT_OPTION_CFG_DATA_0.ImageType_0 & 0x1F) < 0x1F'}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'OS_1', 'path': 'BOOT_OPTION_CFG_DATA_1', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'OS_1', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ImageType_1', 'name': 'Image Type', 'help': "Specify boot image type. Extra and PreOS image type indicates this option is not a standalone boot option. Instead, it provides additional information for the previous boot option. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL. 'Not used' indicates this option will be ignored.", 'option': '0:Default, 1:Android, 2:ClearLinux, 3:Acrn, 4:Fastboot, 0x1E:Extra image, 0x9E:PreOS image, 0xFF:Not used', 'page': 'OS_1', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootFlags_1', 'name': 'Boot Flags', 'help': 'Specify boot flags (options) When extra image or PreOS image is selected, need config them in next boot option with proper image type. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL.', 'option': '0:Normal, 4:PreOS support, 8:Extra image support, 12:PreOS and extra image support, 16:Mender support, 20:PreOS and mender support', 'page': 'OS_1', 'condition': '($BOOT_OPTION_CFG_DATA_1.ImageType_1 & 0x1F) < 0x1E'}, {'length': 8, 'value': 'x', 'type': 'Reserved', 'cname': 'Reserved_1', 'name': '', 'help': '', 'option': '', 'page': 'OS_1', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceType_1', 'name': 'Boot Device type', 'help': 'Specify boot device type', 'option': '0:SATA, 1:SD, 2:EMMC, 3:UFS, 4:SPI, 5:USB, 6:NVME, 7:MEMORY', 'page': 'OS_1', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_1.ImageType_1 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceInstance_1', 'name': 'Boot Device instance', 'help': 'Specify boot device instance when then are multiple instances', 'option': '0:Device 0, 1:Device 1, 2:Device 2, 3:Device 3', 'page': 'OS_1', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_1.ImageType_1 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'HwPart_1', 'name': 'Hardware Partition', 'help': 'Specify hardware partition number. If boot device type is SPI, the hardware partition refers to SPI flash region- 0-Descriptor, 1-BIOS, 2-ME, 3-GbE, 4-PDR Regions. If boot device type is SATA, the hardware partition refers to the SATA port number on the system; setting to 255 uses the first detected SATA device. If boot device type is USB, the hardware partition refers to the order in which the USB block devices are detected when multiple USB block devices are connected.', 'option': '0:User Partition, 1:Boot Partition 1, 2:Boot Partition 2, 3:Boot Partition 3, 4:Boot Partition 4, 5:Boot Partition 5, 6:Boot Partition 6, 7:Boot Partition 7, 255:SATA Auto 255', 'page': 'OS_1', 'condition': '($BOOT_OPTION_CFG_DATA_1.ImageType_1 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'EditNum, DEC, (0,255)', 'cname': 'SwPart_1', 'name': 'Software Partition', 'help': "Specify software partition number. A value of 255 indicates raw booting via the absolute LBA instead of a relative LBA (e.g. relative to a software partition's starting LBA).", 'option': '', 'page': 'OS_1', 'condition': '($BOOT_OPTION_CFG_DATA_1.ImageType_1 & 0x1F) < 0x1F'}, {'length': 8, 'type': 'Combo', 'cname': 'FsType_1', 'name': 'File System Type', 'help': 'Image is loaded from file system instead of raw data', 'option': '0:FAT, 1:EXT2, 2:AUTO, 3:RAW', 'page': 'OS_1', 'condition': '($BOOT_OPTION_CFG_DATA_1.ImageType_1 & 0x1F) < 0x1E'}, {'length': 128, 'value': "'", 'type': 'EditText', 'cname': 'BootImage_1', 'name': 'Normal OS info or LBA address', 'help': 'Specify file name of normal OS or LBA address (16-byte max length). For LBA address, please use HEX prefix "#0x". EX- #0x12345678', 'option': '', 'page': 'OS_1', 'condition': '($BOOT_OPTION_CFG_DATA_1.ImageType_1 & 0x1F) < 0x1F'}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'OS_2', 'path': 'BOOT_OPTION_CFG_DATA_2', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'OS_2', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'ImageType_2', 'name': 'Image Type', 'help': "Specify boot image type. Extra and PreOS image type indicates this option is not a standalone boot option. Instead, it provides additional information for the previous boot option. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL. 'Not used' indicates this option will be ignored.", 'option': '0:Default, 1:Android, 2:ClearLinux, 3:Acrn, 4:Fastboot, 0x1E:Extra image, 0x9E:PreOS image, 0xFF:Not used', 'page': 'OS_2', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootFlags_2', 'name': 'Boot Flags', 'help': 'Specify boot flags (options) When extra image or PreOS image is selected, need config them in next boot option with proper image type. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL.', 'option': '0:Normal, 4:PreOS support, 8:Extra image support, 12:PreOS and extra image support, 16:Mender support, 20:PreOS and mender support', 'page': 'OS_2', 'condition': '($BOOT_OPTION_CFG_DATA_2.ImageType_2 & 0x1F) < 0x1E'}, {'length': 8, 'value': 'x', 'type': 'Reserved', 'cname': 'Reserved_2', 'name': '', 'help': '', 'option': '', 'page': 'OS_2', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceType_2', 'name': 'Boot Device type', 'help': 'Specify boot device type', 'option': '0:SATA, 1:SD, 2:EMMC, 3:UFS, 4:SPI, 5:USB, 6:NVME, 7:MEMORY', 'page': 'OS_2', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_2.ImageType_2 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceInstance_2', 'name': 'Boot Device instance', 'help': 'Specify boot device instance when then are multiple instances', 'option': '0:Device 0, 1:Device 1, 2:Device 2, 3:Device 3', 'page': 'OS_2', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_2.ImageType_2 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'HwPart_2', 'name': 'Hardware Partition', 'help': 'Specify hardware partition number. If boot device type is SPI, the hardware partition refers to SPI flash region- 0-Descriptor, 1-BIOS, 2-ME, 3-GbE, 4-PDR Regions. If boot device type is SATA, the hardware partition refers to the SATA port number on the system; setting to 255 uses the first detected SATA device. If boot device type is USB, the hardware partition refers to the order in which the USB block devices are detected when multiple USB block devices are connected.', 'option': '0:User Partition, 1:Boot Partition 1, 2:Boot Partition 2, 3:Boot Partition 3, 4:Boot Partition 4, 5:Boot Partition 5, 6:Boot Partition 6, 7:Boot Partition 7, 255:SATA Auto 255', 'page': 'OS_2', 'condition': '($BOOT_OPTION_CFG_DATA_2.ImageType_2 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'EditNum, DEC, (0,255)', 'cname': 'SwPart_2', 'name': 'Software Partition', 'help': "Specify software partition number. A value of 255 indicates raw booting via the absolute LBA instead of a relative LBA (e.g. relative to a software partition's starting LBA).", 'option': '', 'page': 'OS_2', 'condition': '($BOOT_OPTION_CFG_DATA_2.ImageType_2 & 0x1F) < 0x1F'}, {'length': 8, 'type': 'Combo', 'cname': 'FsType_2', 'name': 'File System Type', 'help': 'Image is loaded from file system instead of raw data', 'option': '0:FAT, 1:EXT2, 2:AUTO, 3:RAW', 'page': 'OS_2', 'condition': '($BOOT_OPTION_CFG_DATA_2.ImageType_2 & 0x1F) < 0x1E'}, {'length': 128, 'value': "'", 'type': 'EditText', 'cname': 'BootImage_2', 'name': 'Normal OS info or LBA address', 'help': 'Specify file name of normal OS or LBA address (16-byte max length). For LBA address, please use HEX prefix "#0x". EX- #0x12345678', 'option': '', 'page': 'OS_2', 'condition': '($BOOT_OPTION_CFG_DATA_2.ImageType_2 & 0x1F) < 0x1F'}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'OS_3', 'path': 'BOOT_OPTION_CFG_DATA_3', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'OS_3', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ImageType_3', 'name': 'Image Type', 'help': "Specify boot image type. Extra and PreOS image type indicates this option is not a standalone boot option. Instead, it provides additional information for the previous boot option. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL. 'Not used' indicates this option will be ignored.", 'option': '0:Default, 1:Android, 2:ClearLinux, 3:Acrn, 4:Fastboot, 0x1E:Extra image, 0x9E:PreOS image, 0xFF:Not used', 'page': 'OS_3', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootFlags_3', 'name': 'Boot Flags', 'help': 'Specify boot flags (options) When extra image or PreOS image is selected, need config them in next boot option with proper image type. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL.', 'option': '0:Normal, 4:PreOS support, 8:Extra image support, 12:PreOS and extra image support, 16:Mender support, 20:PreOS and mender support', 'page': 'OS_3', 'condition': '($BOOT_OPTION_CFG_DATA_3.ImageType_3 & 0x1F) < 0x1E'}, {'length': 8, 'value': 'x', 'type': 'Reserved', 'cname': 'Reserved_3', 'name': '', 'help': '', 'option': '', 'page': 'OS_3', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceType_3', 'name': 'Boot Device type', 'help': 'Specify boot device type', 'option': '0:SATA, 1:SD, 2:EMMC, 3:UFS, 4:SPI, 5:USB, 6:NVME, 7:MEMORY', 'page': 'OS_3', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_3.ImageType_3 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceInstance_3', 'name': 'Boot Device instance', 'help': 'Specify boot device instance when then are multiple instances', 'option': '0:Device 0, 1:Device 1, 2:Device 2, 3:Device 3', 'page': 'OS_3', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_3.ImageType_3 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'HwPart_3', 'name': 'Hardware Partition', 'help': 'Specify hardware partition number. If boot device type is SPI, the hardware partition refers to SPI flash region- 0-Descriptor, 1-BIOS, 2-ME, 3-GbE, 4-PDR Regions. If boot device type is SATA, the hardware partition refers to the SATA port number on the system; setting to 255 uses the first detected SATA device. If boot device type is USB, the hardware partition refers to the order in which the USB block devices are detected when multiple USB block devices are connected.', 'option': '0:User Partition, 1:Boot Partition 1, 2:Boot Partition 2, 3:Boot Partition 3, 4:Boot Partition 4, 5:Boot Partition 5, 6:Boot Partition 6, 7:Boot Partition 7, 255:SATA Auto 255', 'page': 'OS_3', 'condition': '($BOOT_OPTION_CFG_DATA_3.ImageType_3 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'EditNum, DEC, (0,255)', 'cname': 'SwPart_3', 'name': 'Software Partition', 'help': "Specify software partition number. A value of 255 indicates raw booting via the absolute LBA instead of a relative LBA (e.g. relative to a software partition's starting LBA).", 'option': '', 'page': 'OS_3', 'condition': '($BOOT_OPTION_CFG_DATA_3.ImageType_3 & 0x1F) < 0x1F'}, {'length': 8, 'type': 'Combo', 'cname': 'FsType_3', 'name': 'File System Type', 'help': 'Image is loaded from file system instead of raw data', 'option': '0:FAT, 1:EXT2, 2:AUTO, 3:RAW', 'page': 'OS_3', 'condition': '($BOOT_OPTION_CFG_DATA_3.ImageType_3 & 0x1F) < 0x1E'}, {'length': 128, 'value': "'", 'type': 'EditText', 'cname': 'BootImage_3', 'name': 'Normal OS info or LBA address', 'help': 'Specify file name of normal OS or LBA address (16-byte max length). For LBA address, please use HEX prefix "#0x". EX- #0x12345678', 'option': '', 'page': 'OS_3', 'condition': '($BOOT_OPTION_CFG_DATA_3.ImageType_3 & 0x1F) < 0x1F'}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'OS_4', 'path': 'BOOT_OPTION_CFG_DATA_4', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'OS_4', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'ImageType_4', 'name': 'Image Type', 'help': "Specify boot image type. Extra and PreOS image type indicates this option is not a standalone boot option. Instead, it provides additional information for the previous boot option. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL. 'Not used' indicates this option will be ignored.", 'option': '0:Default, 1:Android, 2:ClearLinux, 3:Acrn, 4:Fastboot, 0x1E:Extra image, 0x9E:PreOS image, 0xFF:Not used', 'page': 'OS_4', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootFlags_4', 'name': 'Boot Flags', 'help': 'Specify boot flags (options) When extra image or PreOS image is selected, need config them in next boot option with proper image type. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL.', 'option': '0:Normal, 4:PreOS support, 8:Extra image support, 12:PreOS and extra image support, 16:Mender support, 20:PreOS and mender support', 'page': 'OS_4', 'condition': '($BOOT_OPTION_CFG_DATA_4.ImageType_4 & 0x1F) < 0x1E'}, {'length': 8, 'value': 'x', 'type': 'Reserved', 'cname': 'Reserved_4', 'name': '', 'help': '', 'option': '', 'page': 'OS_4', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceType_4', 'name': 'Boot Device type', 'help': 'Specify boot device type', 'option': '0:SATA, 1:SD, 2:EMMC, 3:UFS, 4:SPI, 5:USB, 6:NVME, 7:MEMORY', 'page': 'OS_4', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_4.ImageType_4 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceInstance_4', 'name': 'Boot Device instance', 'help': 'Specify boot device instance when then are multiple instances', 'option': '0:Device 0, 1:Device 1, 2:Device 2, 3:Device 3', 'page': 'OS_4', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_4.ImageType_4 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'HwPart_4', 'name': 'Hardware Partition', 'help': 'Specify hardware partition number. If boot device type is SPI, the hardware partition refers to SPI flash region- 0-Descriptor, 1-BIOS, 2-ME, 3-GbE, 4-PDR Regions. If boot device type is SATA, the hardware partition refers to the SATA port number on the system; setting to 255 uses the first detected SATA device. If boot device type is USB, the hardware partition refers to the order in which the USB block devices are detected when multiple USB block devices are connected.', 'option': '0:User Partition, 1:Boot Partition 1, 2:Boot Partition 2, 3:Boot Partition 3, 4:Boot Partition 4, 5:Boot Partition 5, 6:Boot Partition 6, 7:Boot Partition 7, 255:SATA Auto 255', 'page': 'OS_4', 'condition': '($BOOT_OPTION_CFG_DATA_4.ImageType_4 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'EditNum, DEC, (0,255)', 'cname': 'SwPart_4', 'name': 'Software Partition', 'help': "Specify software partition number. A value of 255 indicates raw booting via the absolute LBA instead of a relative LBA (e.g. relative to a software partition's starting LBA).", 'option': '', 'page': 'OS_4', 'condition': '($BOOT_OPTION_CFG_DATA_4.ImageType_4 & 0x1F) < 0x1F'}, {'length': 8, 'type': 'Combo', 'cname': 'FsType_4', 'name': 'File System Type', 'help': 'Image is loaded from file system instead of raw data', 'option': '0:FAT, 1:EXT2, 2:AUTO, 3:RAW', 'page': 'OS_4', 'condition': '($BOOT_OPTION_CFG_DATA_4.ImageType_4 & 0x1F) < 0x1E'}, {'length': 128, 'value': "'", 'type': 'EditText', 'cname': 'BootImage_4', 'name': 'Normal OS info or LBA address', 'help': 'Specify file name of normal OS or LBA address (16-byte max length). For LBA address, please use HEX prefix "#0x". EX- #0x12345678', 'option': '', 'page': 'OS_4', 'condition': '($BOOT_OPTION_CFG_DATA_4.ImageType_4 & 0x1F) < 0x1F'}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'OS_5', 'path': 'BOOT_OPTION_CFG_DATA_5', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'OS_5', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ImageType_5', 'name': 'Image Type', 'help': "Specify boot image type. Extra and PreOS image type indicates this option is not a standalone boot option. Instead, it provides additional information for the previous boot option. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL. 'Not used' indicates this option will be ignored.", 'option': '0:Default, 1:Android, 2:ClearLinux, 3:Acrn, 4:Fastboot, 0x1E:Extra image, 0x9E:PreOS image, 0xFF:Not used', 'page': 'OS_5', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootFlags_5', 'name': 'Boot Flags', 'help': 'Specify boot flags (options) When extra image or PreOS image is selected, need config them in next boot option with proper image type. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL.', 'option': '0:Normal, 4:PreOS support, 8:Extra image support, 12:PreOS and extra image support, 16:Mender support, 20:PreOS and mender support', 'page': 'OS_5', 'condition': '($BOOT_OPTION_CFG_DATA_5.ImageType_5 & 0x1F) < 0x1E'}, {'length': 8, 'value': 'x', 'type': 'Reserved', 'cname': 'Reserved_5', 'name': '', 'help': '', 'option': '', 'page': 'OS_5', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceType_5', 'name': 'Boot Device type', 'help': 'Specify boot device type', 'option': '0:SATA, 1:SD, 2:EMMC, 3:UFS, 4:SPI, 5:USB, 6:NVME, 7:MEMORY', 'page': 'OS_5', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_5.ImageType_5 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceInstance_5', 'name': 'Boot Device instance', 'help': 'Specify boot device instance when then are multiple instances', 'option': '0:Device 0, 1:Device 1, 2:Device 2, 3:Device 3', 'page': 'OS_5', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_5.ImageType_5 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'HwPart_5', 'name': 'Hardware Partition', 'help': 'Specify hardware partition number. If boot device type is SPI, the hardware partition refers to SPI flash region- 0-Descriptor, 1-BIOS, 2-ME, 3-GbE, 4-PDR Regions. If boot device type is SATA, the hardware partition refers to the SATA port number on the system; setting to 255 uses the first detected SATA device. If boot device type is USB, the hardware partition refers to the order in which the USB block devices are detected when multiple USB block devices are connected.', 'option': '0:User Partition, 1:Boot Partition 1, 2:Boot Partition 2, 3:Boot Partition 3, 4:Boot Partition 4, 5:Boot Partition 5, 6:Boot Partition 6, 7:Boot Partition 7, 255:SATA Auto 255', 'page': 'OS_5', 'condition': '($BOOT_OPTION_CFG_DATA_5.ImageType_5 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'EditNum, DEC, (0,255)', 'cname': 'SwPart_5', 'name': 'Software Partition', 'help': "Specify software partition number. A value of 255 indicates raw booting via the absolute LBA instead of a relative LBA (e.g. relative to a software partition's starting LBA).", 'option': '', 'page': 'OS_5', 'condition': '($BOOT_OPTION_CFG_DATA_5.ImageType_5 & 0x1F) < 0x1F'}, {'length': 8, 'type': 'Combo', 'cname': 'FsType_5', 'name': 'File System Type', 'help': 'Image is loaded from file system instead of raw data', 'option': '0:FAT, 1:EXT2, 2:AUTO, 3:RAW', 'page': 'OS_5', 'condition': '($BOOT_OPTION_CFG_DATA_5.ImageType_5 & 0x1F) < 0x1E'}, {'length': 128, 'value': "'", 'type': 'EditText', 'cname': 'BootImage_5', 'name': 'Normal OS info or LBA address', 'help': 'Specify file name of normal OS or LBA address (16-byte max length). For LBA address, please use HEX prefix "#0x". EX- #0x12345678', 'option': '', 'page': 'OS_5', 'condition': '($BOOT_OPTION_CFG_DATA_5.ImageType_5 & 0x1F) < 0x1F'}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'OS_6', 'path': 'BOOT_OPTION_CFG_DATA_6', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'OS_6', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'ImageType_6', 'name': 'Image Type', 'help': "Specify boot image type. Extra and PreOS image type indicates this option is not a standalone boot option. Instead, it provides additional information for the previous boot option. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL. 'Not used' indicates this option will be ignored.", 'option': '0:Default, 1:Android, 2:ClearLinux, 3:Acrn, 4:Fastboot, 0x1E:Extra image, 0x9E:PreOS image, 0xFF:Not used', 'page': 'OS_6', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootFlags_6', 'name': 'Boot Flags', 'help': 'Specify boot flags (options) When extra image or PreOS image is selected, need config them in next boot option with proper image type. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL.', 'option': '0:Normal, 4:PreOS support, 8:Extra image support, 12:PreOS and extra image support, 16:Mender support, 20:PreOS and mender support', 'page': 'OS_6', 'condition': '($BOOT_OPTION_CFG_DATA_6.ImageType_6 & 0x1F) < 0x1E'}, {'length': 8, 'value': 'x', 'type': 'Reserved', 'cname': 'Reserved_6', 'name': '', 'help': '', 'option': '', 'page': 'OS_6', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceType_6', 'name': 'Boot Device type', 'help': 'Specify boot device type', 'option': '0:SATA, 1:SD, 2:EMMC, 3:UFS, 4:SPI, 5:USB, 6:NVME, 7:MEMORY', 'page': 'OS_6', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_6.ImageType_6 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceInstance_6', 'name': 'Boot Device instance', 'help': 'Specify boot device instance when then are multiple instances', 'option': '0:Device 0, 1:Device 1, 2:Device 2, 3:Device 3', 'page': 'OS_6', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_6.ImageType_6 & 0x1F) < 0x1E'}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'HwPart_6', 'name': 'Hardware Partition', 'help': 'Specify hardware partition number. If boot device type is SPI, the hardware partition refers to SPI flash region- 0-Descriptor, 1-BIOS, 2-ME, 3-GbE, 4-PDR Regions. If boot device type is SATA, the hardware partition refers to the SATA port number on the system; setting to 255 uses the first detected SATA device. If boot device type is USB, the hardware partition refers to the order in which the USB block devices are detected when multiple USB block devices are connected.', 'option': '0:User Partition, 1:Boot Partition 1, 2:Boot Partition 2, 3:Boot Partition 3, 4:Boot Partition 4, 5:Boot Partition 5, 6:Boot Partition 6, 7:Boot Partition 7, 255:SATA Auto 255', 'page': 'OS_6', 'condition': '($BOOT_OPTION_CFG_DATA_6.ImageType_6 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'EditNum, DEC, (0,255)', 'cname': 'SwPart_6', 'name': 'Software Partition', 'help': "Specify software partition number. A value of 255 indicates raw booting via the absolute LBA instead of a relative LBA (e.g. relative to a software partition's starting LBA).", 'option': '', 'page': 'OS_6', 'condition': '($BOOT_OPTION_CFG_DATA_6.ImageType_6 & 0x1F) < 0x1F'}, {'length': 8, 'type': 'Combo', 'cname': 'FsType_6', 'name': 'File System Type', 'help': 'Image is loaded from file system instead of raw data', 'option': '0:FAT, 1:EXT2, 2:AUTO, 3:RAW', 'page': 'OS_6', 'condition': '($BOOT_OPTION_CFG_DATA_6.ImageType_6 & 0x1F) < 0x1E'}, {'length': 128, 'value': "'", 'type': 'EditText', 'cname': 'BootImage_6', 'name': 'Normal OS info or LBA address', 'help': 'Specify file name of normal OS or LBA address (16-byte max length). For LBA address, please use HEX prefix "#0x". EX- #0x12345678', 'option': '', 'page': 'OS_6', 'condition': '($BOOT_OPTION_CFG_DATA_6.ImageType_6 & 0x1F) < 0x1F'}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'OS_7', 'path': 'BOOT_OPTION_CFG_DATA_7', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'OS_7', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ImageType_7', 'name': 'Image Type', 'help': "Specify boot image type. Extra and PreOS image type indicates this option is not a standalone boot option. Instead, it provides additional information for the previous boot option. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL. 'Not used' indicates this option will be ignored.", 'option': '0:Default, 1:Android, 2:ClearLinux, 3:Acrn, 4:Fastboot, 0x1E:Extra image, 0x9E:PreOS image, 0xFF:Not used', 'page': 'OS_7', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootFlags_7', 'name': 'Boot Flags', 'help': 'Specify boot flags (options) When extra image or PreOS image is selected, need config them in next boot option with proper image type. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL.', 'option': '0:Normal, 4:PreOS support, 8:Extra image support, 12:PreOS and extra image support, 16:Mender support, 20:PreOS and mender support', 'page': 'OS_7', 'condition': '($BOOT_OPTION_CFG_DATA_7.ImageType_7 & 0x1F) < 0x1E'}, {'length': 8, 'value': 'x', 'type': 'Reserved', 'cname': 'Reserved_7', 'name': '', 'help': '', 'option': '', 'page': 'OS_7', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceType_7', 'name': 'Boot Device type', 'help': 'Specify boot device type', 'option': '0:SATA, 1:SD, 2:EMMC, 3:UFS, 4:SPI, 5:USB, 6:NVME, 7:MEMORY', 'page': 'OS_7', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_7.ImageType_7 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceInstance_7', 'name': 'Boot Device instance', 'help': 'Specify boot device instance when then are multiple instances', 'option': '0:Device 0, 1:Device 1, 2:Device 2, 3:Device 3', 'page': 'OS_7', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_7.ImageType_7 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'HwPart_7', 'name': 'Hardware Partition', 'help': 'Specify hardware partition number. If boot device type is SPI, the hardware partition refers to SPI flash region- 0-Descriptor, 1-BIOS, 2-ME, 3-GbE, 4-PDR Regions. If boot device type is SATA, the hardware partition refers to the SATA port number on the system; setting to 255 uses the first detected SATA device. If boot device type is USB, the hardware partition refers to the order in which the USB block devices are detected when multiple USB block devices are connected.', 'option': '0:User Partition, 1:Boot Partition 1, 2:Boot Partition 2, 3:Boot Partition 3, 4:Boot Partition 4, 5:Boot Partition 5, 6:Boot Partition 6, 7:Boot Partition 7, 255:SATA Auto 255', 'page': 'OS_7', 'condition': '($BOOT_OPTION_CFG_DATA_7.ImageType_7 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'EditNum, DEC, (0,255)', 'cname': 'SwPart_7', 'name': 'Software Partition', 'help': "Specify software partition number. A value of 255 indicates raw booting via the absolute LBA instead of a relative LBA (e.g. relative to a software partition's starting LBA).", 'option': '', 'page': 'OS_7', 'condition': '($BOOT_OPTION_CFG_DATA_7.ImageType_7 & 0x1F) < 0x1F'}, {'length': 8, 'type': 'Combo', 'cname': 'FsType_7', 'name': 'File System Type', 'help': 'Image is loaded from file system instead of raw data', 'option': '0:FAT, 1:EXT2, 2:AUTO, 3:RAW', 'page': 'OS_7', 'condition': '($BOOT_OPTION_CFG_DATA_7.ImageType_7 & 0x1F) < 0x1E'}, {'length': 128, 'value': "'", 'type': 'EditText', 'cname': 'BootImage_7', 'name': 'Normal OS info or LBA address', 'help': 'Specify file name of normal OS or LBA address (16-byte max length). For LBA address, please use HEX prefix "#0x". EX- #0x12345678', 'option': '', 'page': 'OS_7', 'condition': '($BOOT_OPTION_CFG_DATA_7.ImageType_7 & 0x1F) < 0x1F'}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'OS_8', 'path': 'BOOT_OPTION_CFG_DATA_8', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'OS_8', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'ImageType_8', 'name': 'Image Type', 'help': "Specify boot image type. Extra and PreOS image type indicates this option is not a standalone boot option. Instead, it provides additional information for the previous boot option. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL. 'Not used' indicates this option will be ignored.", 'option': '0:Default, 1:Android, 2:ClearLinux, 3:Acrn, 4:Fastboot, 0x1E:Extra image, 0x9E:PreOS image, 0xFF:Not used', 'page': 'OS_8', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootFlags_8', 'name': 'Boot Flags', 'help': 'Specify boot flags (options) When extra image or PreOS image is selected, need config them in next boot option with proper image type. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL.', 'option': '0:Normal, 4:PreOS support, 8:Extra image support, 12:PreOS and extra image support, 16:Mender support, 20:PreOS and mender support', 'page': 'OS_8', 'condition': '($BOOT_OPTION_CFG_DATA_8.ImageType_8 & 0x1F) < 0x1E'}, {'length': 8, 'value': 'x', 'type': 'Reserved', 'cname': 'Reserved_8', 'name': '', 'help': '', 'option': '', 'page': 'OS_8', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceType_8', 'name': 'Boot Device type', 'help': 'Specify boot device type', 'option': '0:SATA, 1:SD, 2:EMMC, 3:UFS, 4:SPI, 5:USB, 6:NVME, 7:MEMORY', 'page': 'OS_8', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_8.ImageType_8 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceInstance_8', 'name': 'Boot Device instance', 'help': 'Specify boot device instance when then are multiple instances', 'option': '0:Device 0, 1:Device 1, 2:Device 2, 3:Device 3', 'page': 'OS_8', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_8.ImageType_8 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'HwPart_8', 'name': 'Hardware Partition', 'help': 'Specify hardware partition number. If boot device type is SPI, the hardware partition refers to SPI flash region- 0-Descriptor, 1-BIOS, 2-ME, 3-GbE, 4-PDR Regions. If boot device type is SATA, the hardware partition refers to the SATA port number on the system; setting to 255 uses the first detected SATA device. If boot device type is USB, the hardware partition refers to the order in which the USB block devices are detected when multiple USB block devices are connected.', 'option': '0:User Partition, 1:Boot Partition 1, 2:Boot Partition 2, 3:Boot Partition 3, 4:Boot Partition 4, 5:Boot Partition 5, 6:Boot Partition 6, 7:Boot Partition 7, 255:SATA Auto 255', 'page': 'OS_8', 'condition': '($BOOT_OPTION_CFG_DATA_8.ImageType_8 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'EditNum, DEC, (0,255)', 'cname': 'SwPart_8', 'name': 'Software Partition', 'help': "Specify software partition number. A value of 255 indicates raw booting via the absolute LBA instead of a relative LBA (e.g. relative to a software partition's starting LBA).", 'option': '', 'page': 'OS_8', 'condition': '($BOOT_OPTION_CFG_DATA_8.ImageType_8 & 0x1F) < 0x1F'}, {'length': 8, 'type': 'Combo', 'cname': 'FsType_8', 'name': 'File System Type', 'help': 'Image is loaded from file system instead of raw data', 'option': '0:FAT, 1:EXT2, 2:AUTO, 3:RAW', 'page': 'OS_8', 'condition': '($BOOT_OPTION_CFG_DATA_8.ImageType_8 & 0x1F) < 0x1E'}, {'length': 128, 'value': "'", 'type': 'EditText', 'cname': 'BootImage_8', 'name': 'Normal OS info or LBA address', 'help': 'Specify file name of normal OS or LBA address (16-byte max length). For LBA address, please use HEX prefix "#0x". EX- #0x12345678', 'option': '', 'page': 'OS_8', 'condition': '($BOOT_OPTION_CFG_DATA_8.ImageType_8 & 0x1F) < 0x1F'}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'OS_9', 'path': 'BOOT_OPTION_CFG_DATA_9', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'OS_9', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ImageType_9', 'name': 'Image Type', 'help': "Specify boot image type. Extra and PreOS image type indicates this option is not a standalone boot option. Instead, it provides additional information for the previous boot option. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL. 'Not used' indicates this option will be ignored.", 'option': '0:Default, 1:Android, 2:ClearLinux, 3:Acrn, 4:Fastboot, 0x1E:Extra image, 0x9E:PreOS image, 0xFF:Not used', 'page': 'OS_9', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootFlags_9', 'name': 'Boot Flags', 'help': 'Specify boot flags (options) When extra image or PreOS image is selected, need config them in next boot option with proper image type. Extra image means load and run extra image before normal OS image. The extra image will return to SBL and SBL will continue run normal OS. PreOs image means load and run PreOS image before normal OS image. SBL prepares normal OS info and passes to PreOS so the PreOs will not return to SBL.', 'option': '0:Normal, 4:PreOS support, 8:Extra image support, 12:PreOS and extra image support, 16:Mender support, 20:PreOS and mender support', 'page': 'OS_9', 'condition': '($BOOT_OPTION_CFG_DATA_9.ImageType_9 & 0x1F) < 0x1E'}, {'length': 8, 'value': 'x', 'type': 'Reserved', 'cname': 'Reserved_9', 'name': '', 'help': '', 'option': '', 'page': 'OS_9', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceType_9', 'name': 'Boot Device type', 'help': 'Specify boot device type', 'option': '0:SATA, 1:SD, 2:EMMC, 3:UFS, 4:SPI, 5:USB, 6:NVME, 7:MEMORY', 'page': 'OS_9', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_9.ImageType_9 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'BootDeviceInstance_9', 'name': 'Boot Device instance', 'help': 'Specify boot device instance when then are multiple instances', 'option': '0:Device 0, 1:Device 1, 2:Device 2, 3:Device 3', 'page': 'OS_9', 'order': 0, 'condition': '($BOOT_OPTION_CFG_DATA_9.ImageType_9 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'Combo', 'cname': 'HwPart_9', 'name': 'Hardware Partition', 'help': 'Specify hardware partition number. If boot device type is SPI, the hardware partition refers to SPI flash region- 0-Descriptor, 1-BIOS, 2-ME, 3-GbE, 4-PDR Regions. If boot device type is SATA, the hardware partition refers to the SATA port number on the system; setting to 255 uses the first detected SATA device. If boot device type is USB, the hardware partition refers to the order in which the USB block devices are detected when multiple USB block devices are connected.', 'option': '0:User Partition, 1:Boot Partition 1, 2:Boot Partition 2, 3:Boot Partition 3, 4:Boot Partition 4, 5:Boot Partition 5, 6:Boot Partition 6, 7:Boot Partition 7, 255:SATA Auto 255', 'page': 'OS_9', 'condition': '($BOOT_OPTION_CFG_DATA_9.ImageType_9 & 0x1F) < 0x1E'}, {'length': 8, 'type': 'EditNum, DEC, (0,255)', 'cname': 'SwPart_9', 'name': 'Software Partition', 'help': "Specify software partition number. A value of 255 indicates raw booting via the absolute LBA instead of a relative LBA (e.g. relative to a software partition's starting LBA).", 'option': '', 'page': 'OS_9', 'condition': '($BOOT_OPTION_CFG_DATA_9.ImageType_9 & 0x1F) < 0x1F'}, {'length': 8, 'type': 'Combo', 'cname': 'FsType_9', 'name': 'File System Type', 'help': 'Image is loaded from file system instead of raw data', 'option': '0:FAT, 1:EXT2, 2:AUTO, 3:RAW', 'page': 'OS_9', 'condition': '($BOOT_OPTION_CFG_DATA_9.ImageType_9 & 0x1F) < 0x1E'}, {'length': 128, 'value': "'", 'type': 'EditText', 'cname': 'BootImage_9', 'name': 'Normal OS info or LBA address', 'help': 'Specify file name of normal OS or LBA address (16-byte max length). For LBA address, please use HEX prefix "#0x". EX- #0x12345678', 'option': '', 'page': 'OS_9', 'condition': '($BOOT_OPTION_CFG_DATA_9.ImageType_9 & 0x1F) < 0x1F'}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'MEM', 'path': 'MEMORY_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'MEM', 'condition': ''}, {'length': 128, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'SpdAddressTable', 'name': 'Spd Address Table', 'help': 'Specify SPD Address table for CH0D0/CH0D1/CH1D0/CH1D1', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SpdDataSel000', 'name': 'Spd Data MC0 CH0 DIMM0', 'help': 'Select which SPD data should be used for MC0 CH0 DIMM0.SPD0 and SPD1 are associated with configurable SPD data block from MEM SPD. SPD data will be used only when SpdAddressTable SPD Address are marked as 00', 'option': '0:NONE, 1:SPD0, 2:SPD1, 3:SPD2, 4:SPD3', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SpdDataSel001', 'name': 'Spd Data MC0 CH0 DIMM1', 'help': 'Select which SPD data should be used for MC0 CH0 DIMM1.SPD0 and SPD1 are associated with configurable SPD data block from MEM SPD. SPD data will be used only when SpdAddressTable SPD Address are marked as 00', 'option': '0:NONE, 1:SPD0, 2:SPD1, 3:SPD2, 4:SPD3', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SpdDataSel010', 'name': 'Spd Data MC0 CH1 DIMM0', 'help': 'Select which SPD data should be used for MC0 CH1 DIMM0.SPD0 and SPD1 are associated with configurable SPD data block from MEM SPD. SPD data will be used only when SpdAddressTable SPD Address are marked as 00', 'option': '0:NONE, 1:SPD0, 2:SPD1, 3:SPD2, 4:SPD3', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SpdDataSel011', 'name': 'Spd Data MC0 CH1 DIMM1', 'help': 'Select which SPD data should be used for MC0 CH1 DIMM1.SPD0 and SPD1 are associated with configurable SPD data block from MEM SPD. SPD data will be used only when SpdAddressTable SPD Address are marked as 00', 'option': '0:NONE, 1:SPD0, 2:SPD1, 3:SPD2, 4:SPD3', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SpdDataSel020', 'name': 'Spd Data MC0 CH2 DIMM0', 'help': 'Select which SPD data should be used for MC0 CH2 DIMM0.SPD0 and SPD1 are associated with configurable SPD data block from MEM SPD. SPD data will be used only when SpdAddressTable SPD Address are marked as 00', 'option': '0:NONE, 1:SPD0, 2:SPD1, 3:SPD2, 4:SPD3', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SpdDataSel021', 'name': 'Spd Data MC0 CH2 DIMM1', 'help': 'Select which SPD data should be used for MC0 CH2 DIMM1.SPD0 and SPD1 are associated with configurable SPD data block from MEM SPD. SPD data will be used only when SpdAddressTable SPD Address are marked as 00', 'option': '0:NONE, 1:SPD0, 2:SPD1, 3:SPD2, 4:SPD3', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SpdDataSel030', 'name': 'Spd Data MC0 CH3 DIMM0', 'help': 'Select which SPD data should be used for MC0 CH3 DIMM0.SPD0 and SPD1 are associated with configurable SPD data block from MEM SPD. SPD data will be used only when SpdAddressTable SPD Address are marked as 00', 'option': '0:NONE, 1:SPD0, 2:SPD1, 3:SPD2, 4:SPD3', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SpdDataSel031', 'name': 'Spd Data MC0 CH3 DIMM1', 'help': 'Select which SPD data should be used for MC0 CH3 DIMM1.SPD0 and SPD1 are associated with configurable SPD data block from MEM SPD. SPD data will be used only when SpdAddressTable SPD Address are marked as 00', 'option': '0:NONE, 1:SPD0, 2:SPD1, 3:SPD2, 4:SPD3', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'SpdDataSel100', 'name': 'Spd Data MC1 CH0 DIMM0', 'help': 'Select which SPD data should be used for MC1 CH0 DIMM0.SPD0 and SPD1 are associated with configurable SPD data block from MEM SPD. SPD data will be used only when SpdAddressTable SPD Address are marked as 00', 'option': '0:NONE, 1:SPD0, 2:SPD1, 3:SPD2, 4:SPD3', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'SpdDataSel101', 'name': 'Spd Data MC1 CH0 DIMM1', 'help': 'Select which SPD data should be used for MC1 CH0 DIMM1.SPD0 and SPD1 are associated with configurable SPD data block from MEM SPD. SPD data will be used only when SpdAddressTable SPD Address are marked as 00', 'option': '0:NONE, 1:SPD0, 2:SPD1, 3:SPD2, 4:SPD3', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SpdDataSel110', 'name': 'Spd Data MC1 CH1 DIMM0', 'help': 'Select which SPD data should be used for MC1 CH1 DIMM0.SPD0 and SPD1 are associated with configurable SPD data block from MEM SPD. SPD data will be used only when SpdAddressTable SPD Address are marked as 00', 'option': '0:NONE, 1:SPD0, 2:SPD1, 3:SPD2, 4:SPD3', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SpdDataSel111', 'name': 'Spd Data MC1 CH1 DIMM1', 'help': 'Select which SPD data should be used for MC1 CH1 DIMM1.SPD0 and SPD1 are associated with configurable SPD data block from MEM SPD. SPD data will be used only when SpdAddressTable SPD Address are marked as 00', 'option': '0:NONE, 1:SPD0, 2:SPD1, 3:SPD2, 4:SPD3', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SpdDataSel120', 'name': 'Spd Data MC1 CH2 DIMM0', 'help': 'Select which SPD data should be used for MC1 CH2 DIMM0.SPD0 and SPD1 are associated with configurable SPD data block from MEM SPD. SPD data will be used only when SpdAddressTable SPD Address are marked as 00', 'option': '0:NONE, 1:SPD0, 2:SPD1, 3:SPD2, 4:SPD3', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SpdDataSel121', 'name': 'Spd Data MC1 CH2 DIMM1', 'help': 'Select which SPD data should be used for MC1 CH2 DIMM1.SPD0 and SPD1 are associated with configurable SPD data block from MEM SPD. SPD data will be used only when SpdAddressTable SPD Address are marked as 00', 'option': '0:NONE, 1:SPD0, 2:SPD1, 3:SPD2, 4:SPD3', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SpdDataSel130', 'name': 'Spd Data MC1 CH3 DIMM0', 'help': 'Select which SPD data should be used for MC1 CH3 DIMM0.SPD0 and SPD1 are associated with configurable SPD data block from MEM SPD. SPD data will be used only when SpdAddressTable SPD Address are marked as 00', 'option': '0:NONE, 1:SPD0, 2:SPD1, 3:SPD2, 4:SPD3', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SpdDataSel131', 'name': 'Spd Data MC1 CH3 DIMM1', 'help': 'Select which SPD data should be used for MC1 CH3 DIMM1.SPD0 and SPD1 are associated with configurable SPD data block from MEM SPD. SPD data will be used only when SpdAddressTable SPD Address are marked as 00', 'option': '0:NONE, 1:SPD0, 2:SPD1, 3:SPD2, 4:SPD3', 'page': 'MEM_MISC', 'condition': ''}, {'length': 16, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFF)', 'cname': 'DqsMapCpu2DramMc0Ch0', 'name': 'Dqs Map CPU to DRAM MC 0 CH 0', 'help': 'Set Dqs mapping relationship between CPU and DRAM, Memory controller 0 Channel 0- board-dependentt', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 16, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFF)', 'cname': 'DqsMapCpu2DramMc0Ch1', 'name': 'Dqs Map CPU to DRAM MC 0 CH 1', 'help': 'Set Dqs mapping relationship between CPU and DRAM, Memory controller 0 Channel 1- board-dependentt', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 16, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFF)', 'cname': 'DqsMapCpu2DramMc0Ch2', 'name': 'Dqs Map CPU to DRAM MC 0 CH 2', 'help': 'Set Dqs mapping relationship between CPU and DRAM, Memory controller 0 Channel 2- board-dependentt', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 16, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFF)', 'cname': 'DqsMapCpu2DramMc0Ch3', 'name': 'Dqs Map CPU to DRAM MC 0 CH 3', 'help': 'Set Dqs mapping relationship between CPU and DRAM, Memory controller 0 Channel 3- board-dependentt', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 16, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFF)', 'cname': 'DqsMapCpu2DramMc1Ch0', 'name': 'Dqs Map CPU to DRAM MC 1 CH 0', 'help': 'Set Dqs mapping relationship between CPU and DRAM, Memory controller 1 Channel 0- board-dependentt', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 16, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFF)', 'cname': 'DqsMapCpu2DramMc1Ch1', 'name': 'Dqs Map CPU to DRAM MC 1 CH 1', 'help': 'Set Dqs mapping relationship between CPU and DRAM, Memory controller 1 Channel 1- board-dependentt', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 16, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFF)', 'cname': 'DqsMapCpu2DramMc1Ch2', 'name': 'Dqs Map CPU to DRAM MC 1 CH 2', 'help': 'Set Dqs mapping relationship between CPU and DRAM, Memory controller 1 Channel 2- board-dependentt', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 16, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFF)', 'cname': 'DqsMapCpu2DramMc1Ch3', 'name': 'Dqs Map CPU to DRAM MC 1 CH 3', 'help': 'Set Dqs mapping relationship between CPU and DRAM, Memory controller 1 Channel 3- board-dependentt', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 128, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'DqMapCpu2DramMc0Ch0', 'name': 'MC0 Dq Byte Map CH0', 'help': 'Memory controller 0 chennel 0 LPDDR4 DQ swizzling between CPU and DRAM', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 128, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'DqMapCpu2DramMc0Ch1', 'name': 'MC0 Dq Byte Map CH1', 'help': 'Memory controller 0 chennel 1 LPDDR4 DQ swizzling between CPU and DRAM', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 128, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'DqMapCpu2DramMc0Ch2', 'name': 'MC0 Dq Byte Map CH2', 'help': 'Memory controller 0 chennel 2 LPDDR4 DQ swizzling between CPU and DRAM', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 128, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'DqMapCpu2DramMc0Ch3', 'name': 'MC0 Dq Byte Map CH3', 'help': 'Memory controller 0 chennel 3 LPDDR4 DQ swizzling between CPU and DRAM', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 128, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'DqMapCpu2DramMc1Ch0', 'name': 'MC1 Dq Byte Map CH0', 'help': 'Memory controller 1 chennel 0 LPDDR4 DQ swizzling between CPU and DRAM', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 128, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'DqMapCpu2DramMc1Ch1', 'name': 'MC1 Dq Byte Map CH1', 'help': 'Memory controller 1 chennel 1 LPDDR4 DQ swizzling between CPU and DRAM', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 128, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'DqMapCpu2DramMc1Ch2', 'name': 'MC1 Dq Byte Map CH2', 'help': 'Memory controller 1 chennel 2 LPDDR4 DQ swizzling between CPU and DRAM', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 128, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'DqMapCpu2DramMc1Ch3', 'name': 'MC1 Dq Byte Map CH3', 'help': 'Memory controller 1 chennel 3 LPDDR4 DQ swizzling between CPU and DRAM', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'DqPinsInterleaved', 'name': 'Dqs Pins Interleaved Setting', 'help': 'Indicates DqPinsInterleaved setting- board-dependent', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0xFFFF)', 'cname': 'RcompResistor', 'name': 'RcompResistor settings', 'help': 'Indicates  RcompResistor settings- Board-dependent', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 40, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFF)', 'cname': 'RcompTarget', 'name': 'RcompTarget settings', 'help': 'RcompTarget settings- board-dependent', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'MrcFastBoot', 'name': 'MRC Fast Boot', 'help': 'Enables/Disable the MRC fast path thru the MRC', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'RmtPerTask', 'name': 'Rank Margin Tool per Task', 'help': 'This option enables the user to execute Rank Margin Tool per major training step in the MRC.', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'MrcSafeConfig', 'name': 'MRC Safe Config', 'help': 'Enables/Disable MRC Safe Config', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ExitOnFailure', 'name': 'Exit On Failure (MRC)', 'help': 'Enables/Disable Exit On Failure (MRC)', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ChHashEnable', 'name': 'Ch Hash Support', 'help': 'Enable/Disable Channel Hash Support. NOTE- ONLY if Memory interleaved Mode', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ChHashInterleaveBit', 'name': 'Ch Hash Interleaved Bit', 'help': 'Select the BIT to be used for Channel Interleaved mode. NOTE- BIT7 will interlave the channels at a 2 cacheline granularity, BIT8 at 4 and BIT9 at 8', 'option': '0:BIT6, 1:BIT7, 2:BIT8, 3:BIT9, 4:BIT10, 5:BIT11, 6:BIT12, 7:BIT13', 'page': 'MEM_MISC', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'EditNum, HEX, (0x0001, 0x3FFF)', 'cname': 'ChHashMask', 'name': 'Ch Hash Mask', 'help': 'Set the BIT(s) to be included in the XOR function. NOTE BIT mask corresponds to BITS [19:6}.', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'RemapEnable', 'name': 'Memory Remap', 'help': 'Enables/Disable Memory Remap', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ScramblerSupport', 'name': 'Scrambler Support', 'help': 'This option enables data scrambling in memory.', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'EnhancedInterleave', 'name': 'Enhanced Interleave support', 'help': 'Enables/Disable Enhanced Interleave support', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'RankInterleave', 'name': 'Rank Interleave support', 'help': 'Enables/Disable Rank Interleave support. NOTE- RI and HORI can not be enabled at the same time.', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 64, 'value': 'x', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFF)', 'cname': 'PlatformMemorySize', 'name': 'Minimum Platform Memory Size', 'help': 'The minimum platform memory size required to pass control to post-memory init', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3F)', 'cname': 'CpuRatio', 'name': 'CPU ratio value', 'help': 'CPU ratio value. Valid Range 0 to 63', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'BootFrequency', 'name': 'Boot frequency', 'help': 'Sets the boot frequency starting from reset vector.- 0- Maximum battery performance.- 1- Maximum non-turbo performance.- 2- Turbo performance. @note If Turbo is selected BIOS will start in max non-turbo mode and switch to Turbo mode.', 'option': '0:0, 1:1, 2:2', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ActiveCoreCount', 'name': 'Number of active big cores', 'help': 'Number of active big cores(Depends on Number of big cores). Default 0xFF means to active all system supported big cores. <b>0xFF- Active all big cores</b>; 0- Disable all big cores; 1- 1; 2- 2; 3- 3;', 'option': '0x0:Disable all big cores, 0x1:1, 0x2:2, 0x3:3, 0x4:4, 0x5:5, 0x6:6, 0x7:7, 0x8:8, 0xff:Active all big cores', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'FClkFrequency', 'name': 'Processor Early Power On Configuration FCLK setting', 'help': '0- 800 MHz (ULT/ULX). 1- 1 GHz (DT/Halo). Not supported on ULT/ULX.- 2- 400 MHz. - 3- Reserved', 'option': '0:800 MHz, 1:1 GHz, 2:400 MHz, 3:Reserved', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TmeEnable', 'name': 'Total Memory Encryption Enable', 'help': 'Total Memory Encryption enabling', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 64, 'value': 'x', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFF)', 'cname': 'TxtDprMemoryBase', 'name': 'Txt Dpr Memory Base', 'help': 'Base Address of Txt Dpr', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 32, 'value': 'x8', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFF)', 'cname': 'TxtDprMemorySize', 'name': 'Txt Dpr Memory Size', 'help': 'Size of Txt Dpr', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFF)', 'cname': 'SinitMemorySize', 'name': 'SinitMemorySize', 'help': 'Enable/Disable. 0- Disable, define default value of SinitMemorySize , 1- enable', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFF)', 'cname': 'TxtHeapMemorySize', 'name': 'TxtHeapMemorySize', 'help': 'Enable/Disable. 0- Disable, define default value of TxtHeapMemorySize , 1- enable', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ActiveSmallCoreCount', 'name': 'Number of active small cores', 'help': 'Number of active small cores(Depends on Number of small cores). Default 0xFF means to active all system supported small cores. <b>0xFF- Active all small cores</b>; 0- Disable all small cores; 1- 1; 2- 2; 3- 3;', 'option': '0x0:Disable all small cores, 0x1:1, 0x2:2, 0x3:3, 0xff:Active all small cores', 'page': 'MEM_MISC', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'EditNum, HEX, (0x0, 0xFFFF)', 'cname': 'BiosSize', 'name': 'BiosSize', 'help': 'The size of the BIOS region of the IFWI. Used if FspmUpd->FspmConfig.BiosGuard != 0. If BiosGuard is enabled, MRC will increase the size of the DPR (DMA Protected Range) so that a BIOS Update Script can be stored in the DPR.', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFF)', 'cname': 'BiosAcmBase', 'name': 'ACM Base', 'help': 'Base Address of ACM', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x0, 0xFFFFFF)', 'cname': 'PcieRpEnableMask', 'name': 'Enable PCIE RP Mask', 'help': 'Enable/disable PCIE Root Ports. 0- disable, 1- enable. One bit for each port, bit0 for port1, bit1 for port2, and so on.', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 144, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'PcieClkSrcUsage', 'name': 'Usage type for ClkSrc', 'help': '0-23- PCH rootport, 0x40-0x43- PEG port, 0x70:LAN, 0x80- unspecified but in use (free running), 0xFF- not used', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 144, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'PcieClkSrcClkReq', 'name': 'ClkReq-to-ClkSrc mapping', 'help': 'Number of ClkReq signal assigned to ClkSrc', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x0, 0xFFFFFF)', 'cname': 'CpuPcieRpEnableMask', 'name': 'Enable PCIE RP Mask', 'help': 'Enable/disable PCIE Root Ports. 0- disable, 1- enable. One bit for each port, bit0 for port1, bit1 for port2, and so on.', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 24, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFF)', 'cname': 'CpuPcieRpClockReqMsgEnable', 'name': 'Enable ClockReq Messaging', 'help': 'ClockReq Messaging. Disabled(0x0)- Disable ClockReq Messaging, Enabled(0x1)(Default)- Enable ClockReq Messaging [ALIAS_NAME RpClockReqMsgEnable]', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'CpuPcieRpPcieSpeed', 'name': 'PCIE RP Pcie Speed', 'help': 'Determines each PCIE Port speed capability. 0- Auto; 1- Gen1; 2- Gen2; 3- Gen3; 4- Gen4 (see- CPU_PCIE_SPEED). [ALIAS_NAME RpPcieThresholdBytes]', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PchHdaEnable', 'name': 'Enable Intel HD Audio (Azalia)', 'help': '0- Disable, 1- Enable (Default) Azalia controller', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PchHdaDspEnable', 'name': 'Enable HD Audio DSP', 'help': 'Enable/disable HD Audio DSP feature.', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'MEM_MISC', 'condition': '($FEATURES_CFG_DATA.Features.S0ix == 0)'}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PchHdaAudioLinkHdaEnable', 'name': 'Enable HD Audio Link', 'help': 'Enable/disable HD Audio Link. Muxed with SSP0/SSP1/SNDW1.', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'MEM_MISC', 'condition': '($FEATURES_CFG_DATA.Features.S0ix == 0)'}, {'length': 16, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFF)', 'cname': 'PchHdaAudioLinkDmicEnable', 'name': 'Enable HD Audio DMIC_N Link', 'help': 'Enable/disable HD Audio DMIC1 link. Muxed with SNDW3.', 'option': '', 'page': 'MEM_MISC', 'condition': '($FEATURES_CFG_DATA.Features.S0ix == 0)'}, {'length': 16, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFF)', 'cname': 'PchHdaAudioLinkDmicClockSelect', 'name': 'HD Audio DMIC Link Clock Select', 'help': 'Determines DMIC<N> Clock Source. 0- Both, 1- ClkA, 2- ClkB', 'option': '0x0:Both, 0x1:ClkA, 0x2:ClkB', 'page': 'MEM_MISC', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFF)', 'cname': 'PchHdaAudioLinkSndwEnable', 'name': 'Enable HD Audio SoundWire#N Link', 'help': 'Enable/disable HD Audio SNDW#N link. Muxed with HDA.', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PchHdaIDispLinkTmode', 'name': 'iDisp-Link T-mode', 'help': 'iDisp-Link T-Mode (PCH_HDAUDIO_IDISP_TMODE enum)- 0- 2T, 2- 4T, 3- 8T, 4- 16T', 'option': '0x0:2T, 0x2:4T, 0x3:8T, 0x4:16T', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PchHdaIDispLinkFrequency', 'name': 'iDisp-Link Frequency', 'help': 'iDisp-Link Freq (PCH_HDAUDIO_LINK_FREQUENCY enum)- 4- 96MHz, 3- 48MHz.', 'option': '0x4:96MHz, 0x3:48MHz', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PchHdaIDispCodecDisconnect', 'name': 'iDisplay Audio Codec disconnection', 'help': '0- Not disconnected, enumerable, 1- Disconnected SDI, not enumerable.', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'VtdDisable', 'name': 'Disable VT-d', 'help': '0=Enable/FALSE(VT-d enabled), 1=Disable/TRUE (VT-d disabled)', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'VtdIgdEnable', 'name': 'Vtd Programming for Igd', 'help': '1=Enable/TRUE (Igd VT-d Bar programming enabled), 0=Disable/FLASE (Igd VT-d Bar programming disabled)', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'X2ApicOptOut', 'name': 'State of X2APIC_OPT_OUT bit in the DMAR table', 'help': '0=Disable/Clear, 1=Enable/Set', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 32, 'value': 'x8', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFF)', 'cname': 'DmaBufferSize', 'name': 'PMR Size', 'help': 'Size of PMR memory buffer. 0x400000 for normal boot and 0x200000 for S3 boot', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'DmaControlGuarantee', 'name': 'State of DMA_CONTROL_GUARANTEE bit in the DMAR table', 'help': '0=Disable/Clear, 1=Enable/Set', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'EditNum, HEX, (0,0xC00)', 'cname': 'MmioSize', 'name': 'MMIO Size', 'help': 'Size of MMIO space reserved for devices. 0=Auto, non-Zero=size in MB', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'EditNum, HEX, (0x0, 0xFFFF)', 'cname': 'MmioSizeAdjustment', 'name': 'MMIO size adjustment for AUTO mode', 'help': 'Positive number means increasing MMIO size, Negative value means decreasing MMIO size- 0 (Default)=no change to AUTO mode MMIO size', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SmbusEnable', 'name': 'Enable SMBus', 'help': 'Enable/disable SMBus controller.', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x0, 0xFF)', 'cname': 'PchNumRsvdSmbusAddresses', 'name': 'Number of RsvdSmbusAddressTable.', 'help': 'The number of elements in the RsvdSmbusAddressTable.', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFF)', 'cname': 'RsvdSmbusAddressTablePtr', 'name': 'Point of RsvdSmbusAddressTable', 'help': 'Array of addresses reserved for non-ARP-capable SMBus devices.', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'RealtimeMemoryTiming', 'name': 'Realtime Memory Timing', 'help': 'When enabled, it will allow the system to perform realtime memory timing changes after MRC_DONE.', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SaGv', 'name': 'SA GV', 'help': 'System Agent dynamic frequency support and when enabled memory will be training at two different frequencies. Only effects ULX/ULT CPUs. 0:Disabled, 1:FixedPoint0, 2:FixedPoint1, 3:FixedPoint2, 4:FixedPoint3, 5:Enabled', 'option': '0:Disabled, 1:FixedLow, 2:FixedMid, 3:FixedHigh, 4:Enabled', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'DisPgCloseIdleTimeout', 'name': 'Page Close Idle Timeout', 'help': 'This option controls Page Close Idle Timeout', 'option': '0:Enabled, 1:Disabled', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PowerDownMode', 'name': 'Power Down Mode', 'help': 'This option controls command bus tristating during idle periods', 'option': '0x0:No Power Down, 0x1:APD, 0x6:PPD DLL OFF, 0xFF:Auto', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'VmxEnable', 'name': 'Enable or Disable VMX', 'help': 'Enable or Disable VMX; 0- Disable; <b>1- Enable</b>.', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'WrcFeatureEnable', 'name': 'WRC Feature', 'help': 'Enable/Disable WRC (Write Cache) feature of IOP. When feature is enabled, supports IO devices allocating onto the ring and into LLC. WRC is fused on by default.', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'HyperThreading', 'name': 'Hyper Threading Enable/Disable', 'help': 'Enable or Disable Hyper Threading; 0- Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'GtClosEnable', 'name': 'Enable Gt CLOS', 'help': '0(Default)=Disable, 1=Enable', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFF)', 'cname': 'IpuLaneUsed', 'name': 'Lane Used of CSI port', 'help': 'Lane Used of each CSI port', 'option': '0x1:x1, 0x2:x2, 0x3:x3, 0x4:x4, 0x8:x8', 'page': 'MEM_MISC', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFF)', 'cname': 'CsiSpeed', 'name': 'Speed of each CSI port', 'help': 'Speed of each CSI port', 'option': '0x0:Sensor default, 0x1:<416Mbps, 0x2:<1.5Gbps, 0x3:<2Gbps, 0x4:<2.5Gbps, 0x5:<4Gbps, 0x6:>4Gbps', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'DmiMaxLinkSpeed', 'name': 'DMI Max Link Speed', 'help': 'Auto (Default)(0x0)- Maximum possible link speed, Gen1(0x1)- Limit Link to Gen1 Speed, Gen2(0x2)- Limit Link to Gen2 Speed, Gen3(0x3):Limit Link to Gen3 Speed, Gen4(0x4):Limit Link to Gen4 Speed', 'option': '0x0:Auto, 0x1:Gen1, 0x2:Gen2, 0x3:Gen3, 0x4:Gen4', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x0, 0xFFFF)', 'cname': 'DmiAspm', 'name': 'DMI ASPM Configuration:{Combo', 'help': 'Set ASPM Configuration', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFF)', 'cname': 'DmiAspmCtrl', 'name': 'DMI ASPM Control Configuration:{Combo', 'help': 'Set ASPM Control configuration', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'Gen3EqPhase23Bypass', 'name': 'Enable/Disable CPU DMI GEN3 Phase 23 Bypass', 'help': 'CPU DMI GEN3 Phase 23 Bypass. Disabled(0x0)(Default)- Disable Phase 23 Bypass, Enabled(0x1)- Enable  Phase 23 Bypass', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'Gen3EqPhase3Bypass', 'name': 'Enable/Disable CPU DMI GEN3 Phase 3 Bypass', 'help': 'CPU DMI GEN3 Phase 3 Bypass. Disabled(0x0)(Default)- Disable Phase 3 Bypass, Enabled(0x1)- Enable  Phase 3 Bypass', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'MEM_MISC', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFF)', 'cname': 'DmiGen3Ltcpre', 'name': 'DMI Gen3 Transmitter Pre-Cursor Coefficient', 'help': 'Used for programming DMI Gen3 Transmitter Pre-Cursor Coefficient . Range- 0-10, 2 is default for each lane', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFF)', 'cname': 'DmiGen3DsPortRxPreset', 'name': 'DMI Gen3 Root port preset Rx values per lane', 'help': 'Used for programming DMI Gen3 preset values per lane. Range- 0-10, 1 is default for each lane', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFF)', 'cname': 'DmiGen3DsPortTxPreset', 'name': 'DMI Gen3 Root port preset Tx values per lane', 'help': 'Used for programming DMI Gen3 preset values per lane. Range- 0-10, 7 is default for each lane', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x00, 0xFFFFFFFFFFFFFFFF)', 'cname': 'DmiGen3RootPortPreset', 'name': 'DMI Gen3 Root port preset values per lane', 'help': 'Used for programming DMI Gen3 preset values per lane. Range- 0-9, 8 is default for each lane', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x00, 0xFFFFFFFFFFFFFFFF)', 'cname': 'DmiGen3EndPointPreset', 'name': 'DMI Gen3 End port preset values per lane', 'help': 'Used for programming DMI Gen3 preset values per lane. Range- 0-9, 7 is default for each lane', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x00, 0xFFFFFFFFFFFFFFFF)', 'cname': 'DmiGen3EndPointHint', 'name': 'DMI Gen3 End port Hint values per lane', 'help': 'Used for programming DMI Gen3 Hint values per lane. Range- 0-6, 2 is default for each lane', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFF)', 'cname': 'CpuDmiHwEqGen3CoeffListCm', 'name': 'PCIE Hw Eq Gen3 CoeffList Cm', 'help': 'CPU_PCIE_EQ_PARAM. Coefficient C-1.', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFF)', 'cname': 'CpuDmiHwEqGen3CoeffListCp', 'name': 'PCIE Hw Eq Gen3 CoeffList Cp', 'help': 'CPU_PCIE_EQ_PARAM. Coefficient C+1.', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFF)', 'cname': 'CpuDmiHwEqGen4CoeffListCm', 'name': 'DMI Hw Eq Gen4 CoeffList Cm', 'help': 'CPU_PCIE_EQ_PARAM. Coefficient C-1.', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFF)', 'cname': 'CpuDmiHwEqGen4CoeffListCp', 'name': 'DMI Hw Eq Gen4 CoeffList Cp', 'help': 'CPU_PCIE_EQ_PARAM. Coefficient C+1.', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFF)', 'cname': 'PchDmiHwEqGen3CoeffListCm', 'name': 'DMI Hw Eq Gen3 CoeffList Cm', 'help': 'PCH_DMI_EQ_PARAM. Coefficient C-1.', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFF)', 'cname': 'PchDmiHwEqGen3CoeffListCp', 'name': 'DMI Hw Eq Gen3 CoeffList Cp', 'help': 'PCH_DMI_EQ_PARAM. Coefficient C+1.', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'Gen3LtcoEnable', 'name': 'Enable/Disable CPU DMI Gen3 EQ Local Transmitter Coefficient Override Enable', 'help': 'Program Gen3 EQ Local Transmitter Coefficient Override. Disabled(0x0)(Default)- Disable Local Transmitter Coefficient Override, Enabled(0x1)- Enable  Local Transmitter Coefficient Override', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TcssItbtPcie0En', 'name': 'TCSS Thunderbolt PCIE Root Port 0 Enable', 'help': 'Set TCSS Thunderbolt PCIE Root Port 0. 0:Disabled  1:Enabled', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'MEM_MISC', 'condition': '($FEATURES_CFG_DATA.Features.S0ix == 0)'}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TcssItbtPcie1En', 'name': 'TCSS Thunderbolt PCIE Root Port 1 Enable', 'help': 'Set TCSS Thunderbolt PCIE Root Port 1. 0:Disabled  1:Enabled', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'MEM_MISC', 'condition': '($FEATURES_CFG_DATA.Features.S0ix == 0)'}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TcssItbtPcie2En', 'name': 'TCSS Thunderbolt PCIE Root Port 2 Enable', 'help': 'Set TCSS Thunderbolt PCIE Root Port 2. 0:Disabled  1:Enabled', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'MEM_MISC', 'condition': '($FEATURES_CFG_DATA.Features.S0ix == 0)'}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TcssItbtPcie3En', 'name': 'TCSS Thunderbolt PCIE Root Port 3 Enable', 'help': 'Set TCSS Thunderbolt PCIE Root Port 3. 0:Disabled  1:Enabled', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'MEM_MISC', 'condition': '($FEATURES_CFG_DATA.Features.S0ix == 0)'}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TcssXhciEn', 'name': 'TCSS USB HOST (xHCI) Enable', 'help': 'Set TCSS XHCI. 0:Disabled  1:Enabled - Must be enabled if xDCI is enabled below', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TcssDma0En', 'name': 'TCSS DMA0 Enable', 'help': 'Set TCSS DMA0. 0:Disabled  1:Enabled', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'MEM_MISC', 'condition': '($FEATURES_CFG_DATA.Features.S0ix == 0)'}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TcssDma1En', 'name': 'TCSS DMA1 Enable', 'help': 'Set TCSS DMA1. 0:Disabled  1:Enabled', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'MEM_MISC', 'condition': '($FEATURES_CFG_DATA.Features.S0ix == 0)'}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0x003F)', 'cname': 'UsbTcPortEnPreMem', 'name': 'TCSS USB Port Enable', 'help': 'Bitmap for per port enabling', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Combo', 'cname': 'TsegSize', 'name': 'Tseg Size', 'help': 'Size of SMRAM memory reserved. 0x400000 for Release build and 0x1000000 for Debug build', 'option': '0x0400000:4MB, 0x00800000:8MB, 0x01000000:16MB', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'UserBd', 'name': 'Board Type', 'help': 'MrcBoardType, Options are 0=Mobile/Mobile Halo, 1=Desktop/DT Halo, 5=ULT/ULX/Mobile Halo, 7=UP Server', 'option': '0:Mobile/Mobile Halo, 1:Desktop/DT Halo, 5:ULT/ULX/Mobile Halo, 7:UP Server', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'EnableC6Dram', 'name': 'C6DRAM power gating feature', 'help': "This policy indicates whether or not BIOS should allocate PRMRR memory for C6DRAM power gating feature.- 0- Don't allocate any PRMRR memory for C6DRAM power gating feature.- 1- Allocate PRMRR memory for C6DRAM power gating feature.", 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'CpuTraceHubMode', 'name': 'CPU Trace Hub Mode', 'help': "Select 'Host Debugger' if Trace Hub is used with host debugger tool or 'Target Debugger' if Trace Hub is used by target debugger software or 'Disable' trace hub functionality.", 'option': '0:Disable, 1:Target Debugger Mode, 2:Host Debugger Mode', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'CpuTraceHubMemReg0Size', 'name': 'CPU Trace Hub Memory Region 0', 'help': 'CPU Trace Hub Memory Region 0, The avaliable memory size is - 0MB, 1MB, 8MB, 64MB, 128MB, 256MB, 512MB. Note - Limitation of total buffer size (CPU + PCH) is 512MB.', 'option': '0:0, 1:1MB, 2:8MB, 3:64MB, 4:128MB, 5:256MB, 6:512MB', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'CpuTraceHubMemReg1Size', 'name': 'CPU Trace Hub Memory Region 1', 'help': 'CPU Trace Hub Memory Region 1. The avaliable memory size is - 0MB, 1MB, 8MB, 64MB, 128MB, 256MB, 512MB. Note - Limitation of total buffer size (CPU + PCH) is 512MB.', 'option': '0:0, 1:1MB, 2:8MB, 3:64MB, 4:128MB, 5:256MB, 6:512MB', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PchTraceHubMode', 'name': 'PCH Trace Hub Mode', 'help': "Select 'Host Debugger' if Trace Hub is used with host debugger tool or 'Target Debugger' if Trace Hub is used by target debugger software or 'Disable' trace hub functionality.", 'option': '0:Disable, 1:Target Debugger Mode, 2:Host Debugger Mode', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PchTraceHubMemReg0Size', 'name': 'PCH Trace Hub Memory Region 0 buffer Size', 'help': 'Specify size of Pch trace memory region 0 buffer, the size can be 0, 1MB, 8MB, 64MB, 128MB, 256MB, 512MB. Note - Limitation of total buffer size (PCH + CPU) is 512MB.', 'option': '0:0, 1:1MB, 2:8MB, 3:64MB, 4:128MB, 5:256MB, 6:512MB', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PchTraceHubMemReg1Size', 'name': 'PCH Trace Hub Memory Region 1 buffer Size', 'help': 'Specify size of Pch trace memory region 1 buffer, the size can be 0, 1MB, 8MB, 64MB, 128MB, 256MB, 512MB. Note - Limitation of total buffer size (PCH + CPU) is 512MB.', 'option': '0:0, 1:1MB, 2:8MB, 3:64MB, 4:128MB, 5:256MB, 6:512MB', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PlatformDebugConsent', 'name': 'Platform Debug Consent', 'help': "To 'opt-in' for debug, please select 'Enabled' with the desired debug probe type. Enabling this BIOS option may alter the default value of other debug-related BIOS options.\\Manual- Do not use Platform Debug Consent to override other debug-relevant policies, but the user must set each debug option manually, aimed at advanced users.\\nNote- DCI OOB (aka BSSB) uses CCA probe;[DCI OOB+DbC] and [USB2 DbC] have the same setting.", 'option': '0:Disabled, 1:Enabled (DCI OOB+[DbC]), 2:Enabled (DCI OOB), 3:Enabled (USB3 DbC), 4:Enabled (XDP/MIPI60), 5:Enabled (USB2 DbC), 6:Enable (2-wire DCI OOB), 7:Manual', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'Ddr4OneDpc', 'name': 'Platform Debug Consent', 'help': 'DDR4 1DPC performance feature for 2R DIMMs. Can be enabled on DIMM0 or DIMM1 only, or on both (default)', 'option': '0: Disabled, 1: Enabled on DIMM0 only, 2: Enabled on DIMM1 only, 3: Enabled', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x0F)', 'cname': 'FirstDimmBitMaskEcc', 'name': 'First ECC Dimm BitMask', 'help': "Defines which ECC DIMM should be populated first on a 2DPC board. Bit0: MC0 DIMM0, Bit1: MC0 DIMM1, Bit2: MC1 DIMM0, Bit3: MC1 DIMM1. For each MC, the first DIMM to be populated should be set to '1'", 'option': '0: Disabled, 1: Enabled on DIMM0 only, 2: Enabled on DIMM1 only, 3: Enabled', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'WRDS', 'name': 'Write DS Training', 'help': 'Enable/Disable Write DS Training', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'DciEn', 'name': 'DCI Enable', 'help': 'Determine if to enable DCI debug from host', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SkipExtGfxScan', 'name': 'Skip external display device scanning', 'help': 'Enable- Do not scan for external display device, Disable (Default)- Scan external display devices', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'LockPTMregs', 'name': 'Lock PCU Thermal Management registers', 'help': 'Lock PCU Thermal Management registers. Enable(Default)=1, Disable=0', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'MEM_MISC', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFF)', 'cname': 'PrmrrSize', 'name': 'PRMRR Size', 'help': 'Enable/Disable. 0: Disable, define default value of PrmrrSize , 1: enable. Supported values: 32MB: 0x2000000, 64MB: 0x4000000, 128 MB: 0x8000000, 256 MB: 0x10000000, 512 MB: 0x20000000', 'option': '', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'Lp5BankMode', 'name': 'LP5 Bank Mode', 'help': 'LP5 Bank Mode', 'option': '0: Auto, 1: 8 Bank Mode, 2: 16 Bank Mode, 3: BG Mode', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'Ibecc', 'name': 'Ibecc', 'help': 'In-Band ECC Support', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'IbeccOperationMode', 'name': 'IbeccOperationMode', 'help': 'In-Band ECC Operation Mode', 'option': '0:Protect base on address range, 1:Non-protected, 2:All protected', 'page': 'MEM_MISC', 'condition': '$MEMORY_CFG_DATA.Ibecc != 0'}, {'length': 64, 'value': '{', 'type': 'Combo', 'cname': 'IbeccProtectedRegionEnable', 'name': 'IbeccProtectedRegionEnable', 'help': 'In-Band ECC Protected Region Enable', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': '$MEMORY_CFG_DATA.Ibecc != 0'}, {'length': 256, 'value': '{', 'type': 'EditNum, HEX, (0x00000000,0x03FFFFFF)', 'cname': 'IbeccProtectedRegionBase', 'name': 'IbeccProtectedRegionBases', 'help': 'IBECC Protected Region Bases', 'option': '', 'page': 'MEM_MISC', 'condition': '$MEMORY_CFG_DATA.Ibecc != 0', 'struct': 'UINT32'}, {'length': 256, 'value': '{', 'type': 'EditNum, HEX, (0x00000000,0x03FFFFFF)', 'cname': 'IbeccProtectedRegionMask', 'name': 'IbeccProtectedRegionMasks', 'help': 'IBECC Protected Region Masks. Max value this can have is 0x03FFFFFF', 'option': '', 'page': 'MEM_MISC', 'condition': '$MEMORY_CFG_DATA.Ibecc != 0', 'struct': 'UINT32'}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'WdtDisableAndLock', 'name': 'Disable and Lock Watch Dog Register', 'help': 'Set 1 to clear WDT status, then disable and lock WDT registers.', 'option': '$EN_DIS', 'page': 'MEM_MISC', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'RMT', 'name': 'Rank Margin Tool', 'help': 'Enable/disable Rank Margin Tool.', 'option': '$EN_DIS', 'page': 'MEM_Training', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'BdatEnable', 'name': 'Generate BIOS Data ACPI Table', 'help': 'Enable- Generate BDAT for MRC RMT or SA PCIe data. Disable (Default)- Do not generate it', 'option': '$EN_DIS', 'page': 'MEM_Training', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'BdatTestType', 'name': 'BdatTestType', 'help': 'Indicates the type of Memory Training data to populate into the BDAT ACPI table.', 'option': '0:Rank Margin Tool, 1:Margin2D', 'page': 'MEM_Training', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'RMC', 'name': 'Retrain Margin Check', 'help': 'Enables/Disable Retrain Margin Check', 'option': '$EN_DIS', 'page': 'MEM_Training', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'MEMTST', 'name': 'Memory Test', 'help': 'Enables/Disable Memory Test', 'option': '$EN_DIS', 'page': 'MEM_Training', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ECT', 'name': 'Early Command Training', 'help': 'Enables/Disable Early Command Training', 'option': '$EN_DIS', 'page': 'MEM_Training', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'I2cPostCode', 'name': 'Enable/Disable I2C Postcode', 'help': 'Enable:Postcode via I2C, Disable: Postcode via Port80', 'option': '$EN_DIS', 'page': 'MEM_Training', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'DisableStarv2medPrioOnNewReq', 'name': 'Enable/Disable MC Starv2Med Priority on New Request', 'help': 'Enable: MC Starv2Med Priority, Disable: MC Starv2Med Priority', 'option': '$EN_DIS', 'page': 'MEM_Training', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Reserved', 'cname': 'Dummy', 'name': '', 'help': '', 'option': '', 'page': 'MEM_Training', 'condition': ''}, {'length': 24, 'value': 'x', 'type': 'Reserved', 'cname': '__reserved', 'name': '', 'help': '', 'option': '', 'page': 'MEM_Training', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'MEM_SPD', 'path': 'MEM_SPD0_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'MEM_SPD', 'condition': ''}, {'length': 4096, 'value': '{', 'type': 'Table', 'cname': 'MemorySpdPtr0', 'name': 'Memory SPD Data 0', 'help': 'Pointer to SPD data in Memory', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'MEM_SPD', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'MEM_SPD', 'path': 'MEM_SPD1_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'MEM_SPD', 'condition': ''}, {'length': 4096, 'value': '{', 'type': 'Table', 'cname': 'MemorySpdPtr1', 'name': 'Memory SPD Data 1', 'help': 'Pointer to SPD data in Memory', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'MEM_SPD', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'MEM_SPD', 'path': 'MEM_SPD2_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'MEM_SPD', 'condition': ''}, {'length': 4096, 'value': '{', 'type': 'Table', 'cname': 'MemorySpdPtr2', 'name': 'Memory SPD Data 2', 'help': 'Pointer to SPD data in Memory', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'MEM_SPD', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'MEM_SPD', 'path': 'MEM_SPD3_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'MEM_SPD', 'condition': ''}, {'length': 4096, 'value': '{', 'type': 'Table', 'cname': 'MemorySpdPtr3', 'name': 'Memory SPD Data 3', 'help': 'Pointer to SPD data in Memory', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'MEM_SPD', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'MEM_SPD', 'path': 'MEM_SPD4_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'MEM_SPD', 'condition': ''}, {'length': 4096, 'value': '{', 'type': 'Table', 'cname': 'MemorySpdPtr4', 'name': 'Memory SPD Data 4', 'help': 'Pointer to SPD data in Memory', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'MEM_SPD', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'MEM_SPD', 'path': 'MEM_SPD5_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'MEM_SPD', 'condition': ''}, {'length': 4096, 'value': '{', 'type': 'Table', 'cname': 'MemorySpdPtr5', 'name': 'Memory SPD Data 5', 'help': 'Pointer to SPD data in Memory', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'MEM_SPD', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'MEM_SPD', 'path': 'MEM_SPD6_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'MEM_SPD', 'condition': ''}, {'length': 4096, 'value': '{', 'type': 'Table', 'cname': 'MemorySpdPtr6', 'name': 'Memory SPD Data 6', 'help': 'Pointer to SPD data in Memory', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'MEM_SPD', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'MEM_SPD', 'path': 'MEM_SPD7_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'MEM_SPD', 'condition': ''}, {'length': 4096, 'value': '{', 'type': 'Table', 'cname': 'MemorySpdPtr7', 'name': 'Memory SPD Data 7', 'help': 'Pointer to SPD data in Memory', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'MEM_SPD', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'DYN', 'path': 'DYNAMIC_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'DYN', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'MrcTrainingEnforcement', 'name': 'MRC Training Enforcement', 'help': 'When enabled, it enforces memory training even if consistent memory parameters are available', 'option': '$EN_DIS', 'page': 'DYN', 'condition': ''}, {'length': 24, 'value': 'x', 'type': 'Reserved', 'cname': 'Dummy', 'name': '', 'help': '', 'option': '', 'page': 'DYN', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'SIL', 'path': 'SILICON_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'InterruptRemappingSupport', 'name': 'InterruptRemappingSupport', 'help': 'InterruptRemappingSupport', 'option': '$EN_DIS', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PchTsnEnable', 'name': 'Enable PCH TSN', 'help': 'Enable/disable TSN on the PCH.', 'option': '$EN_DIS', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PchTsnLinkSpeed', 'name': 'TSN Link Speed', 'help': 'Set TSN Link Speed. Only applicable for ADLN', 'option': '0: Reserved, 1: Reserved, 2: 38.4Mhz 2.5Gbps, 3: 38.4Mhz 1Gbps', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PchTsnMultiVcEnable', 'name': 'Enable TSN Multi-VC', 'help': 'Enable/disable Multi Virtual Channels(VC) in TSN.', 'option': '$EN_DIS', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'EnableItbm', 'name': 'Intel Turbo Boost Max Technology 3.0', 'help': 'Intel Turbo Boost Max Technology 3.0. 0- Disabled; <b>1- Enabled</b>', 'option': '$EN_DIS', 'page': 'SIL', 'condition': '($FEATURES_CFG_DATA.Features.S0ix == 0)'}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'AcSplitLock', 'name': 'AC Split Lock', 'help': 'Enable/Disable #AC check on split lock. <b>0- Disable</b>; 1- Enable.', 'option': '$EN_DIS', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PsfTccEnable', 'name': 'PSF Tcc', 'help': 'Psf Tcc (Time Coordinated Computing) Enable will decrease psf transaction latency by disable some psf power management features, 0- Disable, 1- Enable', 'option': '$EN_DIS', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PchDmiAspmCtrl', 'name': 'Pch Dmi Aspm Ctrl', 'help': 'ASPM configuration on the PCH side of the DMI/OPI Link. Default is <b>PchPcieAspmAutoConfig</b>', 'option': '0:Disabled, 1:L0s, 2:L1, 3:L0sL1, 4:Auto', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PchLegacyIoLowLatency', 'name': 'PCH Legacy IO Low Latency Enable', 'help': 'Set to enable low latency of legacy IO. <b>0- Disable</b>, 1- Enable', 'option': '$EN_DIS', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'RenderStandby', 'name': 'Enable/Disable IGFX RenderStandby', 'help': 'Enable(Default)- Enable IGFX RenderStandby, Disable- Disable IGFX RenderStandby', 'option': '$EN_DIS', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PmSupport', 'name': 'Enable/Disable IGFX PmSupport', 'help': 'Enable(Default)- Enable IGFX PmSupport, Disable- Disable IGFX PmSupport', 'option': '$EN_DIS', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'CpuPcieClockGating', 'name': 'CPU PCIe RootPort Clock Gating', 'help': 'Describes whether the PCI Express Clock Gating for each root port is enabled by platform modules. 0- Disable; 1- Enable.', 'option': '$EN_DIS', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'CpuPciePowerGating', 'name': 'CPU PCIe RootPort Power Gating', 'help': 'Describes whether the PCI Express Power Gating for each root port is enabled by platform modules. 0- Disable; 1- Enable.', 'option': '$EN_DIS', 'page': 'SIL', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'CpuPcieRpAspm', 'name': 'PCIE RP Aspm', 'help': 'The ASPM configuration of the root port (see- CPU_PCIE_ASPM_CONTROL). Default is CpuPcieAspmAutoConfig.', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'CpuPcieRpL1Substates', 'name': 'PCIE RP L1 Substates', 'help': 'The L1 Substates configuration of the root port (see- CPU_PCIE_L1SUBSTATES_CONTROL). Default is CpuPcieL1SubstatesL1_1_2.', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'EditNum, HEX, (0x00,0x00FFFFFF)', 'cname': 'CpuPcieRpPtmEnabled', 'name': 'PTM for PCIE RP Mask', 'help': 'Enable/disable Precision Time Measurement for PCIE Root Ports. 0- disable, 1- enable. One bit for each port, bit0 for port1, bit1 for port2, and so on.', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'EditNum, HEX, (0x00,0x00FFFFFF)', 'cname': 'CpuPcieRpVcEnabled', 'name': 'VC for PCIE RP Mask', 'help': 'Enable/disable Virtual Channel for PCIE Root Ports. 0- disable, 1- enable. One bit for each port, bit0 for port1, bit1 for port2, and so on.', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'EditNum, HEX, (0x00,0x00FFFFFF)', 'cname': 'CpuPcieRpMultiVcEnabled', 'name': 'Multi-VC for PCIE RP Mask', 'help': 'Enable/disable Multiple Virtual Channel for PCIE Root Ports. 0- disable, 1- enable. One bit for each port, bit0 for port1, bit1 for port2, and so on.', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'EnableTimedGpio0', 'name': 'Timed GPIO 0', 'help': 'Enable/disable Timed GPIO0    0- Disable; 1- Enable.', 'option': '$EN_DIS', 'page': 'SIL', 'condition': '($FEATURES_CFG_DATA.Features.S0ix == 0)'}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'EnableTimedGpio1', 'name': 'Timed GPIO 1', 'help': 'Enable/disable Timed GPIO1    0- Disable; 1- Enable.', 'option': '$EN_DIS', 'page': 'SIL', 'condition': '($FEATURES_CFG_DATA.Features.S0ix == 0)'}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SataEnable', 'name': 'Enable SATA', 'help': 'Enable/disable SATA controller.', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SataMode', 'name': 'SATA Mode', 'help': 'Select SATA controller working mode.', 'option': '0x0:AHCI, 0x1:RAID', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SataPwrOptEnable', 'name': 'PCH Sata Pwr Opt Enable', 'help': 'SATA Power Optimizer on PCH side.', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SataLedEnable', 'name': 'SATA LED', 'help': 'SATA LED indicating SATA controller activity. 0- disable, 1- enable', 'option': '0x1:Enabled, 0x0:Disabled', 'page': 'SIL', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFFFFFFFF)', 'cname': 'SataPortsEnable', 'name': 'Enable SATA ports', 'help': 'Enable/disable SATA ports. One byte for each port, byte0 for port0, byte1 for port1, and so on.', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFFFFFFFF)', 'cname': 'SataPortsDevSlp', 'name': 'Enable SATA DEVSLP Feature', 'help': 'Enable/disable SATA DEVSLP per port. 0 is disable, 1 is enable. One byte for each port, byte0 for port0, byte1 for port1, and so on.', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFFFFFFFF)', 'cname': 'SataPortsDmVal', 'name': 'Enable SATA Port DmVal', 'help': 'DITO multiplier. Default is 15.', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 128, 'value': '{', 'type': 'Table', 'cname': 'SataPortsDitoVal', 'name': 'Enable SATA Port DmVal', 'help': 'DEVSLP Idle Timeout (DITO), Default is 625.', 'option': '0:2:HEX, 1:2:HEX, 2:2:HEX, 3:2:HEX, 4:2:HEX, 5:2:HEX, 6:2:HEX, 7:2:HEX', 'page': 'SIL', 'condition': '', 'struct': 'UINT16'}, {'length': 128, 'value': '{', 'type': 'Table', 'cname': 'PortUsb20Enable', 'name': 'Enable USB2 ports', 'help': 'Enable/disable per USB2 ports. One byte for each port, byte0 for port0, byte1 for port1, and so on.', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'SIL', 'condition': ''}, {'length': 80, 'value': '{', 'type': 'Table', 'cname': 'PortUsb30Enable', 'name': 'Enable USB3 ports', 'help': 'Enable/disable per USB3 ports. One byte for each port, byte0 for port0, byte1 for port1, and so on.', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX', 'page': 'SIL', 'condition': ''}, {'length': 128, 'value': '{', 'type': 'Table', 'cname': 'Usb2OverCurrentPin', 'name': 'USB2 Port Over Current Pin', 'help': 'Describe the specific over current pin number of USB 2.0 Port N.', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'SIL', 'condition': ''}, {'length': 80, 'value': '{', 'type': 'Table', 'cname': 'Usb3OverCurrentPin', 'name': 'USB3 Port Over Current Pin', 'help': 'Describe the specific over current pin number of USB 3.0 Port N.', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX', 'page': 'SIL', 'condition': ''}, {'length': 128, 'value': '{', 'type': 'Table', 'cname': 'Usb2PhyPetxiset', 'name': 'USB Per Port HS Preemphasis Bias', 'help': 'USB Per Port HS Preemphasis Bias. 000b-0mV, 001b-11.25mV, 010b-16.9mV, 011b-28.15mV, 100b-28.15mV, 101b-39.35mV, 110b-45mV, 111b-56.3mV. One byte for each port.', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'SIL', 'condition': ''}, {'length': 128, 'value': '{', 'type': 'Table', 'cname': 'Usb2PhyPredeemp', 'name': 'USB Per Port HS Transmitter Emphasis', 'help': 'USB Per Port HS Transmitter Emphasis. 00b - Emphasis OFF, 01b - De-emphasis ON, 10b - Pre-emphasis ON, 11b - Pre-emphasis & De-emphasis ON. One byte for each port.', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'SIL', 'condition': ''}, {'length': 128, 'value': '{', 'type': 'Table', 'cname': 'Usb2PhyTxiset', 'name': 'USB Per Port HS Transmitter Bias', 'help': 'USB Per Port HS Transmitter Bias. 000b-0mV, 001b-11.25mV, 010b-16.9mV, 011b-28.15mV, 100b-28.15mV, 101b-39.35mV, 110b-45mV, 111b-56.3mV, One byte for each port.', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'SIL', 'condition': ''}, {'length': 128, 'value': '{', 'type': 'Table', 'cname': 'Usb2PhyPehalfbit', 'name': 'USB Per Port Half Bit Pre-emphasis', 'help': 'USB Per Port Half Bit Pre-emphasis. 1b - half-bit pre-emphasis, 0b - full-bit pre-emphasis. One byte for each port.', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'SIL', 'condition': ''}, {'length': 56, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFFFFFF)', 'cname': 'SerialIoUartMode', 'name': 'UARTn Device Mode', 'help': 'Selects Uart operation mode. N represents controller index- Uart0, Uart1, ... Available modes- 0:SerialIoUartDisabled, 1:SerialIoUartPci, 2:SerialIoUartHidden, 3:SerialIoUartCom, 4:SerialIoUartSkipInit', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 56, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFFFFFF)', 'cname': 'SerialIoUartPowerGating', 'name': 'Power Gating mode for each Serial IO UART that works in COM mode', 'help': 'Set Power Gating. 0- Disabled, 1- Enabled, 2- Auto', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 56, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFFFFFF)', 'cname': 'SerialIoUartDmaEnable', 'name': 'Enable Dma for each Serial IO UART that supports it', 'help': 'Set DMA/PIO mode. 0- Disabled, 1- Enabled', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 56, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFFFFFF)', 'cname': 'SerialIoUartAutoFlow', 'name': 'Enables UART hardware flow control, CTS and RTS lines', 'help': 'Enables UART hardware flow control, CTS and RTS lines.', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 56, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFFFFFF)', 'cname': 'SerialIoSpiMode', 'name': 'SPIn Device Mode', 'help': 'Selects SPI operation mode. N represents controller index- SPI0, SPI1, ... Available modes- 0:SerialIoSpiDisabled, 1:SerialIoSpiPci, 2:SerialIoSpiHidden', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 112, 'value': '{', 'type': 'Table', 'cname': 'SerialIoSpiCsPolarity', 'name': 'SPI<N> Chip Select Polarity', 'help': 'Sets polarity for each chip Select. Available options- 0:SerialIoSpiCsActiveLow, 1:SerialIoSpiCsActiveHigh', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX', 'page': 'SIL', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFFFFFFFFFFFF)', 'cname': 'SerialIoI2cMode', 'name': 'I2Cn Device Mode', 'help': 'Selects I2c operation mode. N represents controller index- I2c0, I2c1, ... Available modes- 0:SerialIoI2cDisabled, 1:SerialIoI2cPci, 2:SerialIoI2cHidden', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFFFFFFFF)', 'cname': 'PchSerialIoI2cPadsTermination', 'name': 'PCH SerialIo I2C Pads Termination', 'help': '0x0- Hardware default, 0x1- None, 0x13- 1kOhm weak pull-up, 0x15- 5kOhm weak pull-up, 0x19- 20kOhm weak pull-up - Enable/disable SerialIo I2C0,I2C1,... pads termination respectively. One byte for each controller, byte0 for I2C0, byte1 for I2C1, and so on.', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'CpuUsb3OverCurrentPin', 'name': 'CPU USB3 Port Over Current Pin', 'help': 'Describe the specific over current pin number of USBC Port N.', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 16, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0x1)', 'cname': 'PchUfsEnable', 'name': 'Enable PCH UFS', 'help': 'Enable/Disable UFS controllers 1 and 2. 0- Disable; 1- Enable.', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 24, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFF)', 'cname': 'PchIshI2cEnable', 'name': 'Enable PCH ISH I2C pins assigned', 'help': 'Set if ISH I2C native pins are to be enabled by BIOS. 0- Disable; 1- Enable.', 'option': '', 'page': 'SIL', 'condition': '($FEATURES_CFG_DATA.Features.S0ix == 0)'}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x0, 0xFFFFFFFFFFFFFFFF)', 'cname': 'PchIshGpEnable', 'name': 'Enable PCH ISH GP pins assigned', 'help': 'Set if ISH GP native pins are to be enabled by BIOS. 0- Disable; 1- Enable.', 'option': '', 'page': 'SIL', 'condition': '($FEATURES_CFG_DATA.Features.S0ix == 0)'}, {'length': 224, 'value': '{', 'type': 'Table', 'cname': 'PcieRpMaxPayload', 'name': 'PCIE RP Max Payload', 'help': 'Max Payload Size supported, Default 128B, see enum PCH_PCIE_MAX_PAYLOAD.', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'SIL', 'condition': ''}, {'length': 224, 'value': '{', 'type': 'Table', 'cname': 'PcieRpL1Substates', 'name': 'PCIE RP L1 Substates', 'help': 'The L1 Substates configuration of the root port (see- PCH_PCIE_L1SUBSTATES_CONTROL). Default is PchPcieL1SubstatesL1_1_2.', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'SIL', 'condition': ''}, {'length': 224, 'value': '{', 'type': 'Table', 'cname': 'PcieRpLtrEnable', 'name': 'PCIE RP Ltr Enable', 'help': 'Latency Tolerance Reporting Mechanism.', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'SIL', 'condition': ''}, {'length': 224, 'value': '{', 'type': 'Table', 'cname': 'PcieRpClkReqDetect', 'name': 'Enable PCIE RP Clk Req Detect', 'help': 'Probe CLKREQ# signal before enabling CLKREQ# based power management.', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'SIL', 'condition': ''}, {'length': 224, 'value': '{', 'type': 'Table', 'cname': 'PcieRpAdvancedErrorReporting', 'name': 'PCIE RP Advanced Error Report', 'help': 'Indicate whether the Advanced Error Reporting is enabled.', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'SIL', 'condition': ''}, {'length': 224, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'PcieRpAspm', 'name': 'PCIE RP Aspm', 'help': 'The ASPM configuration of the root port (see- PCH_PCIE_ASPM_CONTROL). Default is PchPcieAspmAutoConfig.', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 224, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'PciePtm', 'name': 'PCIe PTM enable/disable', 'help': 'Enable/disable Precision Time Measurement for PCIE Root Ports.', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 224, 'value': '{', 'type': 'Table', 'cname': 'PcieRpPcieSpeed', 'name': 'PCIE RP Pcie Speed', 'help': 'Determines each PCIE Port speed capability. 0- Auto; 1- Gen1; 2- Gen2; 3- Gen3 (see- PCIE_SPEED).', 'option': '0:1:HEX, 1:1:HEX, 2:1:HEX, 3:1:HEX, 4:1:HEX, 5:1:HEX, 6:1:HEX, 7:1:HEX, 8:1:HEX, 9:1:HEX, A:1:HEX, B:1:HEX, C:1:HEX, D:1:HEX, E:1:HEX, F:1:HEX', 'page': 'SIL', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFF)', 'cname': 'PtmEnabled', 'name': 'Enable/Disable PTM', 'help': 'This policy will enable/disable Precision Time Measurement for TCSS PCIe Root Ports', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x01,0x4)', 'cname': 'PchPmSlpAMinAssert', 'name': 'PCH Pm Slp A Min Assert', 'help': 'SLP_A Minimum Assertion Width Policy. Default is 2S', 'option': '', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Constant, Combo', 'cname': 'EcAvailable', 'name': 'Embedded Controller Availability', 'help': 'Describes whether Embedded Controller is availabile or not', 'option': '$EN_DIS', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'CpuCrashLogEnable', 'name': 'CPU CrashLog support', 'help': 'Enable CrashLog feature in CPU.', 'option': '$EN_DIS', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'CrashLogReporting', 'name': 'CrashLog BERT Reporting', 'help': 'Enable reporting CrashLog data in ACPI BERT. Requires FSP support for CrashLog Data Collection.', 'option': '$EN_DIS', 'page': 'SIL', 'condition': '$SILICON_CFG_DATA.CpuCrashLogEnable != 0'}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'OpioRecenter', 'name': 'Opio Recentering Ctrl', 'help': 'Opio Recentering Disabling for Pcie Latency Improvement', 'option': '$EN_DIS', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'L2QosEnumerationEn', 'name': 'L2 QOS Enumeration', 'help': 'Enable L2 Qos Enumerate', 'option': '$EN_DIS', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'IehMode', 'name': 'IEH Mode', 'help': 'Integrated Error Handler Mode', 'option': '0:Bypass, 1:Enable', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'D3HotEnable', 'name': 'Enable D3 Hot in TCSS', 'help': 'This policy will enable/disable D3 hot support in IOM', 'option': '$EN_DIS', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'D3ColdEnable', 'name': 'Enable D3 Cold in TCSS', 'help': 'This policy will enable/disable D3 cold support in IOM', 'option': '$EN_DIS', 'page': 'SIL', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'TcCstateLimit', 'name': 'TC State in TCSS', 'help': 'TC C-State Limit in IOM', 'option': '0:Disable, 1:1, 2:2, 4:4, 5:5, 6:6, 7:7, 10:10', 'page': 'SIL', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'VccSt', 'name': 'VCCST request for IOM', 'help': 'This policy will enable/disable VCCST and also decides if message would be replayed in S4/S5', 'option': '$EN_DIS', 'page': 'SIL', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'PWR', 'path': 'POWER_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'Hwp', 'name': 'Enable or Disable HWP', 'help': 'Enable or Disable HWP(Hardware P states) Support. 0- Disable; <b>1- Enable;</b> 2-3:Reserved', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'HdcControl', 'name': 'Hardware Duty Cycle Control', 'help': 'Hardware Duty Cycle Control configuration. 0- Disabled; <b>1- Enabled</b> 2-3:Reserved', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x80)', 'cname': 'PowerLimit1Time', 'name': 'Package Long duration turbo mode time', 'help': 'Package Long duration turbo mode time window in seconds. Valid values(Unit in seconds) 0 to 8 , 10 , 12 ,14 , 16 , 20 , 24 , 28 , 32 , 40 , 48 , 56 , 64 , 80 , 96 , 112 , 128', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PowerLimit2', 'name': 'Short Duration Turbo Mode', 'help': 'Enable or Disable short duration Turbo Mode. </b>0 - Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TurboPowerLimitLock', 'name': 'Turbo settings Lock', 'help': 'Lock all Turbo settings Enable/Disable; <b>0- Disable , </b> 1- Enable', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0xFF)', 'cname': 'PowerLimit3Time', 'name': 'Package PL3 time window', 'help': 'Package PL3 time window range for this policy from 0 to 64ms', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x64)', 'cname': 'PowerLimit3DutyCycle', 'name': 'Package PL3 Duty Cycle', 'help': 'Package PL3 Duty Cycle; Valid Range is 0 to 100', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PowerLimit3Lock', 'name': 'Package PL3 Lock', 'help': 'Package PL3 Lock Enable/Disable; <b>0- Disable ; <b> 1- Enable', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PowerLimit4Lock', 'name': 'Package PL4 Lock', 'help': 'Package PL4 Lock Enable/Disable; <b>0- Disable ; <b>1- Enable', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0xFF)', 'cname': 'TccActivationOffset', 'name': 'TCC Activation Offset', 'help': 'TCC Activation Offset. Offset from factory set TCC activation temperature at which the Thermal Control Circuit must be activated. TCC will be activated at TCC Activation Temperature, in volts.For SKL Y SKU, the recommended default for this policy is  <b>10</b>, For all other SKUs the recommended default are <b>0</b>', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TccOffsetClamp', 'name': 'Tcc Offset Clamp Enable/Disable', 'help': 'Tcc Offset Clamp for Runtime Average Temperature Limit (RATL) allows CPU to throttle below P1.For SKL Y SKU, the recommended default for this policy is <b>1- Enabled</b>, For all other SKUs the recommended default are  <b>0- Disabled</b>.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TccOffsetLock', 'name': 'Tcc Offset Lock', 'help': 'Tcc Offset Lock for Runtime Average Temperature Limit (RATL) to lock temperature target; <b>0- Disabled</b>; 1- Enabled.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TurboMode', 'name': 'Turbo Mode', 'help': 'Enable/Disable Turbo mode. 0- disable, 1- enable', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x28)', 'cname': 'NumberOfEntries', 'name': 'Custom Ratio State Entries', 'help': 'The number of custom ratio state entries, ranges from 0 to 40 for a valid custom ratio table.Sets the number of custom P-states. At least 2 states must be present', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x80)', 'cname': 'Custom1PowerLimit1Time', 'name': 'Custom Short term Power Limit time window', 'help': 'Short term Power Limit time window value for custom CTDP level 1. Valid Range 0 to 128', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0xFF)', 'cname': 'Custom1TurboActivationRatio', 'name': 'Custom Turbo Activation Ratio', 'help': 'Turbo Activation Ratio for custom cTDP level 1. Valid Range 0 to 255', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x2)', 'cname': 'Custom1ConfigTdpControl', 'name': 'Custom Config Tdp Control', 'help': 'Config Tdp Control (0/1/2) value for custom cTDP level 1. Valid Range is 0 to 2', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x80)', 'cname': 'Custom2PowerLimit1Time', 'name': 'Custom Short term Power Limit time window', 'help': 'Short term Power Limit time window value for custom CTDP level 2. Valid Range 0 to 128', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0xFF)', 'cname': 'Custom2TurboActivationRatio', 'name': 'Custom Turbo Activation Ratio', 'help': 'Turbo Activation Ratio for custom cTDP level 2. Valid Range 0 to 255', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x2)', 'cname': 'Custom2ConfigTdpControl', 'name': 'Custom Config Tdp Control', 'help': 'Config Tdp Control (0/1/2) value for custom cTDP level 1. Valid Range is 0 to 2', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x80)', 'cname': 'Custom3PowerLimit1Time', 'name': 'Custom Short term Power Limit time window', 'help': 'Short term Power Limit time window value for custom CTDP level 3. Valid Range 0 to 128', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0xFF)', 'cname': 'Custom3TurboActivationRatio', 'name': 'Custom Turbo Activation Ratio', 'help': 'Turbo Activation Ratio for custom cTDP level 3. Valid Range 0 to 255', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x2)', 'cname': 'Custom3ConfigTdpControl', 'name': 'Custom Config Tdp Control', 'help': 'Config Tdp Control (0/1/2) value for custom cTDP level 1. Valid Range is 0 to 2', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ConfigTdpLock', 'name': 'ConfigTdp mode settings Lock', 'help': 'Lock the ConfigTdp mode settings from runtime changes; <b>0- Disable</b>; 1- Enable', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ConfigTdpBios', 'name': 'Load Configurable TDP SSDT', 'help': 'Configure whether to load Configurable TDP SSDT; <b>0- Disable</b>; 1- Enable.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PsysPowerLimit1', 'name': 'PL1 Enable value', 'help': 'PL1 Enable value to limit average platform power. <b>0- Disable</b>; 1- Enable.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x80)', 'cname': 'PsysPowerLimit1Time', 'name': 'PL1 timewindow', 'help': 'PL1 timewindow in seconds.Valid values(Unit in seconds) 0 to 8 , 10 , 12 ,14 , 16 , 20 , 24 , 28 , 32 , 40 , 48 , 56 , 64 , 80 , 96 , 112 , 128', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PsysPowerLimit2', 'name': 'PL2 Enable Value', 'help': 'PL2 Enable activates the PL2 value to limit average platform power.<b>0- Disable</b>; 1- Enable.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'MlcStreamerPrefetcher', 'name': 'Enable or Disable MLC Streamer Prefetcher', 'help': 'Enable or Disable MLC Streamer Prefetcher; 0- Disable; <b>1- Enable</b>.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'MlcSpatialPrefetcher', 'name': 'Enable or Disable MLC Spatial Prefetcher', 'help': 'Enable or Disable MLC Spatial Prefetcher; 0- Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'MonitorMwaitEnable', 'name': 'Enable or Disable Monitor /MWAIT instructions', 'help': 'Enable or Disable Monitor /MWAIT instructions; 0- Disable; <b>1- Enable</b>.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'MachineCheckEnable', 'name': 'Enable or Disable initialization of machine check registers', 'help': 'Enable or Disable initialization of machine check registers; 0- Disable; <b>1- Enable</b>.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ApIdleManner', 'name': 'AP Idle Manner of waiting for SIPI', 'help': 'AP Idle Manner of waiting for SIPI; 1- HALT loop; <b>2- MWAIT loop</b>; 3- RUN loop.', 'option': '1:HALT loop, 2:MWAIT loop, 3:RUN loop', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ProcessorTraceOutputScheme', 'name': 'Control on Processor Trace output scheme', 'help': 'Control on Processor Trace output scheme; <b>0- Single Range Output</b>; 1- ToPA Output.', 'option': '0:Single Range Output, 1:ToPA Output', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ProcessorTraceEnable', 'name': 'Enable or Disable Processor Trace feature', 'help': 'Enable or Disable Processor Trace feature; <b>0- Disable</b>; 1- Enable.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'VoltageOptimization', 'name': 'Enable or Disable Voltage Optimization feature', 'help': 'Enable or Disable Voltage Optimization feature 0- Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'Eist', 'name': 'Enable or Disable Intel SpeedStep Technology', 'help': 'Enable or Disable Intel SpeedStep Technology. 0- Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'EnergyEfficientPState', 'name': 'Enable or Disable Energy Efficient P-state', 'help': 'Enable or Disable Energy Efficient P-state will be applied in Turbo mode. Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'EnergyEfficientTurbo', 'name': 'Enable or Disable Energy Efficient Turbo', 'help': 'Enable or Disable Energy Efficient Turbo, will be applied in Turbo mode. Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TStates', 'name': 'Enable or Disable T states', 'help': 'Enable or Disable T states; <b>0- Disable</b>; 1- Enable.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'BiProcHot', 'name': 'Enable or Disable Bi-Directional PROCHOT#', 'help': 'Enable or Disable Bi-Directional PROCHOT#; 0- Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'DisableProcHotOut', 'name': 'Enable or Disable PROCHOT# signal being driven externally', 'help': 'Enable or Disable PROCHOT# signal being driven externally; 0- Disable; <b>1- Enable</b>.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ProcHotResponse', 'name': 'Enable or Disable PROCHOT# Response', 'help': 'Enable or Disable PROCHOT# Response; <b>0- Disable</b>; 1- Enable.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'DisableVrThermalAlert', 'name': 'Enable or Disable VR Thermal Alert', 'help': 'Enable or Disable VR Thermal Alert; <b>0- Disable</b>; 1- Enable.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'EnableAllThermalFunctions', 'name': 'Enable or Disable Thermal Reporting', 'help': 'Enable or Disable Thermal Reporting through ACPI tables; 0- Disable; <b>1- Enable</b>.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ThermalMonitor', 'name': 'Enable or Disable Thermal Monitor', 'help': 'Enable or Disable Thermal Monitor; 0- Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'Cx', 'name': 'Enable or Disable CPU power states (C-states)', 'help': 'Enable or Disable CPU power states (C-states). 0- Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PmgCstCfgCtrlLock', 'name': 'Configure C-State Configuration Lock', 'help': 'Configure C-State Configuration Lock; 0- Disable; <b>1- Enable</b>.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'C1e', 'name': 'Enable or Disable Enhanced C-states', 'help': 'Enable or Disable Enhanced C-states. 0- Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PkgCStateDemotion', 'name': 'Enable or Disable Package Cstate Demotion', 'help': 'Enable or Disable Package Cstate Demotion. 0- Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PkgCStateUnDemotion', 'name': 'Enable or Disable Package Cstate UnDemotion', 'help': 'Enable or Disable Package Cstate UnDemotion. 0- Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'CStatePreWake', 'name': 'Enable or Disable CState-Pre wake', 'help': 'Enable or Disable CState-Pre wake. 0- Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'TimedMwait', 'name': 'Enable or Disable TimedMwait Support.', 'help': 'Enable or Disable TimedMwait Support. <b>0- Disable</b>; 1- Enable', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'CstCfgCtrIoMwaitRedirection', 'name': 'Enable or Disable IO to MWAIT redirection', 'help': 'Enable or Disable IO to MWAIT redirection; <b>0- Disable</b>; 1- Enable.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0xFF)', 'cname': 'PkgCStateLimit', 'name': 'Set the Max Pkg Cstate', 'help': 'Set the Max Pkg Cstate. Default set to Auto which limits the Max Pkg Cstate to deep C-state. Valid values 0 - C0/C1 , 1 - C2 , 2 - C3 , 3 - C6 , 4 - C7 , 5 - C7S , 6 - C8 , 7 - C9 , 8 - C10 , 254 - CPU Default , 255 - Auto', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x5)', 'cname': 'CstateLatencyControl0TimeUnit', 'name': 'TimeUnit for C-State Latency Control0', 'help': 'TimeUnit for C-State Latency Control0; Valid values 0 - 1ns , 1 - 32ns , 2 - 1024ns , 3 - 32768ns , 4 - 1048576ns , 5 - 33554432ns', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x5)', 'cname': 'CstateLatencyControl1TimeUnit', 'name': 'TimeUnit for C-State Latency Control1', 'help': 'TimeUnit for C-State Latency Control1;Valid values 0 - 1ns , 1 - 32ns , 2 - 1024ns , 3 - 32768ns , 4 - 1048576ns , 5 - 33554432ns', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x5)', 'cname': 'CstateLatencyControl2TimeUnit', 'name': 'TimeUnit for C-State Latency Control2', 'help': 'TimeUnit for C-State Latency Control2;Valid values 0 - 1ns , 1 - 32ns , 2 - 1024ns , 3 - 32768ns , 4 - 1048576ns , 5 - 33554432ns', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x5)', 'cname': 'CstateLatencyControl3TimeUnit', 'name': 'TimeUnit for C-State Latency Control3', 'help': 'TimeUnit for C-State Latency Control3;Valid values 0 - 1ns , 1 - 32ns , 2 - 1024ns , 3 - 32768ns , 4 - 1048576ns , 5 - 33554432ns', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x5)', 'cname': 'CstateLatencyControl4TimeUnit', 'name': 'TimeUnit for C-State Latency Control4', 'help': 'Time - 1ns , 1 - 32ns , 2 - 1024ns , 3 - 32768ns , 4 - 1048576ns , 5 - 33554432ns', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x5)', 'cname': 'CstateLatencyControl5TimeUnit', 'name': 'TimeUnit for C-State Latency Control5', 'help': 'TimeUnit for C-State Latency Control5;Valid values 0 - 1ns , 1 - 32ns , 2 - 1024ns , 3 - 32768ns , 4 - 1048576ns , 5 - 33554432ns', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ProcHotLock', 'name': 'Lock prochot configuration', 'help': 'Lock prochot configuration Enable/Disable; <b>0- Disable</b>; 1- Enable', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0xFF)', 'cname': 'ConfigTdpLevel', 'name': 'Configuration for boot TDP selection', 'help': 'Configuration for boot TDP selection; <b>0- TDP Nominal</b>; 1- TDP Down; 2- TDP Up;0xFF - Deactivate', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x7F)', 'cname': 'MaxRatio', 'name': 'Max P-State Ratio', 'help': 'Max P-State Ratio, Valid Range 0 to 0x7F', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 320, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'StateRatio', 'name': 'P-state ratios for custom P-state table', 'help': 'P-state ratios for custom P-state table. NumberOfEntries has valid range between 0 to 40. For no. of P-States supported(NumberOfEntries) , StateRatio[NumberOfEntries] are configurable. Valid Range of each entry is 0 to 0x7F', 'option': '', 'page': 'PWR', 'condition': '', 'struct': 'UINT8'}, {'length': 128, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)', 'cname': 'StateRatioMax16', 'name': 'P-state ratios for max 16 version of custom P-state table', 'help': 'P-state ratios for max 16 version of custom P-state table. This table is used for OS versions limited to a max of 16 P-States. If the first entry of this table is 0, or if Number of Entries is 16 or less, then this table will be ignored, and up to the top 16 values of the StateRatio table will be used instead. Valid Range of each entry is 0 to 0x7F', 'option': '', 'page': 'PWR', 'condition': '', 'struct': 'UINT8'}, {'length': 16, 'value': 'x4', 'type': 'EditNum, HEX, (0x00, 0x400)', 'cname': 'PsysPmax', 'name': 'Platform Power Pmax', 'help': 'PCODE MMIO Mailbox- Platform Power Pmax. <b>0 - Auto</b> Specified in 1/8 Watt increments. Range 0-1024 Watts. Value of 800 = 100W', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3FF)', 'cname': 'CstateLatencyControl1Irtl', 'name': 'Interrupt Response Time Limit of C-State LatencyContol1', 'help': 'Interrupt Response Time Limit of C-State LatencyContol1.Range of value 0 to 0x3FF', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3FF)', 'cname': 'CstateLatencyControl2Irtl', 'name': 'Interrupt Response Time Limit of C-State LatencyContol2', 'help': 'Interrupt Response Time Limit of C-State LatencyContol2.Range of value 0 to 0x3FF', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3FF)', 'cname': 'CstateLatencyControl3Irtl', 'name': 'Interrupt Response Time Limit of C-State LatencyContol3', 'help': 'Interrupt Response Time Limit of C-State LatencyContol3.Range of value 0 to 0x3FF', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3FF)', 'cname': 'CstateLatencyControl4Irtl', 'name': 'Interrupt Response Time Limit of C-State LatencyContol4', 'help': 'Interrupt Response Time Limit of C-State LatencyContol4.Range of value 0 to 0x3FF', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3FF)', 'cname': 'CstateLatencyControl5Irtl', 'name': 'Interrupt Response Time Limit of C-State LatencyContol5', 'help': 'Interrupt Response Time Limit of C-State LatencyContol5.Range of value 0 to 0x3FF', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3E7F83)', 'cname': 'PowerLimit1', 'name': 'Package Long duration turbo mode power limit', 'help': 'Package Long duration turbo mode power limit. Units are based on POWER_MGMT_CONFIG.CustomPowerUnit. Valid Range 0 to 4095875 in Step size of 125', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3E7F83)', 'cname': 'PowerLimit2Power', 'name': 'Package Short duration turbo mode power limit', 'help': 'Package Short duration turbo mode power limit. Units are based on POWER_MGMT_CONFIG.CustomPowerUnit.Valid Range 0 to 4095875 in Step size of 125', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3E7F83)', 'cname': 'PowerLimit3', 'name': 'Package PL3 power limit', 'help': 'Package PL3 power limit. Units are based on POWER_MGMT_CONFIG.CustomPowerUnit.Valid Range 0 to 4095875 in Step size of 125', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3E7F83)', 'cname': 'PowerLimit4', 'name': 'Package PL4 power limit', 'help': 'Package PL4 power limit. Units are based on POWER_MGMT_CONFIG.CustomPowerUnit.Valid Range 0 to 4095875 in Step size of 125', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0xFFFFFFFF)', 'cname': 'TccOffsetTimeWindowForRatl', 'name': 'Tcc Offset Time Window for RATL', 'help': '', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3E7F83)', 'cname': 'Custom1PowerLimit1', 'name': 'Short term Power Limit value for custom cTDP level 1', 'help': 'Short term Power Limit value for custom cTDP level 1. Units are based on POWER_MGMT_CONFIG.CustomPowerUnit.Valid Range 0 to 4095875 in Step size of 125', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3E7F83)', 'cname': 'Custom1PowerLimit2', 'name': 'Long term Power Limit value for custom cTDP level 1', 'help': 'Long term Power Limit value for custom cTDP level 1. Units are based on POWER_MGMT_CONFIG.CustomPowerUnit.Valid Range 0 to 4095875 in Step size of 125', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3E7F83)', 'cname': 'Custom2PowerLimit1', 'name': 'Short term Power Limit value for custom cTDP level 2', 'help': 'Short term Power Limit value for custom cTDP level 2. Units are based on POWER_MGMT_CONFIG.CustomPowerUnit.Valid Range 0 to 4095875 in Step size of 125', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3E7F83)', 'cname': 'Custom2PowerLimit2', 'name': 'Long term Power Limit value for custom cTDP level 2', 'help': 'Long term Power Limit value for custom cTDP level 2. Units are based on POWER_MGMT_CONFIG.CustomPowerUnit.Valid Range 0 to 4095875 in Step size of 125', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3E7F83)', 'cname': 'Custom3PowerLimit1', 'name': 'Short term Power Limit value for custom cTDP level 3', 'help': 'Short term Power Limit value for custom cTDP level 3. Units are based on POWER_MGMT_CONFIG.CustomPowerUnit.Valid Range 0 to 4095875 in Step size of 125', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3E7F83)', 'cname': 'Custom3PowerLimit2', 'name': 'Long term Power Limit value for custom cTDP level 3', 'help': 'Long term Power Limit value for custom cTDP level 3. Units are based on POWER_MGMT_CONFIG.CustomPowerUnit.Valid Range 0 to 4095875 in Step size of 125', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3E7F83)', 'cname': 'PsysPowerLimit1Power', 'name': 'Platform PL1 power', 'help': 'Platform PL1 power. Units are based on POWER_MGMT_CONFIG.CustomPowerUnit.Valid Range 0 to 4095875 in Step size of 125', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x3E7F83)', 'cname': 'PsysPowerLimit2Power', 'name': 'Platform PL2 power', 'help': 'Platform PL2 power. Units are based on POWER_MGMT_CONFIG.CustomPowerUnit.Valid Range 0 to 4095875 in Step size of 125', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'RaceToHalt', 'name': 'Race To Halt', 'help': 'Enable/Disable Race To Halt feature. RTH will dynamically increase CPU frequency in order to enter pkg C-State faster to reduce overall power. (RTH is controlled through MSR 1FC bit 20)Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ThreeStrikeCounterDisable', 'name': 'Set Three Strike Counter Disable', 'help': 'False (default)- Three Strike counter will be incremented and True- Prevents Three Strike counter from incrementing; <b>0- False</b>; 1- True.', 'option': '0:False, 1:True', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'HwpInterruptControl', 'name': 'Set HW P-State Interrupts Enabled for for MISC_PWR_MGMT', 'help': 'Set HW P-State Interrupts Enabled for for MISC_PWR_MGMT; <b>0- Disable</b>; 1- Enable.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'EnableItbm', 'name': 'Intel Turbo Boost Max Technology 3.0', 'help': 'Intel Turbo Boost Max Technology 3.0. 0- Disabled; <b>1- Enabled</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'C1StateAutoDemotion', 'name': 'Enable or Disable C1 Cstate Demotion', 'help': 'Enable or Disable C1 Cstate Demotion. Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'C1StateUnDemotion', 'name': 'Enable or Disable C1 Cstate UnDemotion', 'help': 'Enable or Disable C1 Cstate UnDemotion. Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x53)', 'cname': 'MinRingRatioLimit', 'name': 'Minimum Ring ratio limit override', 'help': 'Minimum Ring ratio limit override. <b>0- Hardware defaults.</b> Range- 0 - Max turbo ratio limit', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0x53)', 'cname': 'MaxRingRatioLimit', 'name': 'Maximum Ring ratio limit override', 'help': 'Maximum Ring ratio limit override. <b>0- Hardware defaults.</b> Range- 0 - Max turbo ratio limit', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'EnablePerCorePState', 'name': 'Enable or Disable Per Core P State OS control', 'help': 'Enable or Disable Per Core P State OS control. 0- Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'EnableHwpAutoPerCorePstate', 'name': 'Enable or Disable HwP Autonomous Per Core P State OS control', 'help': 'Enable or Disable HwP Autonomous Per Core P State OS control. 0- Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'EnableHwpAutoEppGrouping', 'name': 'Enable or Disable HwP Autonomous EPP Grouping', 'help': 'Enable or Disable HwP Autonomous EPP Grouping. 0- Disable; <b>1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'EnableEpbPeciOverride', 'name': 'Enable or Disable EPB override over PECI', 'help': 'Enable or Disable EPB override over PECI. <b>0- Disable;</b> 1- Enable', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'EnableFastMsrHwpReq', 'name': 'Enable or Disable Fast MSR for IA32_HWP_REQUEST', 'help': 'Enable or Disable Fast MSR for IA32_HWP_REQUEST. 0- Disable;<b> 1- Enable</b>', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 136, 'value': '{', 'type': 'Combo', 'cname': 'ReservedCpuPostMemTest', 'name': 'ReservedCpuPostMemTest', 'help': 'Reserved for CPU Post-Mem Test', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 40, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFF)', 'cname': 'Psi3Enable', 'name': 'Power State 3 enable/disable', 'help': 'PCODE MMIO Mailbox- Power State 3 enable/disable; 0- Disable; <b>1- Enable</b>. For all VR Indexes', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 40, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFF)', 'cname': 'Psi4Enable', 'name': 'Power State 4 enable/disable', 'help': 'PCODE MMIO Mailbox- Power State 4 enable/disable; 0- Disable; <b>1- Enable</b>.For all VR Indexes', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 80, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFF)', 'cname': 'ImonSlope', 'name': 'Imon slope correction', 'help': 'PCODE MMIO Mailbox- Imon slope correction. Specified in 1/100 increment values. Range is 0-200. 125 = 1.25. <b>0- Auto</b>.For all VR Indexes', 'option': '', 'page': 'PWR', 'condition': '', 'struct': 'UINT16'}, {'length': 80, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFF)', 'cname': 'ImoniOffset', 'name': 'Imon offset correction', 'help': "PCODE MMIO Mailbox- Imon offset correction. Value is a 2's complement signed integer. Units 1/1000, Range 0-63999. For an offset = 12.580, use 12580. <b>0- Auto</b>", 'option': '', 'page': 'PWR', 'condition': '', 'struct': 'UINT16'}, {'length': 40, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFF)', 'cname': 'VrConfigEnable', 'name': 'Enable/Disable BIOS configuration of VR', 'help': 'Enable/Disable BIOS configuration of VR; <b>0- Disable</b>; 1- Enable.For all VR Indexes', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 40, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFF)', 'cname': 'TdcEnable', 'name': 'Thermal Design Current enable/disable', 'help': 'PCODE MMIO Mailbox- Thermal Design Current enable/disable; <b>0- Disable</b>; 1- Enable.For all VR Indexes', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 40, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFF)', 'cname': 'TdcTimeWindow', 'name': 'Thermal Design Current time window', 'help': 'PCODE MMIO Mailbox- Thermal Design Current time window. Defined in milli seconds. Valid Values 1 - 1ms , 2 - 2ms , 3 - 3ms , 4 - 4ms , 5 - 5ms , 6 - 6ms , 7 - 7ms , 8 - 8ms , 10 - 10ms.For all VR Indexe', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 40, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFF)', 'cname': 'TdcLock', 'name': 'Thermal Design Current Lock', 'help': 'PCODE MMIO Mailbox- Thermal Design Current Lock; <b>0- Disable</b>; 1- Enable.For all VR Indexes', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00,0xC8)', 'cname': 'PsysSlope', 'name': 'Platform Psys slope correction', 'help': 'PCODE MMIO Mailbox- Platform Psys slope correction. <b>0 - Auto</b> Specified in 1/100 increment values. Range is 0-200. 125 = 1.25', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x00,0xFF)', 'cname': 'PsysOffset', 'name': 'Platform Psys offset correction', 'help': 'PCODE MMIO Mailbox- Platform Psys offset correction. <b>0 - Auto</b> Units 1/4, Range 0-255. Value of 100 = 100/4 = 25 offset', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'AcousticNoiseMitigation', 'name': 'Acoustic Noise Mitigation feature', 'help': 'Enable or Disable Acoustic Noise Mitigation feature. <b>0- Disabled</b>; 1- Enabled', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'FastPkgCRampDisableIa', 'name': 'Disable Fast Slew Rate for Deep Package C States for VR IA domain', 'help': 'Disable Fast Slew Rate for Deep Package C States based on Acoustic Noise Mitigation feature enabled. <b>0- False</b>; 1- True', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SlowSlewRateForIa', 'name': 'Slew Rate configuration for Deep Package C States for VR IA domain', 'help': 'Slew Rate configuration for Deep Package C States for VR IA domain based on Acoustic Noise Mitigation feature enabled. <b>0- Fast/2</b>; 1- Fast/4; 2- Fast/8; 3- Fast/16', 'option': '0:Fast/2, 1:Fast/4, 2:Fast/8, 3:Fast/16', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SlowSlewRateForGt', 'name': 'Slew Rate configuration for Deep Package C States for VR GT domain', 'help': 'Slew Rate configuration for Deep Package C States for VR GT domain based on Acoustic Noise Mitigation feature enabled. <b>0- Fast/2</b>; 1- Fast/4; 2- Fast/8; 3- Fast/16', 'option': '0:Fast/2, 1:Fast/4, 2:Fast/8, 3:Fast/16', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SlowSlewRateForSa', 'name': 'Slew Rate configuration for Deep Package C States for VR SA domain', 'help': 'Slew Rate configuration for Deep Package C States for VR SA domain based on Acoustic Noise Mitigation feature enabled. <b>0- Fast/2</b>; 1- Fast/4; 2- Fast/8; 3- Fast/16', 'option': '0:Fast/2, 1:Fast/4, 2:Fast/8, 3:Fast/16', 'page': 'PWR', 'condition': ''}, {'length': 80, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFF)', 'cname': 'TdcCurrentLimit', 'name': 'Thermal Design Current current limit', 'help': 'PCODE MMIO Mailbox- Thermal Design Current current limit. Specified in 1/8A units. Range is 0-4095. 1000 = 125A. <b>0- Auto</b>. For all VR Indexes', 'option': '', 'page': 'PWR', 'condition': '', 'struct': 'UINT16'}, {'length': 80, 'value': '{', 'type': 'Reserved', 'cname': 'AcLoadline', 'name': 'AcLoadline}TYPE:{EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFF)', 'help': 'PCODE MMIO Mailbox- AcLoadline in 1/100 mOhms (ie. 1250 = 12.50 mOhm); Range is 0-6249. <b>Intel Recommended Defaults vary by domain and SKU.', 'option': '', 'page': 'PWR', 'condition': '', 'struct': 'UINT16'}, {'length': 80, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFF)', 'cname': 'DcLoadline', 'name': 'DcLoadline', 'help': 'PCODE MMIO Mailbox- DcLoadline in 1/100 mOhms (ie. 1250 = 12.50 mOhm); Range is 0-6249.<b>Intel Recommended Defaults vary by domain and SKU.</b>', 'option': '', 'page': 'PWR', 'condition': '', 'struct': 'UINT16'}, {'length': 80, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFF)', 'cname': 'Psi1Threshold', 'name': 'Power State 1 Threshold current', 'help': 'PCODE MMIO Mailbox- Power State 1 current cuttof in 1/4 Amp increments. Range is 0-128A.', 'option': '', 'page': 'PWR', 'condition': '', 'struct': 'UINT16'}, {'length': 80, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFF)', 'cname': 'Psi2Threshold', 'name': 'Power State 2 Threshold current', 'help': 'PCODE MMIO Mailbox- Power State 2 current cuttof in 1/4 Amp increments. Range is 0-128A.', 'option': '', 'page': 'PWR', 'condition': '', 'struct': 'UINT16'}, {'length': 80, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFF)', 'cname': 'Psi3Threshold', 'name': 'Power State 3 Threshold current', 'help': 'PCODE MMIO Mailbox- Power State 3 current cuttof in 1/4 Amp increments. Range is 0-128A.', 'option': '', 'page': 'PWR', 'condition': '', 'struct': 'UINT16'}, {'length': 80, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFF)', 'cname': 'IccMax', 'name': 'Icc Max limit', 'help': 'PCODE MMIO Mailbox- VR Icc Max limit. 0-255A in 1/4 A units. 400 = 100A', 'option': '', 'page': 'PWR', 'condition': '', 'struct': 'UINT16'}, {'length': 80, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFFFFFF)', 'cname': 'VrVoltageLimit', 'name': 'VR Voltage Limit', 'help': 'PCODE MMIO Mailbox- VR Voltage Limit. Range is 0-7999mV.', 'option': '', 'page': 'PWR', 'condition': '', 'struct': 'UINT16'}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'FastPkgCRampDisableGt', 'name': 'Disable Fast Slew Rate for Deep Package C States for VR GT domain', 'help': 'Disable Fast Slew Rate for Deep Package C States based on Acoustic Noise Mitigation feature enabled. <b>0- False</b>; 1- True', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'FastPkgCRampDisableSa', 'name': 'Disable Fast Slew Rate for Deep Package C States for VR SA domain', 'help': 'Disable Fast Slew Rate for Deep Package C States based on Acoustic Noise Mitigation feature enabled. <b>0- False</b>; 1- True', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SendVrMbxCmd', 'name': 'Enable VR specific mailbox command', 'help': 'VR specific mailbox commands. <b>00b - no VR specific command sent.</b>  01b - A VR mailbox command specifically for the MPS IMPV8 VR will be sent. 10b - VR specific command sent for PS4 exit issue. 11b - Reserved.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SkipMpInit', 'name': 'Skip Multi-Processor Initialization', 'help': 'When this is skipped, boot loader must initialize processors before SilicionInit API. </b>0- Initialize; <b>1- Skip', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0xFFFF)', 'cname': 'FivrRfiFrequency', 'name': 'FIVR RFI Frequency', 'help': 'PCODE MMIO Mailbox- Set the desired RFI frequency, in increments of 100KHz. <b>0- Auto</b>. Range varies based on XTAL clock- 0-1918 (Up to 191.8HMz) for 24MHz clock; 0-1535 (Up to 153.5MHz) for 19MHz clock.', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0xFF)', 'cname': 'FivrSpreadSpectrum', 'name': 'FIVR RFI Spread Spectrum', 'help': 'PCODE MMIO Mailbox- FIVR RFI Spread Spectrum, in 0.1% increments. <b>0- 0%</b>; Range- 0.0% to 10.0% (0-100).', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'FastPkgCRampDisableFivr', 'name': 'Disable Fast Slew Rate for Deep Package C States for VR FIVR domain', 'help': 'Disable Fast Slew Rate for Deep Package C States based on Acoustic Noise Mitigation feature enabled. <b>0- False</b>; 1- True', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'SlowSlewRateForFivr', 'name': 'Slew Rate configuration for Deep Package C States for VR FIVR domain', 'help': 'Slew Rate configuration for Deep Package C States for VR FIVR domain based on Acoustic Noise Mitigation feature enabled. <b>0- Fast/2</b>; 1- Fast/4; 2- Fast/8; 3- Fast/16', 'option': '0:Fast/2, 1:Fast/4, 2:Fast/8, 3:Fast/16', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0xFFFFFFFF)', 'cname': 'CpuBistData', 'name': 'CpuBistData', 'help': 'Pointer CPU BIST Data', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0xFFFFFFFF)', 'cname': 'CpuMpPpi', 'name': 'CpuMpPpi', 'help': 'Pointer for CpuMpPpi', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x0,0xFFFFFFFF)', 'cname': 'CpuMpHob', 'name': 'CpuMpHob', 'help': 'Pointer for CpuMpHob. This is optional data buffer for CpuMpPpi usage.', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 128, 'value': '{', 'type': 'Reserved', 'cname': 'CpuPostMemRsvd', 'name': '', 'help': '', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'EnableMinVoltageOverride', 'name': 'Enable or Disable Minimum Voltage Override', 'help': 'Enable or disable Minimum Voltage overrides ; <b>0- Disable</b>; 1- Enable.', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'EditNum, HEX, (0x00,0x7CF)', 'cname': 'MinVoltageRuntime', 'name': 'Min Voltage for Runtime', 'help': 'PCODE MMIO Mailbox- Minimum voltage for runtime. Valid if EnableMinVoltageOverride = 1. Range 0 to 1999mV. <b> 0- 0mV </b>', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 64, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0xFFFFFFFFFFFFFFFF)', 'cname': 'ProcessorTraceMemBase', 'name': 'Base of memory region allocated for Processor Trace', 'help': 'Base address of memory region allocated for Processor Trace. Processor Trace requires 2^N alignment and size in bytes per thread, from 4KB to 128MB. <b>0- Disable</b>', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0x00, 0xFFFFFFFF)', 'cname': 'ProcessorTraceMemLength', 'name': 'Memory region allocation for Processor Trace', 'help': 'Length in bytes of memory region allocated for Processor Trace. Processor Trace requires 2^N alignment and size in bytes per thread, from 4KB to 128MB. <b>0- Disable</b>', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'EditNum, HEX, (0x00,0x7CF)', 'cname': 'MinVoltageC8', 'name': 'Min Voltage for C8', 'help': 'PCODE MMIO Mailbox- Minimum voltage for C8. Valid if EnableMinVoltageOverride = 1. Range 0 to 1999mV. <b> 0- 0mV </b>', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'Combo', 'cname': 'ReservedCpuPostMemProduction', 'name': 'ReservedCpuPostMemProduction', 'help': 'Reserved for CPU Post-Mem Production', 'option': '$EN_DIS', 'page': 'PWR', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFF)', 'cname': 'TurboRatioLimitRatio', 'name': 'Turbo Ratio Limit Ratio array', 'help': 'TurboRatioLimitRatio[7-0] will pair with TurboRatioLimitNumCore[7-0] to determine the active core ranges for each frequency point.', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x00, 0xFFFFFFFF)', 'cname': 'TurboRatioLimitNumCore', 'name': 'Turbo Ratio Limit Num Core array', 'help': 'TurboRatioLimitNumCore[7-0] will pair with TurboRatioLimitRatio[7-0] to determine the active core ranges for each frequency point.', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFF)', 'cname': 'AtomTurboRatioLimitRatio', 'name': 'Turbo Ratio Limit Ratio array', 'help': 'AtomTurboRatioLimitRatio[7-0] will pair with AtomTurboRatioLimitNumCore[7-0] to determine the active core ranges for each frequency point.', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 64, 'value': '{', 'type': 'EditNum, HEX, (0x00,0xFFFFFFFFFFFFFFFF)', 'cname': 'AtomTurboRatioLimitNumCore', 'name': 'Turbo Ratio Limit Ratio array', 'help': 'AtomTurboRatioLimitNumCore[7-0] will pair with AtomTurboRatioLimitRatio[7-0] to determine the active core ranges for each frequency point.', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'Reserved', 'cname': 'Dummy', 'name': '', 'help': '', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 8, 'type': 'Reserved', 'cname': '__reserved', 'name': '', 'help': '', 'option': '', 'page': 'PWR', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'PSD', 'path': 'PSD_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'PSD', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Combo', 'cname': 'EnablePsd', 'name': 'Platform Security Discovery (PSD)', 'help': 'Enable/Disable Platform Security Discovery (PSD)', 'option': '0:Disabled, 1:Enabled', 'page': 'PSD', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'PEP', 'path': 'PEP_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepSataContraints', 'name': 'Low Power constraints Configuration for sata', 'help': '0:None, 1:Adapter D0/F1, 2:Raid, 3:Adapter D3', 'option': '0:None, 1:Adapter D0/F1, 2:Raid, 3:Adapter D3', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepUart', 'name': 'Enable/disable Low Power constraints Uart', 'help': 'Enable- Enable UART, Disable- Disable UART', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepI2c0', 'name': 'Enable/disable Low Power constraints I2C0', 'help': 'Enable- Enable I2c0, Disable- Disable I2c0', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepI2c1', 'name': 'Enable/disable Low Power constraints I2C1', 'help': 'Enable- Enable I2c1, Disable- Disable I2c1', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepXhci', 'name': 'Enable/disable Low Power constraints Xhci', 'help': 'Enable- Enable Xhci, Disable- Disable Xhci', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepAudio', 'name': 'Enable/disable Low Power constraints Audio', 'help': 'Enable- Enable Audio, Disable- Disable Audio', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepGfx', 'name': 'Enable/disable Low Power constraints Gfx', 'help': 'Enable- Enable Gfx , Disable- Disable Gfx', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepCpu', 'name': 'Enable/disable Low Power constraints Cpu', 'help': 'Enable- Enable Cpu , Disable- Disable Cpu', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepEmmc', 'name': 'Enable/disable Low Power constraints eMMC', 'help': 'Enable- Enable eMMC , Disable- Disable eMMC', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepI2c2', 'name': 'Enable/disable Low Power constraints I2C2', 'help': 'Enable- Enable I2c2, Disable- Disable I2c2', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepI2c3', 'name': 'Enable/disable Low Power constraints I2C3', 'help': 'Enable- Enable I2c3, Disable- Disable I2c3', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepI2c4', 'name': 'Enable/disable Low Power constraints I2C4', 'help': 'Enable- Enable I2c4, Disable- Disable I2c4', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepI2c5', 'name': 'Enable/disable Low Power constraints I2C5', 'help': 'Enable- Enable I2c5, Disable- Disable I2c5', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepI2c6', 'name': 'Enable/disable Low Power constraints I2C6', 'help': 'Enable- Enable I2c6, Disable- Disable I2c6', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepI2c7', 'name': 'Enable/disable Low Power constraints I2C7', 'help': 'Enable- Enable I2c7, Disable- Disable I2c7', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepSpi', 'name': 'Enable/disable Low Power constraints SPI', 'help': 'Enable- Enable SPI, Disable- Disable SPI', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepIpu', 'name': 'Enable/disable Low Power constraints Ipu', 'help': 'Enable- Enable Ipu, Disable- Disable Ipu', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepCsme', 'name': 'Enable/disable Low Power constraints Csme', 'help': 'Enable- Enable Csme, Disable- Disable Csme', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepGbe', 'name': 'Enable/disable Low Power constraints Gbe', 'help': 'Enable- Enable Gbe, Disable- Disable Gbe', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepThc0', 'name': 'Enable/disable Low Power constraints Thc0', 'help': 'Enable- Enable Thc0, Disable- Disable Thc0', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepThc1', 'name': 'Enable/disable Low Power constraints Thc1', 'help': 'Enable- Enable Thc1, Disable- Disable Thc1', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepTcss', 'name': 'Enable/disable Low Power constraints Tcss', 'help': 'Enable- Enable Tcss , Disable- Disable Tcss', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepGna', 'name': 'Enable/disable Low Power constraints Gna', 'help': 'Enable- Enable Gna , Disable- Disable Gna', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepVmd', 'name': 'Enable/disable Low Power constraints Vmd', 'help': 'Enable- Enable Vmd , Disable- Disable Vmd', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepHeci3', 'name': 'Enable/disable Low Power constraints Heci3', 'help': 'Enable- Enable Heci3 , Disable- Disable Heci3', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepPcieStorage', 'name': 'Low Power constraints Configuration for Pcie Storage', 'help': '0:No constraint, 1:Pcie D0/F1, 3:Pcie D3', 'option': '0:No constraint, 1:Pcie D0/F1, 3:Pcie D3', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepPcieLan', 'name': 'Low Power constraints Configuration for LAN', 'help': '0:No constraint, 1:Pcie D0/F1, 3:Pcie D3', 'option': '0:No constraint, 1:Pcie D0/F1, 3:Pcie D3', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepPcieWlan', 'name': 'Low Power constraints Configuration for WLAN', 'help': '0:No constraint, 1:Pcie D0/F1, 3:Pcie D3', 'option': '0:No constraint, 1:Pcie D0/F1, 3:Pcie D3', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepPcieGfx', 'name': 'Low Power constraints Configuration for Gfx', 'help': '0:No constraint, 1:Pcie D0/F1, 3:Pcie D3', 'option': '0:No constraint, 1:Pcie D0/F1, 3:Pcie D3', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepPcieOther', 'name': 'Low Power constraints Configuration for Other', 'help': '0:No constraint, 1:Pcie D0/F1, 3:Pcie D3', 'option': '0:No constraint, 1:Pcie D0/F1, 3:Pcie D3', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepPcieDg', 'name': 'Enable/disable Low Power constraints PcieDg', 'help': 'Enable- Enable PcieDg , Disable(Default)- Disable PcieDg', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepUfs0', 'name': 'Enable/disable Low Power constraints Ufs0', 'help': 'Enable- Enable Ufs0 , Disable(Default)- Disable Ufs0', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PepUfs1', 'name': 'Enable/disable Low Power constraints Ufs1', 'help': 'Enable- Enable Ufs0 , Disable(Default)- Disable Ufs1', 'option': '$EN_DIS', 'page': 'PEP', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Reserved', 'cname': 'Dummy', 'name': '', 'help': '', 'option': '', 'page': 'PEP', 'condition': ''}, {'length': 16, 'type': 'Reserved', 'cname': '__reserved', 'name': '', 'help': '', 'option': '', 'page': 'PEP', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'FUSA', 'path': 'FUSA_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'FUSA', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'FusaPeriodicScanBist0', 'name': 'Periodic Scan BIST - E-cores Module 0', 'help': 'Enabling this will execute periodic scan BIST during boot on E-cores Module 0, 0: Disable, 1: Enable', 'option': '$EN_DIS', 'page': 'FUSA', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'FusaPeriodicScanBist1', 'name': 'Periodic Scan BIST - E-cores Module 1', 'help': 'Enabling this will execute periodic scan BIST during boot on E-cores Module 1, 0: Disable, 1: Enable', 'option': '$EN_DIS', 'page': 'FUSA', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'FusaPeriodicArrayBist0', 'name': 'Periodic Array BIST - E-cores Module 0', 'help': 'Enabling this will execute periodic array BIST during boot on E-cores Module 0, 0: Disable, 1: Enable', 'option': '$EN_DIS', 'page': 'FUSA', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'FusaPeriodicArrayBist1', 'name': 'Periodic Array BIST - E-cores Module 1', 'help': 'Enabling this will execute periodic array BIST during boot on E-cores Module 1, 0: Disable, 1: Enable', 'option': '$EN_DIS', 'page': 'FUSA', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'Module0Lockstep', 'name': 'Fusa Module 0 Lockstep Configuration', 'help': 'Enable/Disable Lockstep for Atom module 0, which has 4 cores;', 'option': '0: Disable lockstep, 1: Enable lockstep for Core 0 with Core 1; Core 2 with Core 3, 2: Enable lockstep for Core 0 with Core 1, 3: Enable lockstep for Core 2 with Core 3', 'page': 'FUSA', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'Module1Lockstep', 'name': 'Fusa Module 1 Lockstep Configuration', 'help': 'Enable/Disable Lockstep for Atom module 1, which has 4 cores;', 'option': '0: Disable lockstep, 1: Enable lockstep for Core 0 with Core 1; Core 2 with Core 3, 2: Enable lockstep for Core 0 with Core 1, 3: Enable lockstep for Core 2 with Core 3', 'page': 'FUSA', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'DisplayFusaConfigEnable', 'name': 'FuSa Display Parity', 'help': 'Display Parity and error reporting configuration', 'option': '$EN_DIS', 'page': 'FUSA', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'GraphicFusaConfigEnable', 'name': 'FuSa Graphics Parity', 'help': 'GT Parity and error reporting configuration', 'option': '$EN_DIS', 'page': 'FUSA', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'OpioFusaConfigEnable', 'name': 'FuSa OPI Parity', 'help': 'OPI Parity and error reporting configuration', 'option': '$EN_DIS', 'page': 'FUSA', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'IopFusaConfigEnable', 'name': 'FuSa IOP Parity', 'help': 'IOP Parity and error reporting configuration', 'option': '$EN_DIS', 'page': 'FUSA', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PsfFusaConfigEnable', 'name': 'FuSa PSF Parity', 'help': 'PSF Parity and error reporting configuration', 'option': '$EN_DIS', 'page': 'FUSA', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'McParity', 'name': 'FuSa MC/CMF Parity', 'help': 'MC and CMF Parity and error reporting configuration', 'option': '$EN_DIS', 'page': 'FUSA', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'IbeccParity', 'name': 'FuSa IBECC Parity', 'help': 'IBECC Parity and error reporting configuration', 'option': '$EN_DIS', 'page': 'FUSA', 'condition': ''}, {'length': 8, 'type': 'EditNum, DEC, (0,2)', 'cname': 'DiagGspiCtrlr', 'name': 'Index of GSPI controller to send FuSa diagnostic results.', 'help': 'GSPI Controller index for sending FuSa diagnostic results. RPL-P supports 0, 1, or 2.', 'option': '', 'page': 'FUSA', 'condition': ''}, {'length': 16, 'type': 'Reserved', 'cname': '__reserved', 'name': '', 'help': '', 'option': '', 'page': 'FUSA', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'GFX', 'path': 'GRAPHICS_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'GFX', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'IgdDvmt50PreAlloc', 'name': 'Internal Graphics Pre-allocated Memory', 'help': 'Size of memory preallocated for internal graphics.', 'option': '0x00:0MB, 0x01:32MB, 0x02:64MB, 0x03:96MB, 0x04:128MB, 0x05:160MB, 0xF0:4MB, 0xF1:8MB, 0xF2:12MB, 0xF3:16MB, 0xF4:20MB, 0xF5:24MB, 0xF6:28MB, 0xF7:32MB, 0xF8:36MB, 0xF9:40MB, 0xFA:44MB, 0xFB:48MB, 0xFC:52MB, 0xFD:56MB, 0xFE:60MB', 'page': 'GFX', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'ApertureSize', 'name': 'Aperture Size', 'help': 'Select the Aperture Size.', 'option': '0:128 MB, 1:256 MB, 2:512 MB', 'page': 'GFX', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'InternalGfx', 'name': 'Internal Graphics', 'help': 'Enable/disable internal graphics.', 'option': '$EN_DIS', 'page': 'GFX', 'condition': ''}, {'length': 8, 'value': 'x', 'type': 'Combo', 'cname': 'PrimaryDisplay', 'name': 'Selection of the primary display device', 'help': '0=iGFX, 1=PEG, 2=PCIe Graphics on PCH, 3(Default)=AUTO, 4=Switchable Graphics', 'option': '0:iGFX, 1:PEG, 2:PCIe Graphics on PCH, 3:AUTO, 4:Switchable Graphics', 'page': 'GFX', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'Combo', 'cname': 'GttSize', 'name': 'Selection of iGFX GTT Memory size', 'help': '1=2MB, 2=4MB, 3=8MB', 'option': '1:2MB, 2:4MB, 3:8MB', 'page': 'GFX', 'condition': ''}, {'length': 16, 'value': 'x', 'type': 'Reserved', 'cname': 'Dummy', 'name': '', 'help': '', 'option': '', 'page': 'GFX', 'condition': ''}, {'length': 32, 'value': '{', 'type': 'Reserved', 'cname': 'CfgHeader', 'name': '', 'help': '', 'option': '', 'page': 'PLT', 'path': 'CAPSULE_INFO_CFG_DATA', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'Reserved', 'cname': 'CondValue', 'name': '', 'help': '', 'option': '', 'page': 'PLT', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'DevType', 'name': 'DevType', 'help': 'Specify boot device', 'option': '0:SATA, 1:SD, 2:EMMC, 3:UFS, 4:SPI, 5:USB, 6:NVME, 7:MAX', 'page': 'PLT', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'DevInstance', 'name': 'Boot Device instance', 'help': 'Specify boot device instance when then are multple instances', 'option': '0:Device 0, 1:Device 1, 2:Device 2, 3:Device 3', 'page': 'PLT', 'order': 0, 'condition': ''}, {'length': 24, 'value': 'x', 'type': 'Reserved', 'cname': 'Reserved', 'name': '', 'help': '', 'option': '', 'page': 'PLT', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'HwPart', 'name': 'Hardware Partition', 'help': 'Specify hardware partition number', 'option': '0:User Partition, 1:Boot Partition 1, 2:Boot Partition 2', 'page': 'PLT', 'condition': ''}, {'length': 8, 'type': 'EditNum, INT, (0,127)', 'cname': 'SwPart', 'name': 'Software Partition', 'help': 'Specify software partition number', 'option': '', 'page': 'PLT', 'condition': ''}, {'length': 8, 'type': 'Combo', 'cname': 'FsType', 'name': 'File System Type', 'help': 'Image is loaded from file system instead of raw data', 'option': '0:FAT, 1:EXT2, 2:AUTO, 3:RAW', 'page': 'PLT', 'condition': ''}, {'length': 128, 'value': "'", 'type': 'EditText', 'cname': 'FileName', 'name': 'Capsule File Name', 'help': 'Specify file name of capsule image  (16-byte max length)', 'option': '', 'page': 'PLT', 'condition': ''}, {'length': 32, 'value': 'x', 'type': 'EditNum, HEX, (0,0xFFFFFFFF)', 'cname': 'LbaAddr', 'name': 'LBA address for capsule image)', 'help': 'specify LBA address where to find capsule image', 'option': '', 'page': 'PLT', 'condition': ''}], '_path_list': ['', 'FEATURES_CFG_DATA', 'FEATURES_CFG_DATA.Features', 'GPIO_CFG_DATA', 'GPIO_CFG_DATA.GPIO_CFG_HDR', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I00', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I00', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I01', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I01', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I02', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I02', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I03', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I03', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I04', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I04', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I05', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I05', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I06', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I06', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I07', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I07', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I08', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I08', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I09', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I09', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I10', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I10', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I11', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I11', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I12', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I12', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I13', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I13', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I14', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I14', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I15', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I15', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I16', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I16', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I17', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I17', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I18', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I18', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I19', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I19', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I20', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I20', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I21', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I21', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_I22', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_I22', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R00', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R00', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R01', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R01', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R02', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R02', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R03', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R03', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R04', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R04', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R05', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R05', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R06', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R06', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R07', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R07', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R08', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R08', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R09', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R09', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R10', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R10', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R11', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R11', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R12', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R12', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R13', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R13', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R14', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R14', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R15', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R15', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R16', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R16', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R17', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R17', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R18', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R18', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R19', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R19', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R20', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R20', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_R21', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_R21', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J00', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J00', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J01', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J01', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J02', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J02', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J03', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J03', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J04', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J04', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J05', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J05', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J06', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J06', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J07', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J07', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J08', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J08', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J09', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J09', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J10', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J10', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_J11', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_J11', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B00', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B00', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B01', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B01', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B02', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B02', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B03', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B03', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B04', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B04', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B05', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B05', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B06', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B06', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B07', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B07', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B08', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B08', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B09', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B09', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B10', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B10', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B11', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B11', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B12', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B12', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B13', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B13', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B14', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B14', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B15', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B15', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B16', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B16', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B17', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B17', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B18', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B18', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B19', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B19', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B20', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B20', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B21', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B21', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B22', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B22', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_B23', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_B23', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_G00', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_G00', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_G01', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_G01', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_G02', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_G02', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_G03', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_G03', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_G04', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_G04', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_G05', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_G05', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_G06', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_G06', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_G07', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_G07', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H00', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H00', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H01', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H01', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H02', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H02', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H03', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H03', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H04', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H04', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H05', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H05', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H06', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H06', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H07', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H07', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H08', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H08', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H09', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H09', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H10', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H10', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H11', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H11', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H12', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H12', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H13', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H13', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H14', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H14', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H15', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H15', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H16', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H16', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H17', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H17', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H18', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H18', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H19', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H19', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H20', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H20', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H21', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H21', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H22', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H22', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_H23', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_H23', 'GPIO_CFG_DATA.GpioPinConfig0_GPD00', 'GPIO_CFG_DATA.GpioPinConfig1_GPD00', 'GPIO_CFG_DATA.GpioPinConfig0_GPD01', 'GPIO_CFG_DATA.GpioPinConfig1_GPD01', 'GPIO_CFG_DATA.GpioPinConfig0_GPD02', 'GPIO_CFG_DATA.GpioPinConfig1_GPD02', 'GPIO_CFG_DATA.GpioPinConfig0_GPD03', 'GPIO_CFG_DATA.GpioPinConfig1_GPD03', 'GPIO_CFG_DATA.GpioPinConfig0_GPD04', 'GPIO_CFG_DATA.GpioPinConfig1_GPD04', 'GPIO_CFG_DATA.GpioPinConfig0_GPD05', 'GPIO_CFG_DATA.GpioPinConfig1_GPD05', 'GPIO_CFG_DATA.GpioPinConfig0_GPD06', 'GPIO_CFG_DATA.GpioPinConfig1_GPD06', 'GPIO_CFG_DATA.GpioPinConfig0_GPD07', 'GPIO_CFG_DATA.GpioPinConfig1_GPD07', 'GPIO_CFG_DATA.GpioPinConfig0_GPD08', 'GPIO_CFG_DATA.GpioPinConfig1_GPD08', 'GPIO_CFG_DATA.GpioPinConfig0_GPD09', 'GPIO_CFG_DATA.GpioPinConfig1_GPD09', 'GPIO_CFG_DATA.GpioPinConfig0_GPD10', 'GPIO_CFG_DATA.GpioPinConfig1_GPD10', 'GPIO_CFG_DATA.GpioPinConfig0_GPD11', 'GPIO_CFG_DATA.GpioPinConfig1_GPD11', 'GPIO_CFG_DATA.GpioPinConfig0_GPD12', 'GPIO_CFG_DATA.GpioPinConfig1_GPD12', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A00', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A00', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A01', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A01', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A02', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A02', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A03', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A03', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A04', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A04', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A05', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A05', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A06', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A06', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A07', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A07', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A08', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A08', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A09', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A09', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A10', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A10', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A11', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A11', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A12', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A12', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A13', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A13', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A14', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A14', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A15', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A15', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A16', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A16', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A17', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A17', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A18', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A18', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A19', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A19', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A20', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A20', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A21', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A21', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A22', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A22', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_A23', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_A23', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C00', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C00', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C01', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C01', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C02', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C02', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C03', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C03', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C04', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C04', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C05', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C05', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C06', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C06', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C07', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C07', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C08', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C08', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C09', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C09', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C10', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C10', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C11', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C11', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C12', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C12', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C13', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C13', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C14', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C14', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C15', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C15', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C16', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C16', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C17', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C17', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C18', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C18', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C19', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C19', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C20', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C20', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C21', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C21', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C22', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C22', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_C23', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_C23', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_S00', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_S00', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_S01', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_S01', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_S02', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_S02', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_S03', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_S03', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_S04', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_S04', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_S05', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_S05', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_S06', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_S06', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_S07', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_S07', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E00', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E00', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E01', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E01', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E02', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E02', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E03', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E03', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E04', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E04', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E05', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E05', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E06', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E06', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E07', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E07', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E08', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E08', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E09', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E09', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E10', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E10', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E11', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E11', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E12', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E12', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E13', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E13', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E14', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E14', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E15', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E15', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E16', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E16', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E17', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E17', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E18', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E18', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E19', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E19', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E20', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E20', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E21', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E21', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E22', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E22', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_E23', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_E23', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K00', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K00', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K01', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K01', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K02', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K02', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K03', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K03', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K04', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K04', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K05', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K05', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K06', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K06', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K07', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K07', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K08', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K08', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K09', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K09', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K10', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K10', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_K11', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_K11', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F00', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F00', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F01', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F01', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F02', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F02', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F03', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F03', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F04', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F04', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F05', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F05', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F06', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F06', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F07', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F07', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F08', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F08', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F09', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F09', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F10', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F10', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F11', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F11', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F12', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F12', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F13', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F13', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F14', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F14', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F15', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F15', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F16', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F16', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F17', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F17', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F18', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F18', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F19', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F19', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F20', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F20', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F21', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F21', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F22', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F22', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_F23', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_F23', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D00', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D00', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D01', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D01', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D02', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D02', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D03', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D03', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D04', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D04', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D05', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D05', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D06', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D06', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D07', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D07', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D08', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D08', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D09', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D09', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D10', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D10', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D11', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D11', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D12', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D12', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D13', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D13', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D14', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D14', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D15', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D15', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D16', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D16', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D17', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D17', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D18', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D18', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D19', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D19', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D20', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D20', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D21', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D21', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D22', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D22', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_D23', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_D23', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_T00', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_T00', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_T01', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_T01', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_T02', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_T02', 'GPIO_CFG_DATA.GpioPinConfig0_GPP_T03', 'GPIO_CFG_DATA.GpioPinConfig1_GPP_T03', 'PLATFORMID_CFG_DATA', 'PLAT_NAME_CFG_DATA', 'GEN_CFG_DATA', 'TCC_CFG_DATA', 'PLDSEL_CFG_DATA', 'PLDSEL_CFG_DATA.PldSelGpio', 'BOOT_OPTION_CFG_DATA_0', 'BOOT_OPTION_CFG_DATA_1', 'BOOT_OPTION_CFG_DATA_2', 'BOOT_OPTION_CFG_DATA_3', 'BOOT_OPTION_CFG_DATA_4', 'BOOT_OPTION_CFG_DATA_5', 'BOOT_OPTION_CFG_DATA_6', 'BOOT_OPTION_CFG_DATA_7', 'BOOT_OPTION_CFG_DATA_8', 'BOOT_OPTION_CFG_DATA_9', 'MEMORY_CFG_DATA', 'MEM_SPD0_CFG_DATA', 'MEM_SPD1_CFG_DATA', 'MEM_SPD2_CFG_DATA', 'MEM_SPD3_CFG_DATA', 'MEM_SPD4_CFG_DATA', 'MEM_SPD5_CFG_DATA', 'MEM_SPD6_CFG_DATA', 'MEM_SPD7_CFG_DATA', 'DYNAMIC_CFG_DATA', 'SILICON_CFG_DATA', 'POWER_CFG_DATA', 'PSD_CFG_DATA', 'PEP_CFG_DATA', 'FUSA_CFG_DATA', 'GRAPHICS_CFG_DATA', 'CAPSULE_INFO_CFG_DATA']}